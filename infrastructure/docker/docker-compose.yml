version: '3.8'

services:
  # TimescaleDB for time-series data storage
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: forex_timescaledb
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=forex_user
      - POSTGRES_PASSWORD=forex_password
      - POSTGRES_DB=forex_db
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ../../infrastructure/database/timescaledb_schema.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U forex_user -d forex_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    container_name: forex_redis
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: forex_prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - default
      - monitoring-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: forex_grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/forex_platform_overview.json
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - default
      - monitoring-network
    restart: unless-stopped

  # AlertManager for alert handling
  alertmanager:
    image: prom/alertmanager:latest
    container_name: forex_alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - default
      - monitoring-network
    restart: unless-stopped

  # Node Exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: forex_node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - default
      - monitoring-network
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: forex_cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - default
      - monitoring-network
    restart: unless-stopped

  # Jupyter Lab for prototyping and analysis
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: forex_jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ../../notebooks:/home/jovyan/notebooks
      - ../../data:/home/jovyan/data
    restart: unless-stopped

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    container_name: forex_pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - timescaledb
    restart: unless-stopped

  # Adminer as a lightweight database management alternative
  adminer:
    image: adminer:latest
    container_name: forex_adminer
    ports:
      - "8080:8080"
    depends_on:
      - timescaledb
    restart: unless-stopped

  analysis-engine-service:
    build:
      context: ../../analysis-engine-service
      dockerfile: Dockerfile
    container_name: forex_analysis_engine
    ports:
      - "8000:8000"  # FastAPI port
      - "50051:50051" # gRPC port
    environment:
      - PYTHONUNBUFFERED=1
      - ANALYSIS_ENGINE_PORT=8000 # Ensure FastAPI runs on this port inside container
      - ANALYSIS_ENGINE_GRPC_PORT=50051 # Ensure gRPC runs on this port inside container
      # Add other necessary environment variables, e.g., DB_HOST, REDIS_HOST
      # These should ideally point to the service names defined in this docker-compose file
      - DB_HOST=timescaledb 
      - DB_USER=forex_user
      - DB_PASSWORD=forex_password
      - DB_NAME=forex_db
      - REDIS_HOST=redis
    volumes:
      - ../../analysis-engine-service:/app # Mount local code for development (optional)
    depends_on:
      - timescaledb
      - redis
    networks:
      - default
    restart: unless-stopped

volumes:
  timescaledb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  default:
    driver: bridge
  monitoring-network:
    driver: bridge
    name: monitoring-network