input {
  # TCP input for syslog
  tcp {
    port => 5000
    type => "syslog"
  }
  
  # UDP input for syslog
  udp {
    port => 5000
    type => "syslog"
  }
  
  # Beats input for Filebeat
  beats {
    port => 5044
    type => "beats"
  }
  
  # HTTP input for direct API logging
  http {
    port => 8080
    codec => "json"
    type => "http"
  }
}

filter {
  # Parse JSON logs
  if [type] == "http" or [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "log"
    }
    
    # Extract fields from log
    if [log] {
      mutate {
        add_field => {
          "timestamp" => "%{[log][timestamp]}"
          "level" => "%{[log][level]}"
          "service" => "%{[log][service]}"
          "correlation_id" => "%{[log][correlation_id]}"
          "message" => "%{[log][message]}"
        }
      }
    }
  }
  
  # Parse syslog format
  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
    }
    
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
    
    mutate {
      add_field => {
        "timestamp" => "%{syslog_timestamp}"
        "service" => "%{syslog_program}"
        "message" => "%{syslog_message}"
      }
    }
  }
  
  # Extract security events
  if [log][event_type] or [event_type] {
    mutate {
      add_tag => [ "security_event" ]
    }
    
    # Extract security event fields
    if [log][event_type] {
      mutate {
        add_field => {
          "event_type" => "%{[log][event_type]}"
          "category" => "%{[log][category]}"
          "severity" => "%{[log][severity]}"
          "user_id" => "%{[log][user_id]}"
          "resource" => "%{[log][resource]}"
          "action" => "%{[log][action]}"
          "status" => "%{[log][status]}"
          "ip_address" => "%{[log][ip_address]}"
        }
      }
    }
  }
  
  # Extract error events
  if [level] == "ERROR" or [log][level] == "ERROR" {
    mutate {
      add_tag => [ "error" ]
    }
  }
  
  # Extract warning events
  if [level] == "WARNING" or [log][level] == "WARNING" {
    mutate {
      add_tag => [ "warning" ]
    }
  }
  
  # Extract authentication events
  if [event_type] =~ /^auth/ or [log][event_type] =~ /^auth/ {
    mutate {
      add_tag => [ "authentication" ]
    }
  }
  
  # Extract API events
  if [event_type] =~ /^api/ or [log][event_type] =~ /^api/ {
    mutate {
      add_tag => [ "api" ]
    }
  }
  
  # Add timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "forex-logs-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "${ELASTIC_PASSWORD}"
  }
  
  # Output security events to separate index
  if "security_event" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "forex-security-%{+YYYY.MM.dd}"
      user => "elastic"
      password => "${ELASTIC_PASSWORD}"
    }
  }
  
  # Output error events to separate index
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "forex-errors-%{+YYYY.MM.dd}"
      user => "elastic"
      password => "${ELASTIC_PASSWORD}"
    }
  }
  
  # Output to stdout for debugging
  if [type] == "http" {
    stdout {
      codec => rubydebug
    }
  }
}
