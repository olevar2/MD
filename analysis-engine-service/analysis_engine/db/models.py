import uuid
from datetime import datetime
from sqlalchemy import Column, Integer, String, Float, Boolean, DateTime, ForeignKey, JSON, Text
from sqlalchemy.dialects.postgresql import UUID, JSONB
from sqlalchemy.orm import relationship

from analysis_engine.db.connection import Base

class ToolCategory(Base):
    """Tool category model representing categories of trading tools"""
    __tablename__ = "tool_categories"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), unique=True, nullable=False)
    description = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    tools = relationship("TradingTool", back_populates="category")

class TradingTool(Base):
    """Trading tool model representing individual trading indicators or strategies"""
    __tablename__ = "trading_tools"

    id = Column(Integer, primary_key=True, index=True)
    tool_id = Column(String(100), unique=True, nullable=False, index=True)
    name = Column(String(100), nullable=False)
    category_id = Column(Integer, ForeignKey("tool_categories.id"))
    description = Column(Text)
    parameters = Column(JSONB, default={})
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    category = relationship("ToolCategory", back_populates="tools")
    signals = relationship("ToolSignal", back_populates="tool")
    metrics = relationship("EffectivenessMetric", back_populates="tool")

class ToolSignal(Base):
    """Signal generated by a trading tool"""
    __tablename__ = "tool_signals"

    id = Column(Integer, primary_key=True, index=True)
    signal_id = Column(UUID(as_uuid=True), unique=True, nullable=False, index=True, default=uuid.uuid4)
    tool_id = Column(String(100), ForeignKey("trading_tools.tool_id"), nullable=False)
    signal_type = Column(String(50), nullable=False)  # buy, sell, hold, etc.
    instrument = Column(String(20), nullable=False, index=True)  # e.g., 'EUR_USD'
    timestamp = Column(DateTime, nullable=False, index=True)
    confidence = Column(Float, default=1.0)  # Signal confidence level (0.0-1.0)
    timeframe = Column(String(10), nullable=False, index=True)  # e.g., '1H', '4H', '1D'
    market_regime = Column(String(20), default='unknown', index=True)  # trending, ranging, volatile, unknown
    additional_data = Column(JSONB, default={})
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    tool = relationship("TradingTool", back_populates="signals")
    outcomes = relationship("SignalOutcome", back_populates="signal", cascade="all, delete-orphan")

class SignalOutcome(Base):
    """Outcome of a trading signal"""
    __tablename__ = "signal_outcomes"

    id = Column(Integer, primary_key=True, index=True)
    signal_id = Column(UUID(as_uuid=True), ForeignKey("tool_signals.signal_id"), nullable=False)
    success = Column(Boolean, nullable=False)
    realized_profit = Column(Float, default=0.0)
    timestamp = Column(DateTime, nullable=False, index=True)
    additional_data = Column(JSONB, default={})
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    signal = relationship("ToolSignal", back_populates="outcomes")

class EffectivenessMetric(Base):
    """Aggregated effectiveness metrics for trading tools"""
    __tablename__ = "effectiveness_metrics"

    id = Column(Integer, primary_key=True, index=True)
    tool_id = Column(String(100), ForeignKey("trading_tools.tool_id"), nullable=False)
    metric_type = Column(String(50), nullable=False)  # win_rate, profit_factor, expected_payoff, etc.
    value = Column(Float, nullable=False)
    timeframe = Column(String(10), index=True)  # Optional filter: specific timeframe
    instrument = Column(String(20), index=True)  # Optional filter: specific instrument
    market_regime = Column(String(20), index=True)  # Optional filter: specific market regime
    start_date = Column(DateTime, nullable=False)
    end_date = Column(DateTime, nullable=False)
    signal_count = Column(Integer, nullable=False)
    outcome_count = Column(Integer, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    tool = relationship("TradingTool", back_populates="metrics")

class EffectivenessReport(Base):
    """Saved effectiveness reports"""
    __tablename__ = "effectiveness_reports"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)
    description = Column(Text)
    report_data = Column(JSONB, nullable=False)
    filters = Column(JSONB, default={})
    created_by = Column(String(100))
    created_at = Column(DateTime, default=datetime.utcnow)