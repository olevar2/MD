# E2E Testing GitHub Actions Workflow

name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Test environment to use'
        required: true
        default: 'simulated'
        type: choice
        options:
          - simulated
          - hybrid

jobs:
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      # Start Kafka service for event messaging
      kafka:
        image: wurstmeister/kafka:2.13-2.7.0
        ports:
          - 9092:9092
        env:
          KAFKA_ADVERTISED_HOST_NAME: localhost
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_CREATE_TOPICS: "trading-signals:1:1,orders:1:1,trades:1:1,market-data:1:1"
        
      # Start Zookeeper service for Kafka
      zookeeper:
        image: wurstmeister/zookeeper:3.4.6
        ports:
          - 2181:2181

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-playwright pytest-asyncio pytest-xdist
          
      - name: Install Playwright browsers
        run: |
          python -m playwright install chromium
          
      - name: Build Docker images
        run: |
          cd infrastructure/docker
          docker-compose build
          
      - name: Run E2E tests
        env:
          TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'simulated' }}
          TEST_USER_EMAIL: test@example.com
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD || 'Password123!' }}
          TEST_BROKER_API_KEY: ${{ secrets.TEST_BROKER_API_KEY }}
          TEST_BROKER_SECRET: ${{ secrets.TEST_BROKER_SECRET }}
          PLAYWRIGHT_HEADLESS: "true"
        run: |
          # Start the application in background
          docker-compose -f infrastructure/docker/docker-compose.test.yml up -d
          
          # Wait for services to be ready
          python -c "import time; time.sleep(15)"
          
          # Run E2E tests with parallel execution
          python -m pytest e2e/tests/trading_lifecycle_test.py -v --html=reports/e2e-test-report.html
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            reports/
            playwright-report/
            test-results/
