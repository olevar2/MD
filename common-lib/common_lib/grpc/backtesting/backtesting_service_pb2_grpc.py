# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from backtesting import backtesting_service_pb2 as backtesting_dot_backtesting__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in backtesting/backtesting_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BacktestingServiceStub(object):
    """BacktestingService provides methods for backtesting trading strategies
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunBacktest = channel.unary_unary(
                '/forex.backtesting.BacktestingService/RunBacktest',
                request_serializer=backtesting_dot_backtesting__service__pb2.RunBacktestRequest.SerializeToString,
                response_deserializer=backtesting_dot_backtesting__service__pb2.RunBacktestResponse.FromString,
                _registered_method=True)
        self.GetBacktestResult = channel.unary_unary(
                '/forex.backtesting.BacktestingService/GetBacktestResult',
                request_serializer=backtesting_dot_backtesting__service__pb2.GetBacktestResultRequest.SerializeToString,
                response_deserializer=backtesting_dot_backtesting__service__pb2.GetBacktestResultResponse.FromString,
                _registered_method=True)
        self.RunOptimization = channel.unary_unary(
                '/forex.backtesting.BacktestingService/RunOptimization',
                request_serializer=backtesting_dot_backtesting__service__pb2.RunOptimizationRequest.SerializeToString,
                response_deserializer=backtesting_dot_backtesting__service__pb2.RunOptimizationResponse.FromString,
                _registered_method=True)
        self.GetOptimizationResult = channel.unary_unary(
                '/forex.backtesting.BacktestingService/GetOptimizationResult',
                request_serializer=backtesting_dot_backtesting__service__pb2.GetOptimizationResultRequest.SerializeToString,
                response_deserializer=backtesting_dot_backtesting__service__pb2.GetOptimizationResultResponse.FromString,
                _registered_method=True)
        self.RunWalkForwardAnalysis = channel.unary_unary(
                '/forex.backtesting.BacktestingService/RunWalkForwardAnalysis',
                request_serializer=backtesting_dot_backtesting__service__pb2.RunWalkForwardAnalysisRequest.SerializeToString,
                response_deserializer=backtesting_dot_backtesting__service__pb2.RunWalkForwardAnalysisResponse.FromString,
                _registered_method=True)
        self.GetWalkForwardResult = channel.unary_unary(
                '/forex.backtesting.BacktestingService/GetWalkForwardResult',
                request_serializer=backtesting_dot_backtesting__service__pb2.GetWalkForwardResultRequest.SerializeToString,
                response_deserializer=backtesting_dot_backtesting__service__pb2.GetWalkForwardResultResponse.FromString,
                _registered_method=True)


class BacktestingServiceServicer(object):
    """BacktestingService provides methods for backtesting trading strategies
    """

    def RunBacktest(self, request, context):
        """RunBacktest runs a backtest for a trading strategy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBacktestResult(self, request, context):
        """GetBacktestResult retrieves the result of a backtest
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunOptimization(self, request, context):
        """RunOptimization runs an optimization for a trading strategy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptimizationResult(self, request, context):
        """GetOptimizationResult retrieves the result of an optimization
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunWalkForwardAnalysis(self, request, context):
        """RunWalkForwardAnalysis runs a walk-forward analysis for a trading strategy
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWalkForwardResult(self, request, context):
        """GetWalkForwardResult retrieves the result of a walk-forward analysis
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BacktestingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunBacktest': grpc.unary_unary_rpc_method_handler(
                    servicer.RunBacktest,
                    request_deserializer=backtesting_dot_backtesting__service__pb2.RunBacktestRequest.FromString,
                    response_serializer=backtesting_dot_backtesting__service__pb2.RunBacktestResponse.SerializeToString,
            ),
            'GetBacktestResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBacktestResult,
                    request_deserializer=backtesting_dot_backtesting__service__pb2.GetBacktestResultRequest.FromString,
                    response_serializer=backtesting_dot_backtesting__service__pb2.GetBacktestResultResponse.SerializeToString,
            ),
            'RunOptimization': grpc.unary_unary_rpc_method_handler(
                    servicer.RunOptimization,
                    request_deserializer=backtesting_dot_backtesting__service__pb2.RunOptimizationRequest.FromString,
                    response_serializer=backtesting_dot_backtesting__service__pb2.RunOptimizationResponse.SerializeToString,
            ),
            'GetOptimizationResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptimizationResult,
                    request_deserializer=backtesting_dot_backtesting__service__pb2.GetOptimizationResultRequest.FromString,
                    response_serializer=backtesting_dot_backtesting__service__pb2.GetOptimizationResultResponse.SerializeToString,
            ),
            'RunWalkForwardAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.RunWalkForwardAnalysis,
                    request_deserializer=backtesting_dot_backtesting__service__pb2.RunWalkForwardAnalysisRequest.FromString,
                    response_serializer=backtesting_dot_backtesting__service__pb2.RunWalkForwardAnalysisResponse.SerializeToString,
            ),
            'GetWalkForwardResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWalkForwardResult,
                    request_deserializer=backtesting_dot_backtesting__service__pb2.GetWalkForwardResultRequest.FromString,
                    response_serializer=backtesting_dot_backtesting__service__pb2.GetWalkForwardResultResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'forex.backtesting.BacktestingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('forex.backtesting.BacktestingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BacktestingService(object):
    """BacktestingService provides methods for backtesting trading strategies
    """

    @staticmethod
    def RunBacktest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.backtesting.BacktestingService/RunBacktest',
            backtesting_dot_backtesting__service__pb2.RunBacktestRequest.SerializeToString,
            backtesting_dot_backtesting__service__pb2.RunBacktestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBacktestResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.backtesting.BacktestingService/GetBacktestResult',
            backtesting_dot_backtesting__service__pb2.GetBacktestResultRequest.SerializeToString,
            backtesting_dot_backtesting__service__pb2.GetBacktestResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunOptimization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.backtesting.BacktestingService/RunOptimization',
            backtesting_dot_backtesting__service__pb2.RunOptimizationRequest.SerializeToString,
            backtesting_dot_backtesting__service__pb2.RunOptimizationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOptimizationResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.backtesting.BacktestingService/GetOptimizationResult',
            backtesting_dot_backtesting__service__pb2.GetOptimizationResultRequest.SerializeToString,
            backtesting_dot_backtesting__service__pb2.GetOptimizationResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RunWalkForwardAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.backtesting.BacktestingService/RunWalkForwardAnalysis',
            backtesting_dot_backtesting__service__pb2.RunWalkForwardAnalysisRequest.SerializeToString,
            backtesting_dot_backtesting__service__pb2.RunWalkForwardAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWalkForwardResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.backtesting.BacktestingService/GetWalkForwardResult',
            backtesting_dot_backtesting__service__pb2.GetWalkForwardResultRequest.SerializeToString,
            backtesting_dot_backtesting__service__pb2.GetWalkForwardResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
