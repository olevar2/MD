# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from causal_analysis import causal_analysis_service_pb2 as causal__analysis_dot_causal__analysis__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in causal_analysis/causal_analysis_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CausalAnalysisServiceStub(object):
    """CausalAnalysisService provides methods for causal analysis of market data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCausalGraph = channel.unary_unary(
                '/forex.causal_analysis.CausalAnalysisService/GetCausalGraph',
                request_serializer=causal__analysis_dot_causal__analysis__service__pb2.GetCausalGraphRequest.SerializeToString,
                response_deserializer=causal__analysis_dot_causal__analysis__service__pb2.GetCausalGraphResponse.FromString,
                _registered_method=True)
        self.GenerateCounterfactuals = channel.unary_unary(
                '/forex.causal_analysis.CausalAnalysisService/GenerateCounterfactuals',
                request_serializer=causal__analysis_dot_causal__analysis__service__pb2.GenerateCounterfactualsRequest.SerializeToString,
                response_deserializer=causal__analysis_dot_causal__analysis__service__pb2.GenerateCounterfactualsResponse.FromString,
                _registered_method=True)
        self.EstimateEffects = channel.unary_unary(
                '/forex.causal_analysis.CausalAnalysisService/EstimateEffects',
                request_serializer=causal__analysis_dot_causal__analysis__service__pb2.EstimateEffectsRequest.SerializeToString,
                response_deserializer=causal__analysis_dot_causal__analysis__service__pb2.EstimateEffectsResponse.FromString,
                _registered_method=True)
        self.DiscoverStructure = channel.unary_unary(
                '/forex.causal_analysis.CausalAnalysisService/DiscoverStructure',
                request_serializer=causal__analysis_dot_causal__analysis__service__pb2.DiscoverStructureRequest.SerializeToString,
                response_deserializer=causal__analysis_dot_causal__analysis__service__pb2.DiscoverStructureResponse.FromString,
                _registered_method=True)
        self.GetInterventionEffect = channel.unary_unary(
                '/forex.causal_analysis.CausalAnalysisService/GetInterventionEffect',
                request_serializer=causal__analysis_dot_causal__analysis__service__pb2.GetInterventionEffectRequest.SerializeToString,
                response_deserializer=causal__analysis_dot_causal__analysis__service__pb2.GetInterventionEffectResponse.FromString,
                _registered_method=True)


class CausalAnalysisServiceServicer(object):
    """CausalAnalysisService provides methods for causal analysis of market data
    """

    def GetCausalGraph(self, request, context):
        """GetCausalGraph retrieves or generates a causal graph for the specified parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateCounterfactuals(self, request, context):
        """GenerateCounterfactuals generates counterfactual scenarios based on a causal graph
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EstimateEffects(self, request, context):
        """EstimateEffects estimates the effects of interventions on a causal graph
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverStructure(self, request, context):
        """DiscoverStructure discovers the causal structure from data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInterventionEffect(self, request, context):
        """GetInterventionEffect calculates the effect of an intervention on a target variable
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CausalAnalysisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCausalGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCausalGraph,
                    request_deserializer=causal__analysis_dot_causal__analysis__service__pb2.GetCausalGraphRequest.FromString,
                    response_serializer=causal__analysis_dot_causal__analysis__service__pb2.GetCausalGraphResponse.SerializeToString,
            ),
            'GenerateCounterfactuals': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateCounterfactuals,
                    request_deserializer=causal__analysis_dot_causal__analysis__service__pb2.GenerateCounterfactualsRequest.FromString,
                    response_serializer=causal__analysis_dot_causal__analysis__service__pb2.GenerateCounterfactualsResponse.SerializeToString,
            ),
            'EstimateEffects': grpc.unary_unary_rpc_method_handler(
                    servicer.EstimateEffects,
                    request_deserializer=causal__analysis_dot_causal__analysis__service__pb2.EstimateEffectsRequest.FromString,
                    response_serializer=causal__analysis_dot_causal__analysis__service__pb2.EstimateEffectsResponse.SerializeToString,
            ),
            'DiscoverStructure': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverStructure,
                    request_deserializer=causal__analysis_dot_causal__analysis__service__pb2.DiscoverStructureRequest.FromString,
                    response_serializer=causal__analysis_dot_causal__analysis__service__pb2.DiscoverStructureResponse.SerializeToString,
            ),
            'GetInterventionEffect': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInterventionEffect,
                    request_deserializer=causal__analysis_dot_causal__analysis__service__pb2.GetInterventionEffectRequest.FromString,
                    response_serializer=causal__analysis_dot_causal__analysis__service__pb2.GetInterventionEffectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'forex.causal_analysis.CausalAnalysisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('forex.causal_analysis.CausalAnalysisService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CausalAnalysisService(object):
    """CausalAnalysisService provides methods for causal analysis of market data
    """

    @staticmethod
    def GetCausalGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.causal_analysis.CausalAnalysisService/GetCausalGraph',
            causal__analysis_dot_causal__analysis__service__pb2.GetCausalGraphRequest.SerializeToString,
            causal__analysis_dot_causal__analysis__service__pb2.GetCausalGraphResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateCounterfactuals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.causal_analysis.CausalAnalysisService/GenerateCounterfactuals',
            causal__analysis_dot_causal__analysis__service__pb2.GenerateCounterfactualsRequest.SerializeToString,
            causal__analysis_dot_causal__analysis__service__pb2.GenerateCounterfactualsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EstimateEffects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.causal_analysis.CausalAnalysisService/EstimateEffects',
            causal__analysis_dot_causal__analysis__service__pb2.EstimateEffectsRequest.SerializeToString,
            causal__analysis_dot_causal__analysis__service__pb2.EstimateEffectsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DiscoverStructure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.causal_analysis.CausalAnalysisService/DiscoverStructure',
            causal__analysis_dot_causal__analysis__service__pb2.DiscoverStructureRequest.SerializeToString,
            causal__analysis_dot_causal__analysis__service__pb2.DiscoverStructureResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInterventionEffect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.causal_analysis.CausalAnalysisService/GetInterventionEffect',
            causal__analysis_dot_causal__analysis__service__pb2.GetInterventionEffectRequest.SerializeToString,
            causal__analysis_dot_causal__analysis__service__pb2.GetInterventionEffectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
