# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from market_analysis import market_analysis_service_pb2 as market__analysis_dot_market__analysis__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in market_analysis/market_analysis_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MarketAnalysisServiceStub(object):
    """MarketAnalysisService provides methods for analyzing market data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CalculateIndicators = channel.unary_unary(
                '/forex.market_analysis.MarketAnalysisService/CalculateIndicators',
                request_serializer=market__analysis_dot_market__analysis__service__pb2.CalculateIndicatorsRequest.SerializeToString,
                response_deserializer=market__analysis_dot_market__analysis__service__pb2.CalculateIndicatorsResponse.FromString,
                _registered_method=True)
        self.DetectPatterns = channel.unary_unary(
                '/forex.market_analysis.MarketAnalysisService/DetectPatterns',
                request_serializer=market__analysis_dot_market__analysis__service__pb2.DetectPatternsRequest.SerializeToString,
                response_deserializer=market__analysis_dot_market__analysis__service__pb2.DetectPatternsResponse.FromString,
                _registered_method=True)
        self.DetectSupportResistance = channel.unary_unary(
                '/forex.market_analysis.MarketAnalysisService/DetectSupportResistance',
                request_serializer=market__analysis_dot_market__analysis__service__pb2.DetectSupportResistanceRequest.SerializeToString,
                response_deserializer=market__analysis_dot_market__analysis__service__pb2.DetectSupportResistanceResponse.FromString,
                _registered_method=True)
        self.DetectMarketRegime = channel.unary_unary(
                '/forex.market_analysis.MarketAnalysisService/DetectMarketRegime',
                request_serializer=market__analysis_dot_market__analysis__service__pb2.DetectMarketRegimeRequest.SerializeToString,
                response_deserializer=market__analysis_dot_market__analysis__service__pb2.DetectMarketRegimeResponse.FromString,
                _registered_method=True)
        self.PerformCorrelationAnalysis = channel.unary_unary(
                '/forex.market_analysis.MarketAnalysisService/PerformCorrelationAnalysis',
                request_serializer=market__analysis_dot_market__analysis__service__pb2.PerformCorrelationAnalysisRequest.SerializeToString,
                response_deserializer=market__analysis_dot_market__analysis__service__pb2.PerformCorrelationAnalysisResponse.FromString,
                _registered_method=True)
        self.PerformVolatilityAnalysis = channel.unary_unary(
                '/forex.market_analysis.MarketAnalysisService/PerformVolatilityAnalysis',
                request_serializer=market__analysis_dot_market__analysis__service__pb2.PerformVolatilityAnalysisRequest.SerializeToString,
                response_deserializer=market__analysis_dot_market__analysis__service__pb2.PerformVolatilityAnalysisResponse.FromString,
                _registered_method=True)


class MarketAnalysisServiceServicer(object):
    """MarketAnalysisService provides methods for analyzing market data
    """

    def CalculateIndicators(self, request, context):
        """CalculateIndicators calculates technical indicators for market data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectPatterns(self, request, context):
        """DetectPatterns detects chart patterns in market data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectSupportResistance(self, request, context):
        """DetectSupportResistance detects support and resistance levels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectMarketRegime(self, request, context):
        """DetectMarketRegime detects the current market regime
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformCorrelationAnalysis(self, request, context):
        """PerformCorrelationAnalysis performs correlation analysis between symbols
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformVolatilityAnalysis(self, request, context):
        """PerformVolatilityAnalysis performs volatility analysis for a symbol
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketAnalysisServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CalculateIndicators': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateIndicators,
                    request_deserializer=market__analysis_dot_market__analysis__service__pb2.CalculateIndicatorsRequest.FromString,
                    response_serializer=market__analysis_dot_market__analysis__service__pb2.CalculateIndicatorsResponse.SerializeToString,
            ),
            'DetectPatterns': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectPatterns,
                    request_deserializer=market__analysis_dot_market__analysis__service__pb2.DetectPatternsRequest.FromString,
                    response_serializer=market__analysis_dot_market__analysis__service__pb2.DetectPatternsResponse.SerializeToString,
            ),
            'DetectSupportResistance': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectSupportResistance,
                    request_deserializer=market__analysis_dot_market__analysis__service__pb2.DetectSupportResistanceRequest.FromString,
                    response_serializer=market__analysis_dot_market__analysis__service__pb2.DetectSupportResistanceResponse.SerializeToString,
            ),
            'DetectMarketRegime': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectMarketRegime,
                    request_deserializer=market__analysis_dot_market__analysis__service__pb2.DetectMarketRegimeRequest.FromString,
                    response_serializer=market__analysis_dot_market__analysis__service__pb2.DetectMarketRegimeResponse.SerializeToString,
            ),
            'PerformCorrelationAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformCorrelationAnalysis,
                    request_deserializer=market__analysis_dot_market__analysis__service__pb2.PerformCorrelationAnalysisRequest.FromString,
                    response_serializer=market__analysis_dot_market__analysis__service__pb2.PerformCorrelationAnalysisResponse.SerializeToString,
            ),
            'PerformVolatilityAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformVolatilityAnalysis,
                    request_deserializer=market__analysis_dot_market__analysis__service__pb2.PerformVolatilityAnalysisRequest.FromString,
                    response_serializer=market__analysis_dot_market__analysis__service__pb2.PerformVolatilityAnalysisResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'forex.market_analysis.MarketAnalysisService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('forex.market_analysis.MarketAnalysisService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MarketAnalysisService(object):
    """MarketAnalysisService provides methods for analyzing market data
    """

    @staticmethod
    def CalculateIndicators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.market_analysis.MarketAnalysisService/CalculateIndicators',
            market__analysis_dot_market__analysis__service__pb2.CalculateIndicatorsRequest.SerializeToString,
            market__analysis_dot_market__analysis__service__pb2.CalculateIndicatorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DetectPatterns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.market_analysis.MarketAnalysisService/DetectPatterns',
            market__analysis_dot_market__analysis__service__pb2.DetectPatternsRequest.SerializeToString,
            market__analysis_dot_market__analysis__service__pb2.DetectPatternsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DetectSupportResistance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.market_analysis.MarketAnalysisService/DetectSupportResistance',
            market__analysis_dot_market__analysis__service__pb2.DetectSupportResistanceRequest.SerializeToString,
            market__analysis_dot_market__analysis__service__pb2.DetectSupportResistanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DetectMarketRegime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.market_analysis.MarketAnalysisService/DetectMarketRegime',
            market__analysis_dot_market__analysis__service__pb2.DetectMarketRegimeRequest.SerializeToString,
            market__analysis_dot_market__analysis__service__pb2.DetectMarketRegimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PerformCorrelationAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.market_analysis.MarketAnalysisService/PerformCorrelationAnalysis',
            market__analysis_dot_market__analysis__service__pb2.PerformCorrelationAnalysisRequest.SerializeToString,
            market__analysis_dot_market__analysis__service__pb2.PerformCorrelationAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PerformVolatilityAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.market_analysis.MarketAnalysisService/PerformVolatilityAnalysis',
            market__analysis_dot_market__analysis__service__pb2.PerformVolatilityAnalysisRequest.SerializeToString,
            market__analysis_dot_market__analysis__service__pb2.PerformVolatilityAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
