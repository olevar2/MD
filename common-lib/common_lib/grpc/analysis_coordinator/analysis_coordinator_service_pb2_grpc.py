# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from analysis_coordinator import analysis_coordinator_service_pb2 as analysis__coordinator_dot_analysis__coordinator__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in analysis_coordinator/analysis_coordinator_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AnalysisCoordinatorServiceStub(object):
    """AnalysisCoordinatorService coordinates analysis tasks across multiple services
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAnalysisTask = channel.unary_unary(
                '/forex.analysis_coordinator.AnalysisCoordinatorService/CreateAnalysisTask',
                request_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.CreateAnalysisTaskRequest.SerializeToString,
                response_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.CreateAnalysisTaskResponse.FromString,
                _registered_method=True)
        self.GetTaskStatus = channel.unary_unary(
                '/forex.analysis_coordinator.AnalysisCoordinatorService/GetTaskStatus',
                request_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.GetTaskStatusRequest.SerializeToString,
                response_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.GetTaskStatusResponse.FromString,
                _registered_method=True)
        self.GetTaskResult = channel.unary_unary(
                '/forex.analysis_coordinator.AnalysisCoordinatorService/GetTaskResult',
                request_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.GetTaskResultRequest.SerializeToString,
                response_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.GetTaskResultResponse.FromString,
                _registered_method=True)
        self.CancelTask = channel.unary_unary(
                '/forex.analysis_coordinator.AnalysisCoordinatorService/CancelTask',
                request_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.CancelTaskRequest.SerializeToString,
                response_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.CancelTaskResponse.FromString,
                _registered_method=True)
        self.PerformIntegratedAnalysis = channel.unary_unary(
                '/forex.analysis_coordinator.AnalysisCoordinatorService/PerformIntegratedAnalysis',
                request_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformIntegratedAnalysisRequest.SerializeToString,
                response_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformIntegratedAnalysisResponse.FromString,
                _registered_method=True)
        self.PerformMultiTimeframeAnalysis = channel.unary_unary(
                '/forex.analysis_coordinator.AnalysisCoordinatorService/PerformMultiTimeframeAnalysis',
                request_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformMultiTimeframeAnalysisRequest.SerializeToString,
                response_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformMultiTimeframeAnalysisResponse.FromString,
                _registered_method=True)
        self.PerformMultiSymbolAnalysis = channel.unary_unary(
                '/forex.analysis_coordinator.AnalysisCoordinatorService/PerformMultiSymbolAnalysis',
                request_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformMultiSymbolAnalysisRequest.SerializeToString,
                response_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformMultiSymbolAnalysisResponse.FromString,
                _registered_method=True)


class AnalysisCoordinatorServiceServicer(object):
    """AnalysisCoordinatorService coordinates analysis tasks across multiple services
    """

    def CreateAnalysisTask(self, request, context):
        """CreateAnalysisTask creates a new analysis task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """GetTaskStatus gets the status of an analysis task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskResult(self, request, context):
        """GetTaskResult gets the result of an analysis task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTask(self, request, context):
        """CancelTask cancels an analysis task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformIntegratedAnalysis(self, request, context):
        """PerformIntegratedAnalysis performs an integrated analysis using multiple services
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformMultiTimeframeAnalysis(self, request, context):
        """PerformMultiTimeframeAnalysis performs analysis across multiple timeframes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformMultiSymbolAnalysis(self, request, context):
        """PerformMultiSymbolAnalysis performs analysis across multiple symbols
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalysisCoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAnalysisTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAnalysisTask,
                    request_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.CreateAnalysisTaskRequest.FromString,
                    response_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.CreateAnalysisTaskResponse.SerializeToString,
            ),
            'GetTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatus,
                    request_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.GetTaskStatusRequest.FromString,
                    response_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.GetTaskStatusResponse.SerializeToString,
            ),
            'GetTaskResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskResult,
                    request_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.GetTaskResultRequest.FromString,
                    response_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.GetTaskResultResponse.SerializeToString,
            ),
            'CancelTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTask,
                    request_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.CancelTaskRequest.FromString,
                    response_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.CancelTaskResponse.SerializeToString,
            ),
            'PerformIntegratedAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformIntegratedAnalysis,
                    request_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformIntegratedAnalysisRequest.FromString,
                    response_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformIntegratedAnalysisResponse.SerializeToString,
            ),
            'PerformMultiTimeframeAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformMultiTimeframeAnalysis,
                    request_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformMultiTimeframeAnalysisRequest.FromString,
                    response_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformMultiTimeframeAnalysisResponse.SerializeToString,
            ),
            'PerformMultiSymbolAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformMultiSymbolAnalysis,
                    request_deserializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformMultiSymbolAnalysisRequest.FromString,
                    response_serializer=analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformMultiSymbolAnalysisResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'forex.analysis_coordinator.AnalysisCoordinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('forex.analysis_coordinator.AnalysisCoordinatorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AnalysisCoordinatorService(object):
    """AnalysisCoordinatorService coordinates analysis tasks across multiple services
    """

    @staticmethod
    def CreateAnalysisTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.analysis_coordinator.AnalysisCoordinatorService/CreateAnalysisTask',
            analysis__coordinator_dot_analysis__coordinator__service__pb2.CreateAnalysisTaskRequest.SerializeToString,
            analysis__coordinator_dot_analysis__coordinator__service__pb2.CreateAnalysisTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.analysis_coordinator.AnalysisCoordinatorService/GetTaskStatus',
            analysis__coordinator_dot_analysis__coordinator__service__pb2.GetTaskStatusRequest.SerializeToString,
            analysis__coordinator_dot_analysis__coordinator__service__pb2.GetTaskStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.analysis_coordinator.AnalysisCoordinatorService/GetTaskResult',
            analysis__coordinator_dot_analysis__coordinator__service__pb2.GetTaskResultRequest.SerializeToString,
            analysis__coordinator_dot_analysis__coordinator__service__pb2.GetTaskResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.analysis_coordinator.AnalysisCoordinatorService/CancelTask',
            analysis__coordinator_dot_analysis__coordinator__service__pb2.CancelTaskRequest.SerializeToString,
            analysis__coordinator_dot_analysis__coordinator__service__pb2.CancelTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PerformIntegratedAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.analysis_coordinator.AnalysisCoordinatorService/PerformIntegratedAnalysis',
            analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformIntegratedAnalysisRequest.SerializeToString,
            analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformIntegratedAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PerformMultiTimeframeAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.analysis_coordinator.AnalysisCoordinatorService/PerformMultiTimeframeAnalysis',
            analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformMultiTimeframeAnalysisRequest.SerializeToString,
            analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformMultiTimeframeAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PerformMultiSymbolAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/forex.analysis_coordinator.AnalysisCoordinatorService/PerformMultiSymbolAnalysis',
            analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformMultiSymbolAnalysisRequest.SerializeToString,
            analysis__coordinator_dot_analysis__coordinator__service__pb2.PerformMultiSymbolAnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
