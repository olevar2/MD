syntax = "proto3";

package forex.common;

option go_package = "github.com/olevar2/MD/common-lib/proto/common";
option java_package = "com.olevar2.forex.common";
option java_multiple_files = true;

// Timestamp represents a point in time independent of any time zone or calendar
message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  int64 seconds = 1;
  // Non-negative fractions of a second at nanosecond resolution
  int32 nanos = 2;
}

// TimeRange represents a time range with start and end timestamps
message TimeRange {
  // Start time of the range
  Timestamp start_time = 1;
  // End time of the range
  Timestamp end_time = 2;
}

// Symbol represents a trading symbol
message Symbol {
  // Symbol name (e.g., "EURUSD")
  string name = 1;
  // Optional description
  string description = 2;
}

// Timeframe represents a trading timeframe
message Timeframe {
  // Timeframe name (e.g., "1h", "4h", "1d")
  string name = 1;
  // Timeframe in minutes
  int32 minutes = 2;
}

// PaginationRequest represents a request for paginated results
message PaginationRequest {
  // Page number (1-based)
  int32 page = 1;
  // Number of items per page
  int32 page_size = 2;
}

// PaginationResponse represents pagination metadata in a response
message PaginationResponse {
  // Current page number
  int32 current_page = 1;
  // Total number of pages
  int32 total_pages = 2;
  // Total number of items
  int32 total_items = 3;
  // Number of items per page
  int32 page_size = 4;
}

// SortOrder represents the sort order for query results
enum SortOrder {
  // Ascending order
  ASCENDING = 0;
  // Descending order
  DESCENDING = 1;
}

// SortField represents a field to sort by
message SortField {
  // Field name to sort by
  string field_name = 1;
  // Sort order
  SortOrder order = 2;
}

// FilterOperator represents comparison operators for filtering
enum FilterOperator {
  // Equal to
  EQUAL = 0;
  // Not equal to
  NOT_EQUAL = 1;
  // Greater than
  GREATER_THAN = 2;
  // Greater than or equal to
  GREATER_THAN_OR_EQUAL = 3;
  // Less than
  LESS_THAN = 4;
  // Less than or equal to
  LESS_THAN_OR_EQUAL = 5;
  // Contains substring
  CONTAINS = 6;
  // Starts with substring
  STARTS_WITH = 7;
  // Ends with substring
  ENDS_WITH = 8;
  // In a list of values
  IN = 9;
  // Not in a list of values
  NOT_IN = 10;
}

// FilterCondition represents a condition for filtering results
message FilterCondition {
  // Field name to filter on
  string field_name = 1;
  // Operator for comparison
  FilterOperator operator = 2;
  // Value to compare against (serialized as string)
  string value = 3;
}

// FilterGroup represents a group of filter conditions
message FilterGroup {
  // List of filter conditions
  repeated FilterCondition conditions = 1;
  // Whether to combine conditions with AND (true) or OR (false)
  bool and = 2;
}

// OHLCV represents Open, High, Low, Close, Volume data
message OHLCV {
  // Timestamp
  Timestamp timestamp = 1;
  // Open price
  double open = 2;
  // High price
  double high = 3;
  // Low price
  double low = 4;
  // Close price
  double close = 5;
  // Volume
  double volume = 6;
}

// MetadataEntry represents a key-value pair for metadata
message MetadataEntry {
  // Key
  string key = 1;
  // Value
  string value = 2;
}

// Metadata represents a collection of metadata entries
message Metadata {
  // List of metadata entries
  repeated MetadataEntry entries = 1;
}