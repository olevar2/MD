{
  "analysis-engine-service": [
    {
      "file": "analysis-engine-service\\test_async_patterns.py",
      "class": "MockContainer",
      "method": "get_service",
      "is_async": false,
      "line": 142
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_client",
      "is_async": false,
      "line": 34
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_market_data_client",
      "is_async": false,
      "line": 86
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_data_pipeline_client",
      "is_async": false,
      "line": 95
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_feature_store_client",
      "is_async": false,
      "line": 104
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_trading_client",
      "is_async": false,
      "line": 113
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_adapter",
      "is_async": false,
      "line": 37
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\adaptive_strategy_adapter.py",
      "class": "AdaptiveStrategyServiceAdapter",
      "method": "get_adaptive_parameters",
      "is_async": true,
      "line": 49
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\adaptive_strategy_adapter.py",
      "class": "AdaptiveStrategyServiceAdapter",
      "method": "get_tool_signal_weights",
      "is_async": true,
      "line": 86
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\adaptive_strategy_adapter.py",
      "class": "AdaptiveStrategyServiceAdapter",
      "method": "get_adaptation_recommendations",
      "is_async": true,
      "line": 140
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\adaptive_strategy_adapter.py",
      "class": "AdaptiveStrategyServiceAdapter",
      "method": "get_adaptation_level",
      "is_async": false,
      "line": 177
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\analysis_adapter.py",
      "class": "AnalysisProviderAdapter",
      "method": "analyze_market_data",
      "is_async": true,
      "line": 51
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\analysis_adapter.py",
      "class": "AnalysisProviderAdapter",
      "method": "get_technical_indicators",
      "is_async": true,
      "line": 112
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\analysis_adapter.py",
      "class": "AnalysisProviderAdapter",
      "method": "get_available_indicators",
      "is_async": true,
      "line": 223
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\analysis_adapter.py",
      "class": "AnalysisProviderAdapter",
      "method": "get_available_patterns",
      "is_async": true,
      "line": 243
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_market_regime",
      "is_async": true,
      "line": 65
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_confluence_analysis",
      "is_async": true,
      "line": 82
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "analyze_pattern_effectiveness",
      "is_async": true,
      "line": 98
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\analysis_engine_adapter_factory.py",
      "class": "AnalysisEngineAdapterFactory",
      "method": "create_adapter",
      "is_async": true,
      "line": 33
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\causal_strategy_enhancer_adapter.py",
      "class": "CausalStrategyEnhancerAdapter",
      "method": "get_enhancement_types",
      "is_async": true,
      "line": 67
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\causal_strategy_enhancer_adapter.py",
      "class": "CausalStrategyEnhancerAdapter",
      "method": "get_enhancement_history",
      "is_async": true,
      "line": 80
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\data_adapters.py",
      "class": "FeatureStoreAdapter",
      "method": "get_features",
      "is_async": true,
      "line": 16
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\data_adapters.py",
      "class": "DataPipelineAdapter",
      "method": "get_market_data",
      "is_async": true,
      "line": 36
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\data_pipeline_adapter.py",
      "class": "TickDataServiceAdapter",
      "method": "get_tick_data",
      "is_async": true,
      "line": 54
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\data_pipeline_adapter.py",
      "class": "TickDataServiceAdapter",
      "method": "get_latest_ticks",
      "is_async": true,
      "line": 100
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\data_pipeline_adapter.py",
      "class": "TickDataServiceAdapter",
      "method": "get_tick_stream",
      "is_async": true,
      "line": 123
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\data_pipeline_adapter.py",
      "class": "TickDataServiceAdapter",
      "method": "get_aggregated_ticks",
      "is_async": true,
      "line": 158
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_tool_effectiveness",
      "is_async": false,
      "line": 54
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_best_tools",
      "is_async": false,
      "line": 63
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_tool_performance_history",
      "is_async": false,
      "line": 71
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_regime_transition_performance",
      "is_async": false,
      "line": 80
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_tool_correlation_matrix",
      "is_async": false,
      "line": 88
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_tool_effectiveness_confidence",
      "is_async": false,
      "line": 95
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_optimal_tool_combination",
      "is_async": false,
      "line": 102
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "AdaptiveLayerServiceAdapter",
      "method": "get_adaptive_parameters",
      "is_async": true,
      "line": 132
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "AdaptiveLayerServiceAdapter",
      "method": "get_adaptation_recommendations",
      "is_async": true,
      "line": 167
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\feature_store_client.py",
      "class": "FeatureStoreClient",
      "method": "calculate_indicators",
      "is_async": true,
      "line": 34
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\indicator_adapter.py",
      "class": "IndicatorProviderAdapter",
      "method": "calculate_indicator",
      "is_async": true,
      "line": 48
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\indicator_adapter.py",
      "class": "IndicatorProviderAdapter",
      "method": "calculate_multiple_indicators",
      "is_async": true,
      "line": 96
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\indicator_adapter.py",
      "class": "IndicatorProviderAdapter",
      "method": "get_indicator_info",
      "is_async": true,
      "line": 151
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\indicator_adapter.py",
      "class": "IndicatorProviderAdapter",
      "method": "get_all_indicators_info",
      "is_async": true,
      "line": 189
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_adapters.py",
      "class": "MLWorkbenchAdapter",
      "method": "get_model_prediction",
      "is_async": true,
      "line": 16
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_adapters.py",
      "class": "ModelRegistryAdapter",
      "method": "get_model_metadata",
      "is_async": true,
      "line": 35
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_integration_adapter.py",
      "class": "MLModelConnectorAdapter",
      "method": "get_market_analysis",
      "is_async": true,
      "line": 53
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_integration_adapter.py",
      "class": "MLModelConnectorAdapter",
      "method": "get_price_prediction",
      "is_async": true,
      "line": 81
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_integration_adapter.py",
      "class": "MLModelConnectorAdapter",
      "method": "get_trading_recommendation",
      "is_async": true,
      "line": 110
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_integration_adapter.py",
      "class": "MLModelConnectorAdapter",
      "method": "get_sentiment_analysis",
      "is_async": true,
      "line": 138
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_integration_adapter.py",
      "class": "ExplanationGeneratorAdapter",
      "method": "get_feature_importance",
      "is_async": true,
      "line": 209
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_integration_adapter.py",
      "class": "UserPreferenceManagerAdapter",
      "method": "get_user_preferences",
      "is_async": true,
      "line": 261
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_integration_adapter.py",
      "class": "UserPreferenceManagerAdapter",
      "method": "update_user_preferences",
      "is_async": true,
      "line": 283
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_workbench_adapter.py",
      "class": "ModelOptimizationServiceAdapter",
      "method": "get_optimization_status",
      "is_async": true,
      "line": 72
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_workbench_adapter.py",
      "class": "ModelOptimizationServiceAdapter",
      "method": "get_optimization_result",
      "is_async": true,
      "line": 86
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_workbench_adapter.py",
      "class": "ModelRegistryServiceAdapter",
      "method": "get_model_info",
      "is_async": true,
      "line": 165
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_workbench_adapter.py",
      "class": "ModelRegistryServiceAdapter",
      "method": "delete_model",
      "is_async": true,
      "line": 210
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_workbench_adapter.py",
      "class": "ReinforcementLearningServiceAdapter",
      "method": "get_training_status",
      "is_async": true,
      "line": 271
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_workbench_adapter.py",
      "class": "ReinforcementLearningServiceAdapter",
      "method": "get_rl_model_performance",
      "is_async": true,
      "line": 284
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\ml_workbench_adapter.py",
      "class": "ReinforcementLearningServiceAdapter",
      "method": "get_rl_model_action",
      "is_async": true,
      "line": 299
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\model_feedback_adapter.py",
      "class": "ModelTrainingFeedbackAdapter",
      "method": "process_trading_feedback",
      "is_async": true,
      "line": 54
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\model_feedback_adapter.py",
      "class": "ModelTrainingFeedbackAdapter",
      "method": "get_model_performance_metrics",
      "is_async": true,
      "line": 107
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_asset_info",
      "is_async": false,
      "line": 46
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_asset_group",
      "is_async": false,
      "line": 84
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_trading_parameters",
      "is_async": false,
      "line": 93
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "calculate_volatility",
      "is_async": false,
      "line": 118
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_price_levels",
      "is_async": false,
      "line": 141
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_analysis_parameters",
      "is_async": false,
      "line": 166
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\multi_asset_adapter.py",
      "class": "AssetRegistryAdapter",
      "method": "get_asset",
      "is_async": false,
      "line": 217
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\multi_asset_adapter.py",
      "class": "AssetRegistryAdapter",
      "method": "get_correlation",
      "is_async": false,
      "line": 266
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\multi_asset_adapter.py",
      "class": "AssetRegistryAdapter",
      "method": "get_correlated_assets",
      "is_async": false,
      "line": 275
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\multi_asset_adapter.py",
      "class": "AssetRegistryAdapter",
      "method": "get_asset_group",
      "is_async": false,
      "line": 292
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\multi_asset_adapter.py",
      "class": "AssetRegistryAdapter",
      "method": "get_pip_value",
      "is_async": false,
      "line": 313
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\multi_asset_adapter.py",
      "class": "AssetRegistryAdapter",
      "method": "get_trading_parameters",
      "is_async": false,
      "line": 322
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\pattern_adapter.py",
      "class": "PatternRecognizerAdapter",
      "method": "get_pattern_info",
      "is_async": true,
      "line": 151
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\pattern_adapter.py",
      "class": "PatternRecognizerAdapter",
      "method": "get_all_patterns_info",
      "is_async": true,
      "line": 188
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\strategy_execution_adapter.py",
      "class": "StrategyExecutorAdapter",
      "method": "execute_strategy",
      "is_async": true,
      "line": 47
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\strategy_execution_adapter.py",
      "class": "StrategyExecutorAdapter",
      "method": "get_strategy_signals",
      "is_async": true,
      "line": 111
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\strategy_execution_adapter.py",
      "class": "SignalAggregatorAdapter",
      "method": "get_signal_effectiveness",
      "is_async": true,
      "line": 247
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\strategy_execution_adapter.py",
      "class": "StrategyEvaluatorAdapter",
      "method": "get_strategy_performance",
      "is_async": true,
      "line": 371
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\tool_effectiveness_adapter.py",
      "class": "ToolEffectivenessTrackerAdapter",
      "method": "get_tool_effectiveness",
      "is_async": false,
      "line": 83
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\tool_effectiveness_adapter.py",
      "class": "ToolEffectivenessTrackerAdapter",
      "method": "get_best_tools",
      "is_async": false,
      "line": 106
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\tool_effectiveness_adapter.py",
      "class": "ToolEffectivenessTrackerAdapter",
      "method": "get_tool_history",
      "is_async": false,
      "line": 123
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\tool_effectiveness_adapter.py",
      "class": "ToolEffectivenessTrackerAdapter",
      "method": "get_performance_summary",
      "is_async": false,
      "line": 146
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adapters\\trading_adapters.py",
      "class": "TradingGatewayAdapter",
      "method": "get_market_status",
      "is_async": true,
      "line": 80
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\adaptation_engine.py",
      "class": "AdaptationEngine",
      "method": "update_strategy_parameter",
      "is_async": true,
      "line": 116
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\adaptive_layer_service.py",
      "class": "AdaptiveLayerService",
      "method": "get_adaptive_parameters",
      "is_async": true,
      "line": 80
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\adaptive_layer_service.py",
      "class": "AdaptiveLayerService",
      "method": "get_tool_signal_weights",
      "is_async": true,
      "line": 147
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\adaptive_layer_service.py",
      "class": "AdaptiveLayerService",
      "method": "get_adaptation_recommendations",
      "is_async": true,
      "line": 219
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\adaptive_layer_service.py",
      "class": "AdaptiveLayerService",
      "method": "get_adaptation_level",
      "is_async": false,
      "line": 272
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\adaptive_layer_service.py",
      "class": "AdaptiveLayerService",
      "method": "get_adaptive_parameters_internal",
      "is_async": true,
      "line": 282
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\adaptive_layer_service.py",
      "class": "AdaptiveLayerService",
      "method": "get_confluence_data",
      "is_async": false,
      "line": 352
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\adaptive_weight_calculator.py",
      "class": "AdaptiveWeightCalculator",
      "method": "calculate_signal_weights",
      "is_async": false,
      "line": 32
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\adaptive_weight_calculator.py",
      "class": "AdaptiveWeightCalculator",
      "method": "calculate_strategy_weights",
      "is_async": false,
      "line": 156
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\adaptive_weight_calculator.py",
      "class": "AdaptiveWeightCalculator",
      "method": "calculate_statistical_significance",
      "is_async": false,
      "line": 251
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\enhanced_feedback_kafka_handler.py",
      "class": "EnhancedFeedbackKafkaHandler",
      "method": "get_health_metrics",
      "is_async": true,
      "line": 695
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\event_consumers.py",
      "class": "BaseFeedbackConsumer",
      "method": "process_event",
      "is_async": true,
      "line": 71
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\event_consumers.py",
      "class": "BaseFeedbackConsumer",
      "method": "get_metrics",
      "is_async": false,
      "line": 78
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\event_consumers.py",
      "class": "TradingOutcomeConsumer",
      "method": "process_event",
      "is_async": true,
      "line": 89
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\event_consumers.py",
      "class": "ParameterPerformanceConsumer",
      "method": "process_event",
      "is_async": true,
      "line": 106
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\event_consumers.py",
      "class": "StrategyEffectivenessConsumer",
      "method": "process_event",
      "is_async": true,
      "line": 121
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\event_consumers.py",
      "class": "ModelPredictionConsumer",
      "method": "process_event",
      "is_async": true,
      "line": 154
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\event_consumers.py",
      "class": "ExecutionQualityConsumer",
      "method": "process_event",
      "is_async": true,
      "line": 187
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_categorizer.py",
      "class": "FeedbackCategorizer",
      "method": "get_historical_statistics",
      "is_async": false,
      "line": 428
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_end_to_end_tests.py",
      "class": "MockEventBus",
      "method": "process_published_events",
      "is_async": true,
      "line": 65
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_end_to_end_tests.py",
      "class": "MockToolEffectivenessRepository",
      "method": "get_parameter_variation_outcomes",
      "is_async": false,
      "line": 84
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_end_to_end_tests.py",
      "class": "MockToolEffectivenessRepository",
      "method": "get_strategy_outcomes",
      "is_async": false,
      "line": 91
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_end_to_end_tests.py",
      "class": "MockToolEffectivenessRepository",
      "method": "get_adaptation_outcomes",
      "is_async": false,
      "line": 100
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_end_to_end_tests.py",
      "class": "MockToolEffectivenessRepository",
      "method": "get_adaptation_details",
      "is_async": false,
      "line": 105
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_end_to_end_tests.py",
      "class": "MockToolEffectivenessRepository",
      "method": "get_outcomes_before_date",
      "is_async": false,
      "line": 114
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_end_to_end_tests.py",
      "class": "MockToolEffectivenessRepository",
      "method": "get_regimes_for_strategy",
      "is_async": false,
      "line": 126
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_loop.py",
      "class": "FeedbackLoop",
      "method": "get_adaptation_effectiveness",
      "is_async": false,
      "line": 270
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_loop.py",
      "class": "FeedbackLoop",
      "method": "get_performance_by_regime",
      "is_async": false,
      "line": 290
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_loop.py",
      "class": "FeedbackLoop",
      "method": "update_adaptation_strategy",
      "is_async": false,
      "line": 309
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_loop.py",
      "class": "FeedbackLoop",
      "method": "process_incoming_feedback",
      "is_async": true,
      "line": 372
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_loop_connector.py",
      "class": "FeedbackLoopConnector",
      "method": "send_adaptation_to_strategy_execution",
      "is_async": true,
      "line": 104
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_loop_connector.py",
      "class": "FeedbackLoopConnector",
      "method": "process_execution_feedback",
      "is_async": true,
      "line": 150
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_loop_connector.py",
      "class": "FeedbackLoopConnector",
      "method": "get_loop_health",
      "is_async": true,
      "line": 180
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_loop_validator.py",
      "class": "FeedbackLoopValidator",
      "method": "validate_feedback_event",
      "is_async": false,
      "line": 27
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_loop_validator.py",
      "class": "FeedbackLoopValidator",
      "method": "check_adaptation_consistency",
      "is_async": false,
      "line": 53
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_router.py",
      "class": "FeedbackRouter",
      "method": "process_pending_batches",
      "is_async": true,
      "line": 112
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback_router.py",
      "class": "FeedbackRouter",
      "method": "get_route_stats",
      "is_async": false,
      "line": 340
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\harmonic_pattern_detector.py",
      "class": "HarmonicPattern",
      "method": "get_target_price",
      "is_async": false,
      "line": 125
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\harmonic_pattern_detector.py",
      "class": "HarmonicPattern",
      "method": "get_entry_price",
      "is_async": false,
      "line": 133
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\harmonic_pattern_detector.py",
      "class": "HarmonicPattern",
      "method": "get_stop_loss_price",
      "is_async": false,
      "line": 140
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\market_regime_aware_adapter.py",
      "class": "MarketRegimeAwareAdapter",
      "method": "get_regime_adjusted_parameters",
      "is_async": false,
      "line": 121
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\market_regime_aware_adapter.py",
      "class": "MarketRegimeAwareAdapter",
      "method": "get_recommended_strategy_types",
      "is_async": false,
      "line": 248
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\market_regime_aware_adapter.py",
      "class": "MarketRegimeAwareAdapter",
      "method": "get_strategy_specific_adjustments",
      "is_async": false,
      "line": 279
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\model_feedback_integrator.py",
      "class": "ModelFeedbackIntegrator",
      "method": "get_model_performance_summary",
      "is_async": false,
      "line": 544
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\model_feedback_integrator.py",
      "class": "ModelFeedbackIntegrator",
      "method": "get_retraining_history",
      "is_async": false,
      "line": 564
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\model_retraining_service.py",
      "class": "ModelRetrainingService",
      "method": "process_feedback",
      "is_async": true,
      "line": 826
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\model_retraining_service.py",
      "class": "ModelRetrainingService",
      "method": "get_job_status",
      "is_async": true,
      "line": 914
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\model_retraining_service.py",
      "class": "ModelRetrainingService",
      "method": "get_active_jobs",
      "is_async": true,
      "line": 933
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\multi_timeframe_feedback.py",
      "class": "MultiTimeframeFeedbackService",
      "method": "process_feedback",
      "is_async": true,
      "line": 105
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\multi_timeframe_feedback.py",
      "class": "MultiTimeframeFeedbackService",
      "method": "analyze_correlations",
      "is_async": true,
      "line": 149
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\multi_timeframe_feedback.py",
      "class": "MultiTimeframeFeedbackService",
      "method": "calculate_weighted_score",
      "is_async": true,
      "line": 405
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\parameter_adjustment_service.py",
      "class": "ParameterAdjustmentService",
      "method": "get_parameter_history",
      "is_async": false,
      "line": 185
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\parameter_adjustment_service.py",
      "class": "ParameterAdjustmentService",
      "method": "get_adaptation_history",
      "is_async": false,
      "line": 212
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\parameter_feedback.py",
      "class": "ParameterFeedbackTracker",
      "method": "analyze_parameter_effectiveness",
      "is_async": true,
      "line": 66
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\parameter_feedback.py",
      "class": "MockRepo",
      "method": "get_parameter_history",
      "is_async": true,
      "line": 286
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\parameter_feedback.py",
      "class": "MockRepo",
      "method": "get_strategy_parameters",
      "is_async": true,
      "line": 290
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\parameter_statistical_analyzer.py",
      "class": "ParameterStatisticalAnalyzer",
      "method": "analyze_parameter_impact",
      "is_async": false,
      "line": 28
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\parameter_statistical_validator.py",
      "class": "ParameterStatisticalValidator",
      "method": "validate_parameter_change",
      "is_async": false,
      "line": 53
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\parameter_tracking_service.py",
      "class": "ParameterTrackingService",
      "method": "get_parameter_history",
      "is_async": false,
      "line": 176
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\parameter_tracking_service.py",
      "class": "ParameterTrackingService",
      "method": "calculate_parameter_effectiveness",
      "is_async": true,
      "line": 207
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\parameter_tracking_service.py",
      "class": "ParameterTrackingService",
      "method": "get_parameter_sensitivity_analysis",
      "is_async": false,
      "line": 394
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\statistical_validator.py",
      "class": "StatisticalValidator",
      "method": "validate_prediction_improvements",
      "is_async": false,
      "line": 59
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\statistical_validator.py",
      "class": "StatisticalValidator",
      "method": "analyze_timeframe_correlations",
      "is_async": false,
      "line": 93
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\statistical_validator.py",
      "class": "StatisticalValidator",
      "method": "validate_parameter_adjustment",
      "is_async": false,
      "line": 149
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\strategy_adaptation_service.py",
      "class": "StrategyAdaptationService",
      "method": "process_feedback_event",
      "is_async": false,
      "line": 27
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\strategy_mutation.py",
      "class": "StrategyMutationEngine",
      "method": "get_mutation_history",
      "is_async": true,
      "line": 105
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\strategy_mutation.py",
      "class": "StrategyMutationEngine",
      "method": "get_fitness_evolution",
      "is_async": true,
      "line": 113
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\strategy_mutation_service.py",
      "class": "StrategyMutationService",
      "method": "get_version_history",
      "is_async": true,
      "line": 324
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\strategy_mutation_service.py",
      "class": "StrategyMutationService",
      "method": "get_mutation_effectiveness",
      "is_async": true,
      "line": 359
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\tool_effectiveness_consumer.py",
      "class": "ToolEffectivenessConsumer",
      "method": "get_effectiveness_metrics",
      "is_async": true,
      "line": 51
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\tool_effectiveness_consumer.py",
      "class": "ToolEffectivenessConsumer",
      "method": "get_aggregated_effectiveness",
      "is_async": true,
      "line": 201
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\trading_feedback_collector.py",
      "class": "TradingFeedbackCollector",
      "method": "get_statistics",
      "is_async": true,
      "line": 751
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\trading_feedback_collector.py",
      "class": "TradingFeedbackCollector",
      "method": "get_feedback_by_id",
      "is_async": true,
      "line": 810
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\trading_feedback_collector.py",
      "class": "TradingFeedbackCollector",
      "method": "get_feedback_by_filter",
      "is_async": true,
      "line": 823
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\trading_feedback_collector.py",
      "class": "TradingFeedbackCollector",
      "method": "get_orchestration_health",
      "is_async": true,
      "line": 871
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback\\service.py",
      "class": "TimeframeFeedbackService",
      "method": "analyze_instrument",
      "is_async": true,
      "line": 107
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback\\service.py",
      "class": "TimeframeFeedbackService",
      "method": "get_adjustment",
      "is_async": true,
      "line": 160
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback\\service.py",
      "class": "TimeframeFeedbackService",
      "method": "get_insights",
      "is_async": true,
      "line": 185
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback\\service.py",
      "class": "TimeframeFeedbackService",
      "method": "get_correlations",
      "is_async": true,
      "line": 206
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback\\service.py",
      "class": "TimeframeFeedbackService",
      "method": "get_analysis_status",
      "is_async": true,
      "line": 227
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback\\analyzers\\correlation.py",
      "class": "TimeframeCorrelationAnalyzer",
      "method": "analyze_correlations",
      "is_async": false,
      "line": 39
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback\\analyzers\\correlation.py",
      "class": "TimeframeCorrelationAnalyzer",
      "method": "get_leading_timeframes",
      "is_async": false,
      "line": 142
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback\\analyzers\\temporal.py",
      "class": "TemporalFeedbackAnalyzer",
      "method": "analyze_temporal_patterns",
      "is_async": false,
      "line": 39
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback\\collectors\\timeframe_collector.py",
      "class": "TimeframeFeedbackCollector",
      "method": "get_feedback_by_timeframe",
      "is_async": true,
      "line": 96
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\adaptive_layer\\feedback\\processors\\adjustment.py",
      "class": "TimeframeAdjustmentProcessor",
      "method": "calculate_adjustments",
      "is_async": false,
      "line": 38
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\alert_system.py",
      "class": "Alert",
      "method": "update_notification_status",
      "is_async": false,
      "line": 209
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\alert_system.py",
      "class": "AlertManager",
      "method": "update_rule",
      "is_async": false,
      "line": 548
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\alert_system.py",
      "class": "AlertManager",
      "method": "get_rule",
      "is_async": false,
      "line": 580
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\alert_system.py",
      "class": "AlertManager",
      "method": "process_signal",
      "is_async": false,
      "line": 631
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\alert_system.py",
      "class": "AlertManager",
      "method": "get_active_alerts",
      "is_async": false,
      "line": 740
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\alert_system.py",
      "class": "AlertManager",
      "method": "get_alert_history",
      "is_async": false,
      "line": 765
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\alert_system.py",
      "class": "AlertManager",
      "method": "load_rules_from_file",
      "is_async": false,
      "line": 857
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\alert_system.py",
      "class": "AlertGenerator",
      "method": "create_default_rules",
      "is_async": false,
      "line": 925
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\base_analyzer.py",
      "class": "BaseAnalyzer",
      "method": "get_performance_metrics",
      "is_async": true,
      "line": 315
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\currency_correlation_analyzer.py",
      "class": "CurrencyCorrelationAnalyzer",
      "method": "update_incremental",
      "is_async": false,
      "line": 482
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\currency_correlation_analyzer.py",
      "class": "CurrencyCorrelationAnalyzer",
      "method": "get_correlation_forecast",
      "is_async": false,
      "line": 496
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\effectiveness_analysis.py",
      "class": "IndicatorPerformanceTracker",
      "method": "get_indicator_performance",
      "is_async": false,
      "line": 163
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\effectiveness_analysis.py",
      "class": "IndicatorPerformanceTracker",
      "method": "get_all_indicators",
      "is_async": false,
      "line": 192
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\effectiveness_analysis.py",
      "class": "IndicatorPerformanceTracker",
      "method": "get_timeframes",
      "is_async": false,
      "line": 196
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\effectiveness_analysis.py",
      "class": "SignalAnalyzer",
      "method": "calculate_signal_correlation",
      "is_async": false,
      "line": 361
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\effectiveness_analysis.py",
      "class": "SignalAnalyzer",
      "method": "calculate_signal_lag",
      "is_async": false,
      "line": 376
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\effectiveness_analysis.py",
      "class": "SignalAnalyzer",
      "method": "analyze_indicator_seasonality",
      "is_async": false,
      "line": 447
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\effectiveness_analysis.py",
      "class": "DashboardDataProvider",
      "method": "get_overview_data",
      "is_async": false,
      "line": 497
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\effectiveness_analysis.py",
      "class": "DashboardDataProvider",
      "method": "get_indicator_detail_data",
      "is_async": false,
      "line": 529
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\effectiveness_analysis.py",
      "class": "DashboardDataProvider",
      "method": "get_comparison_data",
      "is_async": false,
      "line": 572
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\effectiveness_analysis.py",
      "class": "DashboardDataProvider",
      "method": "get_export_data",
      "is_async": false,
      "line": 613
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\feature_extraction.py",
      "class": "FeatureExtractor",
      "method": "get_feature_definition",
      "is_async": false,
      "line": 857
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators.py",
      "class": "IndicatorClient",
      "method": "calculate_sma",
      "is_async": false,
      "line": 67
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators.py",
      "class": "IndicatorClient",
      "method": "calculate_ema",
      "is_async": false,
      "line": 88
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators.py",
      "class": "IndicatorClient",
      "method": "calculate_rsi",
      "is_async": false,
      "line": 109
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators.py",
      "class": "IndicatorClient",
      "method": "calculate_macd",
      "is_async": false,
      "line": 130
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators.py",
      "class": "IndicatorClient",
      "method": "calculate_bollinger_bands",
      "is_async": false,
      "line": 160
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators.py",
      "class": "IndicatorClient",
      "method": "calculate_atr",
      "is_async": false,
      "line": 189
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators.py",
      "class": "IndicatorClient",
      "method": "calculate_stochastic",
      "is_async": false,
      "line": 220
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators.py",
      "class": "IndicatorClient",
      "method": "calculate_adx",
      "is_async": false,
      "line": 260
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators.py",
      "class": "IndicatorClient",
      "method": "calculate_obv",
      "is_async": false,
      "line": 287
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators.py",
      "class": "IndicatorClient",
      "method": "calculate_mfi",
      "is_async": false,
      "line": 306
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators.py",
      "class": "IndicatorClient",
      "method": "calculate_aroon",
      "is_async": false,
      "line": 330
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators.py",
      "class": "IndicatorClient",
      "method": "calculate_ichimoku",
      "is_async": false,
      "line": 353
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicator_interface.py",
      "class": "Indicator",
      "method": "validate_parameters",
      "is_async": false,
      "line": 80
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicator_interface.py",
      "class": "IndicatorRegistry",
      "method": "get_indicator",
      "is_async": false,
      "line": 149
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicator_interface.py",
      "class": "IndicatorRegistry",
      "method": "calculate_indicator",
      "is_async": false,
      "line": 191
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicator_interface.py",
      "class": "IndicatorRegistry",
      "method": "get_cache_stats",
      "is_async": false,
      "line": 406
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\ml_evaluation.py",
      "class": "ModelEvaluator",
      "method": "calculate_model_performance",
      "is_async": false,
      "line": 223
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\ml_evaluation.py",
      "class": "ModelEvaluator",
      "method": "load_evaluations_from_file",
      "is_async": false,
      "line": 334
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\ml_evaluation.py",
      "class": "IndicatorFeedbackSystem",
      "method": "load_feedback_from_file",
      "is_async": false,
      "line": 546
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\ml_feature_transformers.py",
      "class": "FeatureTransformerRegistry",
      "method": "get_transformer",
      "is_async": false,
      "line": 95
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\ml_feature_transformers.py",
      "class": "FeatureSelector",
      "method": "calculate_feature_importance",
      "is_async": false,
      "line": 345
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\ml_integration.py",
      "class": "IndicatorMLBridge",
      "method": "load_model_configs",
      "is_async": false,
      "line": 179
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\ml_integration.py",
      "class": "IndicatorMLBridge",
      "method": "get_model_config",
      "is_async": false,
      "line": 260
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\ml_integration.py",
      "class": "IndicatorMLBridge",
      "method": "load_model",
      "is_async": false,
      "line": 273
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\ml_integration.py",
      "class": "IndicatorMLBridge",
      "method": "get_recent_predictions",
      "is_async": false,
      "line": 675
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\multi_timeframe_analyzer.py",
      "class": "MultiTimeFrameAnalyzer",
      "method": "update_incremental",
      "is_async": false,
      "line": 561
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\sequence_pattern_recognizer.py",
      "class": "SequencePatternRecognizer",
      "method": "get_pattern_history",
      "is_async": false,
      "line": 524
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\signal_classification.py",
      "class": "SignalClassifier",
      "method": "get_required_columns",
      "is_async": false,
      "line": 49
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\signal_classification.py",
      "class": "MovingAverageCrossClassifier",
      "method": "get_required_columns",
      "is_async": false,
      "line": 88
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\signal_classification.py",
      "class": "RSIClassifier",
      "method": "get_required_columns",
      "is_async": false,
      "line": 256
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\signal_classification.py",
      "class": "SignalConcordanceAnalyzer",
      "method": "analyze_concordance",
      "is_async": false,
      "line": 465
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\signal_system.py",
      "class": "SignalConcordance",
      "method": "get_most_concordant_indicators",
      "is_async": false,
      "line": 214
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\signal_system.py",
      "class": "SignalConcordance",
      "method": "get_most_discordant_indicators",
      "is_async": false,
      "line": 228
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\signal_system.py",
      "class": "SignalConcordance",
      "method": "get_agreement_matrix",
      "is_async": false,
      "line": 242
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\signal_system.py",
      "class": "SignalSystem",
      "method": "process_signals",
      "is_async": false,
      "line": 501
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\signal_system.py",
      "class": "SignalSystem",
      "method": "get_indicators_by_reliability",
      "is_async": false,
      "line": 526
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\signal_system.py",
      "class": "SignalSystem",
      "method": "get_conflicts",
      "is_async": false,
      "line": 531
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\signal_system.py",
      "class": "SignalSystem",
      "method": "get_signals_for_period",
      "is_async": false,
      "line": 535
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\visualization.py",
      "class": "DashboardManager",
      "method": "create_dashboard",
      "is_async": false,
      "line": 468
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\visualization.py",
      "class": "DashboardManager",
      "method": "get_dashboard",
      "is_async": false,
      "line": 486
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\visualization.py",
      "class": "DashboardManager",
      "method": "update_dashboard",
      "is_async": false,
      "line": 553
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\visualization.py",
      "class": "DashboardManager",
      "method": "delete_dashboard",
      "is_async": false,
      "line": 570
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\visualization.py",
      "class": "DashboardManager",
      "method": "load_dashboards",
      "is_async": false,
      "line": 614
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\base.py",
      "class": "AdvancedAnalysisBase",
      "method": "update_incremental",
      "is_async": false,
      "line": 132
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\base.py",
      "class": "PatternRecognitionBase",
      "method": "calculate_confidence",
      "is_async": false,
      "line": 191
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\base.py",
      "class": "PatternRecognitionBase",
      "method": "update_incremental",
      "is_async": false,
      "line": 245
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\classic_patterns.py",
      "class": "ChartPatternRecognizer",
      "method": "update_incremental",
      "is_async": false,
      "line": 679
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\currency_correlation.py",
      "class": "CurrencyCorrelationAnalyzer",
      "method": "update_incremental",
      "is_async": false,
      "line": 207
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\harmonic_pattern_recognizer.py",
      "class": "HarmonicPatternRecognizer",
      "method": "update_incremental",
      "is_async": false,
      "line": 429
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\money_flow_index.py",
      "class": "MoneyFlowIndex",
      "method": "update_incremental",
      "is_async": false,
      "line": 139
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\on_balance_volume.py",
      "class": "OnBalanceVolume",
      "method": "update_incremental",
      "is_async": false,
      "line": 124
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\order_flow_indicators.py",
      "class": "OrderFlowBar",
      "method": "update_from_levels",
      "is_async": false,
      "line": 60
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\volume_volatility.py",
      "class": "MarketRegimeAnalyzer",
      "method": "update_incremental",
      "is_async": false,
      "line": 198
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\fibonacci\\analyzer.py",
      "class": "FibonacciAnalyzer",
      "method": "create_point",
      "is_async": false,
      "line": 40
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\fibonacci\\analyzer.py",
      "class": "FibonacciAnalyzer",
      "method": "analyze_retracement",
      "is_async": false,
      "line": 56
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\fibonacci\\analyzer.py",
      "class": "FibonacciAnalyzer",
      "method": "analyze_extension",
      "is_async": false,
      "line": 80
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\fibonacci\\analyzer.py",
      "class": "FibonacciAnalyzer",
      "method": "analyze_arcs",
      "is_async": false,
      "line": 104
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\fibonacci\\analyzer.py",
      "class": "FibonacciAnalyzer",
      "method": "analyze_fans",
      "is_async": false,
      "line": 132
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\fibonacci\\analyzer.py",
      "class": "FibonacciAnalyzer",
      "method": "analyze_time_zones",
      "is_async": false,
      "line": 158
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\fibonacci\\analyzer.py",
      "class": "FibonacciAnalyzer",
      "method": "analyze_all",
      "is_async": false,
      "line": 187
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\fibonacci\\analyzer.py",
      "class": "FibonacciAnalyzer",
      "method": "check_price_at_levels",
      "is_async": false,
      "line": 222
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\fibonacci\\fans.py",
      "class": "FibonacciFans",
      "method": "get_price_at_index",
      "is_async": false,
      "line": 106
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\advanced_ta\\fibonacci\\time_zones.py",
      "class": "FibonacciTimeZones",
      "method": "get_next_zones",
      "is_async": false,
      "line": 135
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\backtesting\\core.py",
      "class": "PositionSizingModel",
      "method": "calculate_position_size",
      "is_async": false,
      "line": 130
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\backtesting\\core.py",
      "class": "FixedPositionSizing",
      "method": "calculate_position_size",
      "is_async": false,
      "line": 155
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\backtesting\\core.py",
      "class": "RiskBasedPositionSizing",
      "method": "calculate_position_size",
      "is_async": false,
      "line": 179
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\backtesting\\core.py",
      "class": "SlippageModel",
      "method": "calculate_slippage",
      "is_async": false,
      "line": 211
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\backtesting\\core.py",
      "class": "FixedSlippageModel",
      "method": "calculate_slippage",
      "is_async": false,
      "line": 225
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\backtesting\\core.py",
      "class": "VolumeBasedSlippageModel",
      "method": "calculate_slippage",
      "is_async": false,
      "line": 259
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\backtesting\\core.py",
      "class": "CommissionModel",
      "method": "calculate_commission",
      "is_async": false,
      "line": 303
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\backtesting\\core.py",
      "class": "FixedCommissionModel",
      "method": "calculate_commission",
      "is_async": false,
      "line": 315
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\backtesting\\core.py",
      "class": "PercentageCommissionModel",
      "method": "calculate_commission",
      "is_async": false,
      "line": 328
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\backtesting\\core.py",
      "class": "BacktestEngine",
      "method": "calculate_metrics",
      "is_async": false,
      "line": 413
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\backtesting\\monte_carlo.py",
      "class": "MonteCarloResults",
      "method": "get_var",
      "is_async": false,
      "line": 90
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\backtesting\\monte_carlo.py",
      "class": "MonteCarloResults",
      "method": "get_cvar",
      "is_async": false,
      "line": 94
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\basic_ta\\momentum.py",
      "class": "Momentum",
      "method": "update_incremental",
      "is_async": false,
      "line": 92
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\basic_ta\\momentum.py",
      "class": "RateOfChange",
      "method": "update_incremental",
      "is_async": false,
      "line": 200
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\basic_ta\\oscillators.py",
      "class": "CommodityChannelIndex",
      "method": "update_incremental",
      "is_async": false,
      "line": 110
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\basic_ta\\oscillators.py",
      "class": "WilliamsR",
      "method": "update_incremental",
      "is_async": false,
      "line": 214
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\basic_ta\\trend.py",
      "class": "ParabolicSAR",
      "method": "update_incremental",
      "is_async": false,
      "line": 159
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_sma",
      "is_async": false,
      "line": 99
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_ema",
      "is_async": false,
      "line": 122
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_wma",
      "is_async": false,
      "line": 145
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_rsi",
      "is_async": false,
      "line": 168
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_stochastic",
      "is_async": false,
      "line": 191
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_macd",
      "is_async": false,
      "line": 220
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_cci",
      "is_async": false,
      "line": 252
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_williams_r",
      "is_async": false,
      "line": 275
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_roc",
      "is_async": false,
      "line": 297
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_bollinger_bands",
      "is_async": false,
      "line": 320
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_keltner_channels",
      "is_async": false,
      "line": 351
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_donchian_channels",
      "is_async": false,
      "line": 385
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_atr",
      "is_async": false,
      "line": 413
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_price_envelopes",
      "is_async": false,
      "line": 435
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\indicators\\common_lib_adapter.py",
      "class": "CommonLibIndicatorAdapter",
      "method": "calculate_historical_volatility",
      "is_async": false,
      "line": 465
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\market_regime\\detector.py",
      "class": "MarketRegimeDetector",
      "method": "get_price_data",
      "is_async": true,
      "line": 40
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\market_regime\\detector.py",
      "class": "MarketRegimeDetector",
      "method": "calculate_atr",
      "is_async": false,
      "line": 67
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\market_regime\\detector.py",
      "class": "MarketRegimeDetector",
      "method": "calculate_adx",
      "is_async": false,
      "line": 97
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\market_regime\\detector.py",
      "class": "MarketRegimeDetector",
      "method": "calculate_rsi",
      "is_async": false,
      "line": 168
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\multi_timeframe\\multi_timeframe_analyzer.py",
      "class": "MultiTimeframeAnalyzer",
      "method": "validate_data",
      "is_async": false,
      "line": 119
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\base_nlp_analyzer.py",
      "class": "BaseNLPAnalyzer",
      "method": "analyze_sentiment",
      "is_async": false,
      "line": 112
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\chat_nlp_analyzer.py",
      "class": "ChatNLPAnalyzer",
      "method": "process_message",
      "is_async": false,
      "line": 41
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\chat_nlp_analyzer.py",
      "class": "ChatNLPAnalyzer",
      "method": "update_context",
      "is_async": false,
      "line": 76
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\chat_nlp_analyzer.py",
      "class": "ChatNLPAnalyzer",
      "method": "get_primary_intent",
      "is_async": false,
      "line": 99
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\chat_nlp_analyzer.py",
      "class": "ChatNLPAnalyzer",
      "method": "get_entity_from_context",
      "is_async": false,
      "line": 131
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\chat_nlp_analyzer.py",
      "class": "ChatNLPAnalyzer",
      "method": "get_user_preference",
      "is_async": false,
      "line": 164
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\chat_nlp_analyzer.py",
      "class": "ChatNLPAnalyzer",
      "method": "get_conversation_summary",
      "is_async": false,
      "line": 183
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\context_management.py",
      "class": "ContextManager",
      "method": "get_context",
      "is_async": false,
      "line": 41
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\context_management.py",
      "class": "ContextManager",
      "method": "update_context",
      "is_async": false,
      "line": 61
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\context_management.py",
      "class": "ContextManager",
      "method": "get_entity_from_context",
      "is_async": false,
      "line": 283
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\context_management.py",
      "class": "ContextManager",
      "method": "get_user_preference",
      "is_async": false,
      "line": 320
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\context_management.py",
      "class": "ContextManager",
      "method": "get_conversation_summary",
      "is_async": false,
      "line": 340
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\nlp_integration.py",
      "class": "NLPIntegration",
      "method": "process_news_data",
      "is_async": true,
      "line": 40
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\nlp\\nlp_integration.py",
      "class": "NLPIntegration",
      "method": "process_economic_report",
      "is_async": true,
      "line": 52
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\sentiment\\base_sentiment_analyzer.py",
      "class": "BaseSentimentAnalyzer",
      "method": "analyze_sentiment",
      "is_async": false,
      "line": 42
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\sentiment\\analyzers\\rule_based_analyzer.py",
      "class": "RuleBasedSentimentAnalyzer",
      "method": "analyze_sentiment",
      "is_async": false,
      "line": 199
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\sentiment\\analyzers\\statistical_analyzer.py",
      "class": "StatisticalSentimentAnalyzer",
      "method": "analyze_sentiment",
      "is_async": false,
      "line": 67
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\analysis\\sentiment\\analyzers\\statistical_analyzer.py",
      "class": "StatisticalSentimentAnalyzer",
      "method": "update_term_frequencies",
      "is_async": false,
      "line": 134
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\api\\distributed_computing_endpoints.py",
      "class": "MockCorrelationService",
      "method": "get_all_correlations",
      "is_async": true,
      "line": 288
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\api\\visualization_data.py",
      "class": "VisualizationDataAPI",
      "method": "get_tool_performance_chart_data",
      "is_async": false,
      "line": 27
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\api\\visualization_data.py",
      "class": "VisualizationDataAPI",
      "method": "get_comparative_chart_data",
      "is_async": false,
      "line": 88
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\api\\visualization_data.py",
      "class": "VisualizationDataAPI",
      "method": "get_win_rate_by_market_regime",
      "is_async": false,
      "line": 131
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\api\\visualization_data.py",
      "class": "VisualizationDataAPI",
      "method": "get_pnl_distribution",
      "is_async": false,
      "line": 185
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\backtesting\\risk_components.py",
      "class": "RLRiskAdapter",
      "method": "get_risk_assessment",
      "is_async": true,
      "line": 53
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\backtesting\\risk_components.py",
      "class": "RLRiskAdapter",
      "method": "get_dynamic_adjustments",
      "is_async": true,
      "line": 91
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\backtesting\\simulators.py",
      "class": "ForexBrokerSimulator",
      "method": "update_market_conditions",
      "is_async": false,
      "line": 73
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\backtesting\\simulators.py",
      "class": "ForexBrokerSimulator",
      "method": "process_orders",
      "is_async": true,
      "line": 123
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\backtesting\\simulators.py",
      "class": "ForexBrokerSimulator",
      "method": "check_conditional_orders",
      "is_async": false,
      "line": 246
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\backtesting\\simulators.py",
      "class": "ForexBrokerSimulator",
      "method": "calculate_unrealized_pnl",
      "is_async": false,
      "line": 412
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\backtesting\\simulators.py",
      "class": "ForexBrokerSimulator",
      "method": "calculate_commission",
      "is_async": false,
      "line": 434
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\backtesting\\simulators.py",
      "class": "MarketRegimeSimulator",
      "method": "get_current_regime",
      "is_async": false,
      "line": 540
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\backtesting\\simulators.py",
      "class": "NewsAndSentimentSimulator",
      "method": "get_events",
      "is_async": false,
      "line": 590
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\caching\\analysis_cache.py",
      "class": "AnalysisCache",
      "method": "get_analysis",
      "is_async": false,
      "line": 68
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\caching\\analysis_cache.py",
      "class": "AnalysisCache",
      "method": "update_version",
      "is_async": false,
      "line": 221
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\causal_inference_service.py",
      "class": "MockDbClient",
      "method": "get_causal_analysis_data",
      "is_async": false,
      "line": 211
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\feature_integration.py",
      "class": "CausalFeatureStoreIntegrator",
      "method": "get_causal_features",
      "is_async": false,
      "line": 53
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\feature_integration.py",
      "class": "MockFeatureStoreClient",
      "method": "get_features",
      "is_async": false,
      "line": 188
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\feature_integration.py",
      "class": "MockFeatureStoreClient",
      "method": "get_feature_metadata",
      "is_async": false,
      "line": 205
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\preparation.py",
      "class": "CausalDataPreparation",
      "method": "check_stationarity",
      "is_async": false,
      "line": 41
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\preparation.py",
      "class": "CausalDataPreparation",
      "method": "get_prepared_data",
      "is_async": false,
      "line": 239
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\detection\\relationship_detector.py",
      "class": "CausalRelationshipAnalyzer",
      "method": "validate_relationship",
      "is_async": false,
      "line": 101
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\feedback\\feedback_loop.py",
      "class": "FeedbackLoopManager",
      "method": "get_performance_metrics",
      "is_async": false,
      "line": 319
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\graph\\causal_graph_generator.py",
      "class": "CausalGraphGenerator",
      "method": "validate_graph",
      "is_async": false,
      "line": 78
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\integration\\system_integrator.py",
      "class": "CausalSystemIntegrator",
      "method": "calculate_relationship_confidence",
      "is_async": false,
      "line": 57
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\prediction\\causal_predictor.py",
      "class": "CausalPredictor",
      "method": "get_causal_feature_importance",
      "is_async": false,
      "line": 100
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\prediction\\causal_predictor.py",
      "class": "CausalEnsemblePredictor",
      "method": "get_model_insights",
      "is_async": false,
      "line": 199
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\services\\causal_data_connector.py",
      "class": "CausalDataConnector",
      "method": "get_historical_data",
      "is_async": true,
      "line": 66
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\services\\causal_data_connector.py",
      "class": "CausalDataConnector",
      "method": "get_real_time_data",
      "is_async": true,
      "line": 149
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\services\\causal_inference_service.py",
      "class": "CausalInferenceService",
      "method": "validate_causal_discovery",
      "is_async": false,
      "line": 150
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\services\\causal_inference_service.py",
      "class": "CausalInferenceService",
      "method": "validate_relationship",
      "is_async": false,
      "line": 201
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\services\\causal_inference_service.py",
      "class": "CausalInferenceService",
      "method": "validate_multiple_relationships",
      "is_async": false,
      "line": 263
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\services\\causal_strategy_enhancer.py",
      "class": "CausalStrategyEnhancer",
      "method": "get_enhancement_types",
      "is_async": true,
      "line": 219
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\services\\causal_strategy_enhancer.py",
      "class": "CausalStrategyEnhancer",
      "method": "get_enhancement_history",
      "is_async": true,
      "line": 232
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\testing\\algorithm_validation.py",
      "class": "ForexCausalValidation",
      "method": "check_stability",
      "is_async": false,
      "line": 140
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\visualization\\causal_visualizer.py",
      "class": "CausalVisualizer",
      "method": "create_causal_graph_visualization",
      "is_async": false,
      "line": 25
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\visualization\\causal_visualizer.py",
      "class": "CausalVisualizer",
      "method": "create_confidence_evolution_plot",
      "is_async": false,
      "line": 113
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\causal\\visualization\\causal_visualizer.py",
      "class": "CausalVisualizer",
      "method": "create_performance_impact_dashboard",
      "is_async": false,
      "line": 165
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\chat\\chat_backend_service.py",
      "class": "ChatBackendService",
      "method": "process_message",
      "is_async": true,
      "line": 79
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\chat\\chat_backend_service.py",
      "class": "ChatBackendService",
      "method": "execute_trading_action",
      "is_async": true,
      "line": 560
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\chat\\chat_backend_service.py",
      "class": "ChatBackendService",
      "method": "get_chat_history",
      "is_async": false,
      "line": 588
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\analysis_engine_client.py",
      "class": "AnalysisEngineClient",
      "method": "get_regime_history",
      "is_async": false,
      "line": 73
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\analysis_engine_client.py",
      "class": "AnalysisEngineClient",
      "method": "update_strategy_parameters",
      "is_async": false,
      "line": 141
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\analysis_engine_client.py",
      "class": "AnalysisEngineClient",
      "method": "get_strategy_recommendations",
      "is_async": false,
      "line": 181
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\analysis_engine_client.py",
      "class": "AnalysisEngineClient",
      "method": "analyze_tool_regime_performance",
      "is_async": false,
      "line": 221
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\execution_engine_client.py",
      "class": "ExecutionEngineClient",
      "method": "get_strategy_status",
      "is_async": true,
      "line": 234
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\service_client_factory.py",
      "class": "ServiceClientFactory",
      "method": "create_market_data_provider",
      "is_async": false,
      "line": 67
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\service_client_factory.py",
      "class": "ServiceClientFactory",
      "method": "create_market_data_cache",
      "is_async": false,
      "line": 76
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\service_client_factory.py",
      "class": "ServiceClientFactory",
      "method": "create_feature_provider",
      "is_async": false,
      "line": 87
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\service_client_factory.py",
      "class": "ServiceClientFactory",
      "method": "create_feature_store",
      "is_async": false,
      "line": 96
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\service_client_factory.py",
      "class": "ServiceClientFactory",
      "method": "create_feature_generator",
      "is_async": false,
      "line": 105
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\service_client_factory.py",
      "class": "ServiceClientFactory",
      "method": "create_analysis_provider",
      "is_async": false,
      "line": 116
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\service_client_factory.py",
      "class": "ServiceClientFactory",
      "method": "create_indicator_provider",
      "is_async": false,
      "line": 125
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\service_client_factory.py",
      "class": "ServiceClientFactory",
      "method": "create_pattern_recognizer",
      "is_async": false,
      "line": 134
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\service_client_factory.py",
      "class": "ServiceClientFactory",
      "method": "create_trading_provider",
      "is_async": false,
      "line": 145
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\service_client_factory.py",
      "class": "ServiceClientFactory",
      "method": "create_order_book_provider",
      "is_async": false,
      "line": 154
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\service_client_factory.py",
      "class": "ServiceClientFactory",
      "method": "create_risk_manager",
      "is_async": false,
      "line": 163
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\adaptive_layer_client.py",
      "class": "AdaptiveLayerClient",
      "method": "update_strategy_parameters",
      "is_async": true,
      "line": 173
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\adaptive_layer_client.py",
      "class": "AdaptiveLayerClient",
      "method": "analyze_strategy_effectiveness_trend",
      "is_async": true,
      "line": 238
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\adaptive_layer_client.py",
      "class": "AdaptiveLayerClient",
      "method": "get_adaptation_history",
      "is_async": true,
      "line": 292
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\adaptive_layer_client.py",
      "class": "AdaptiveLayerClient",
      "method": "get_parameter_history",
      "is_async": true,
      "line": 302
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\adaptive_layer_client.py",
      "class": "AdaptiveLayerClient",
      "method": "get_adaptation_insights",
      "is_async": true,
      "line": 328
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\adaptive_layer_client.py",
      "class": "AdaptiveLayerClient",
      "method": "get_performance_by_regime",
      "is_async": true,
      "line": 343
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\backtesting_client.py",
      "class": "BacktestingClient",
      "method": "get_backtest_results",
      "is_async": true,
      "line": 156
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\backtesting_client.py",
      "class": "BacktestingClient",
      "method": "get_available_strategies",
      "is_async": true,
      "line": 262
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\backtesting_client.py",
      "class": "BacktestingClient",
      "method": "get_available_data_sources",
      "is_async": true,
      "line": 272
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\causal_client.py",
      "class": "CausalClient",
      "method": "analyze_counterfactuals",
      "is_async": true,
      "line": 158
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\causal_client.py",
      "class": "CausalClient",
      "method": "analyze_currency_pair_relationships",
      "is_async": true,
      "line": 179
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\causal_client.py",
      "class": "CausalClient",
      "method": "validate_relationship",
      "is_async": true,
      "line": 221
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\client_factory.py",
      "class": "StandardizedClientFactory",
      "method": "get_adaptive_layer_client",
      "is_async": false,
      "line": 48
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\client_factory.py",
      "class": "StandardizedClientFactory",
      "method": "get_market_regime_client",
      "is_async": false,
      "line": 57
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\client_factory.py",
      "class": "StandardizedClientFactory",
      "method": "get_signal_quality_client",
      "is_async": false,
      "line": 66
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\client_factory.py",
      "class": "StandardizedClientFactory",
      "method": "get_nlp_analysis_client",
      "is_async": false,
      "line": 75
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\client_factory.py",
      "class": "StandardizedClientFactory",
      "method": "get_correlation_analysis_client",
      "is_async": false,
      "line": 84
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\client_factory.py",
      "class": "StandardizedClientFactory",
      "method": "get_manipulation_detection_client",
      "is_async": false,
      "line": 93
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\client_factory.py",
      "class": "StandardizedClientFactory",
      "method": "get_effectiveness_client",
      "is_async": false,
      "line": 102
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\client_factory.py",
      "class": "StandardizedClientFactory",
      "method": "get_feedback_client",
      "is_async": false,
      "line": 111
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\client_factory.py",
      "class": "StandardizedClientFactory",
      "method": "get_monitoring_client",
      "is_async": false,
      "line": 120
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\client_factory.py",
      "class": "StandardizedClientFactory",
      "method": "get_causal_client",
      "is_async": false,
      "line": 129
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\client_factory.py",
      "class": "StandardizedClientFactory",
      "method": "get_backtesting_client",
      "is_async": false,
      "line": 138
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\correlation_analysis_client.py",
      "class": "CorrelationAnalysisClient",
      "method": "analyze_currency_correlations",
      "is_async": true,
      "line": 115
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\correlation_analysis_client.py",
      "class": "CorrelationAnalysisClient",
      "method": "analyze_lead_lag_relationships",
      "is_async": true,
      "line": 143
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\effectiveness_client.py",
      "class": "EffectivenessClient",
      "method": "get_effectiveness_metrics",
      "is_async": true,
      "line": 171
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\effectiveness_client.py",
      "class": "EffectivenessClient",
      "method": "get_dashboard_data",
      "is_async": true,
      "line": 210
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\effectiveness_client.py",
      "class": "EffectivenessClient",
      "method": "get_effectiveness_reports",
      "is_async": true,
      "line": 259
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\effectiveness_client.py",
      "class": "EffectivenessClient",
      "method": "get_effectiveness_report",
      "is_async": true,
      "line": 275
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\feedback_client.py",
      "class": "FeedbackClient",
      "method": "get_feedback_statistics",
      "is_async": true,
      "line": 114
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\feedback_client.py",
      "class": "FeedbackClient",
      "method": "update_feedback_rules",
      "is_async": true,
      "line": 162
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\feedback_client.py",
      "class": "FeedbackClient",
      "method": "get_parameter_performance",
      "is_async": true,
      "line": 177
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\market_regime_client.py",
      "class": "MarketRegimeClient",
      "method": "get_regime_history",
      "is_async": true,
      "line": 141
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\market_regime_client.py",
      "class": "MarketRegimeClient",
      "method": "analyze_tool_regime_performance",
      "is_async": true,
      "line": 160
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\market_regime_client.py",
      "class": "MarketRegimeClient",
      "method": "analyze_tool_complementarity",
      "is_async": true,
      "line": 214
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\market_regime_client.py",
      "class": "MarketRegimeClient",
      "method": "analyze_effectiveness_trends",
      "is_async": true,
      "line": 292
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\market_regime_client.py",
      "class": "MarketRegimeClient",
      "method": "get_underperforming_tools",
      "is_async": true,
      "line": 315
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\monitoring_client.py",
      "class": "MonitoringClient",
      "method": "get_async_performance_metrics",
      "is_async": true,
      "line": 113
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\monitoring_client.py",
      "class": "MonitoringClient",
      "method": "get_memory_metrics",
      "is_async": true,
      "line": 133
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\monitoring_client.py",
      "class": "MonitoringClient",
      "method": "get_service_health",
      "is_async": true,
      "line": 153
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\nlp_analysis_client.py",
      "class": "NLPAnalysisClient",
      "method": "analyze_news",
      "is_async": true,
      "line": 113
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\nlp_analysis_client.py",
      "class": "NLPAnalysisClient",
      "method": "analyze_economic_report",
      "is_async": true,
      "line": 127
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\nlp_analysis_client.py",
      "class": "NLPAnalysisClient",
      "method": "get_combined_insights",
      "is_async": true,
      "line": 143
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\nlp_analysis_client.py",
      "class": "NLPAnalysisClient",
      "method": "get_market_sentiment",
      "is_async": true,
      "line": 165
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\signal_quality_client.py",
      "class": "SignalQualityClient",
      "method": "analyze_signal_quality",
      "is_async": true,
      "line": 137
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\clients\\standardized\\signal_quality_client.py",
      "class": "SignalQualityClient",
      "method": "analyze_quality_trends",
      "is_async": true,
      "line": 159
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\config\\settings.py",
      "class": "AnalysisEngineSettings",
      "method": "validate_db_settings",
      "is_async": false,
      "line": 170
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\analysis_engine.py",
      "class": "AnalysisEngine",
      "method": "analyze_market",
      "is_async": true,
      "line": 91
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\analysis_engine.py",
      "class": "AnalysisEngine",
      "method": "analyze_regime",
      "is_async": true,
      "line": 119
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\analysis_engine.py",
      "class": "AnalysisEngine",
      "method": "calculate_indicators",
      "is_async": true,
      "line": 141
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\connection_pool.py",
      "class": "ConnectionPoolManager",
      "method": "get_db_session",
      "is_async": true,
      "line": 71
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\connection_pool.py",
      "class": "ConnectionPoolManager",
      "method": "get_redis_connection",
      "is_async": true,
      "line": 85
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\container.py",
      "class": "ServiceContainer",
      "method": "get_service",
      "is_async": false,
      "line": 68
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\container.py",
      "class": "ServiceContainer",
      "method": "get_analyzer",
      "is_async": false,
      "line": 85
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\database.py",
      "class": "DatabaseManager",
      "method": "get_session",
      "is_async": false,
      "line": 109
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\enhanced_deprecation_monitor.py",
      "class": "EnhancedDeprecationMonitor",
      "method": "get_usage_report",
      "is_async": false,
      "line": 314
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\enhanced_deprecation_monitor.py",
      "class": "EnhancedDeprecationMonitor",
      "method": "analyze_imports",
      "is_async": false,
      "line": 494
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\enhanced_deprecation_monitor.py",
      "class": "EnhancedDeprecationMonitor",
      "method": "get_migration_status",
      "is_async": false,
      "line": 533
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\memory_monitor.py",
      "class": "MemoryMonitor",
      "method": "get_memory_stats",
      "is_async": false,
      "line": 110
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\base\\components.py",
      "class": "BaseComponent",
      "method": "get_performance_metrics",
      "is_async": false,
      "line": 78
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\base\\components.py",
      "class": "BaseService",
      "method": "get_health_status",
      "is_async": false,
      "line": 180
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\base\\components.py",
      "class": "AnalysisService",
      "method": "get_analyzer",
      "is_async": false,
      "line": 221
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\base\\components.py",
      "class": "AnalysisService",
      "method": "execute_analysis",
      "is_async": true,
      "line": 225
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\base\\components.py",
      "class": "AnalysisService",
      "method": "execute_multiple",
      "is_async": true,
      "line": 244
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\monitoring\\async_performance_monitor.py",
      "class": "AsyncPerformanceMetrics",
      "method": "get_metrics",
      "is_async": false,
      "line": 63
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\monitoring\\async_performance_monitor.py",
      "class": "AsyncPerformanceMonitor",
      "method": "get_metrics",
      "is_async": false,
      "line": 107
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\core\\monitoring\\async_performance_monitor.py",
      "class": "AsyncPerformanceMonitor",
      "method": "get_operation_metrics",
      "is_async": false,
      "line": 124
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\integration\\analysis_integration_service.py",
      "class": "AnalysisIntegrationService",
      "method": "analyze_asset",
      "is_async": true,
      "line": 81
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\integration\\feature_store_adapter.py",
      "class": "FeatureStoreAdapter",
      "method": "process_analysis_result",
      "is_async": false,
      "line": 304
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\learning_from_mistakes\\effectiveness_logger.py",
      "class": "EffectivenessLogger",
      "method": "get_logs",
      "is_async": false,
      "line": 157
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\learning_from_mistakes\\effectiveness_logger.py",
      "class": "EffectivenessLogger",
      "method": "get_summary",
      "is_async": false,
      "line": 208
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\learning_from_mistakes\\error_pattern_recognition.py",
      "class": "ErrorPatternRecognitionSystem",
      "method": "analyze_patterns",
      "is_async": false,
      "line": 130
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\learning_from_mistakes\\error_pattern_recognition.py",
      "class": "ErrorPatternRecognitionSystem",
      "method": "get_mitigation_strategies",
      "is_async": false,
      "line": 207
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\learning_from_mistakes\\error_pattern_recognition.py",
      "class": "ErrorPatternRecognitionSystem",
      "method": "get_identified_patterns",
      "is_async": false,
      "line": 228
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\learning_from_mistakes\\predictive_failure_modeling.py",
      "class": "PredictiveFailureModel",
      "method": "load_model",
      "is_async": false,
      "line": 279
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\learning_from_mistakes\\predictive_failure_modeling.py",
      "class": "PredictiveFailureModel",
      "method": "get_model_performance",
      "is_async": false,
      "line": 329
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\learning_from_mistakes\\predictive_failure_modeling.py",
      "class": "PredictiveFailureModel",
      "method": "get_feature_importances",
      "is_async": false,
      "line": 347
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\learning_from_mistakes\\risk_adjustment.py",
      "class": "RiskAdjustmentManager",
      "method": "check_for_risk_patterns",
      "is_async": true,
      "line": 70
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\learning_from_mistakes\\risk_adjustment.py",
      "class": "RiskAdjustmentManager",
      "method": "get_adjustment_history",
      "is_async": false,
      "line": 206
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\learning_from_mistakes\\risk_adjustment.py",
      "class": "RiskAdjustmentManager",
      "method": "calculate_adjustment_effectiveness",
      "is_async": false,
      "line": 229
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\ml\\ml_confluence_detector.py",
      "class": "MLConfluenceDetector",
      "method": "analyze_divergence_ml",
      "is_async": false,
      "line": 366
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\ml\\model_manager.py",
      "class": "ModelManager",
      "method": "load_pattern_model",
      "is_async": false,
      "line": 75
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\ml\\model_manager.py",
      "class": "ModelManager",
      "method": "load_prediction_model",
      "is_async": false,
      "line": 113
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\ml\\model_manager.py",
      "class": "ModelManager",
      "method": "load_ml_confluence_detector",
      "is_async": false,
      "line": 154
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\ml\\model_manager.py",
      "class": "ModelManager",
      "method": "get_model_info",
      "is_async": false,
      "line": 403
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\ml\\model_manager.py",
      "class": "ModelManager",
      "method": "delete_model",
      "is_async": false,
      "line": 430
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\ml\\pattern_recognition_model.py",
      "class": "PatternRecognitionModel",
      "method": "get_summary",
      "is_async": false,
      "line": 278
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\ml\\price_prediction_model.py",
      "class": "PricePredictionModel",
      "method": "get_summary",
      "is_async": false,
      "line": 339
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\monitoring\\health_checks.py",
      "class": "HealthCheck",
      "method": "check_health",
      "is_async": true,
      "line": 109
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\monitoring\\performance_monitoring.py",
      "class": "AnalysisEngineMonitoring",
      "method": "get_metrics",
      "is_async": false,
      "line": 38
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\monitoring\\performance_monitoring.py",
      "class": "AnalysisEngineMonitoring",
      "method": "get_health_status",
      "is_async": false,
      "line": 42
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "BaseAssetAdapter",
      "method": "calculate_volatility",
      "is_async": false,
      "line": 32
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "BaseAssetAdapter",
      "method": "get_price_levels",
      "is_async": false,
      "line": 37
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "BaseAssetAdapter",
      "method": "get_typical_spreads",
      "is_async": false,
      "line": 42
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "BaseAssetAdapter",
      "method": "get_position_sizing_factors",
      "is_async": false,
      "line": 46
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "ForexAssetAdapter",
      "method": "calculate_volatility",
      "is_async": false,
      "line": 91
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "ForexAssetAdapter",
      "method": "get_price_levels",
      "is_async": false,
      "line": 111
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "ForexAssetAdapter",
      "method": "get_typical_spreads",
      "is_async": false,
      "line": 141
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "CryptoAssetAdapter",
      "method": "calculate_volatility",
      "is_async": false,
      "line": 179
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "CryptoAssetAdapter",
      "method": "get_price_levels",
      "is_async": false,
      "line": 195
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "CryptoAssetAdapter",
      "method": "get_typical_spreads",
      "is_async": false,
      "line": 225
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "StockAssetAdapter",
      "method": "calculate_volatility",
      "is_async": false,
      "line": 254
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "StockAssetAdapter",
      "method": "get_price_levels",
      "is_async": false,
      "line": 266
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "StockAssetAdapter",
      "method": "get_typical_spreads",
      "is_async": false,
      "line": 290
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapter.py",
      "class": "AssetAdapterFactory",
      "method": "get_adapter",
      "is_async": false,
      "line": 304
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "CryptoAssetAdapter",
      "method": "calculate_volatility",
      "is_async": false,
      "line": 49
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "CryptoAssetAdapter",
      "method": "get_price_levels",
      "is_async": false,
      "line": 68
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "CryptoAssetAdapter",
      "method": "get_typical_spreads",
      "is_async": false,
      "line": 123
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "CryptoAssetAdapter",
      "method": "get_market_hours_filter",
      "is_async": false,
      "line": 143
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "CryptoAssetAdapter",
      "method": "get_volatility_normalization_factor",
      "is_async": false,
      "line": 162
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "CryptoAssetAdapter",
      "method": "get_bitcoin_dominance_impact",
      "is_async": false,
      "line": 182
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "StockAssetAdapter",
      "method": "calculate_volatility",
      "is_async": false,
      "line": 246
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "StockAssetAdapter",
      "method": "get_price_levels",
      "is_async": false,
      "line": 265
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "StockAssetAdapter",
      "method": "get_typical_spreads",
      "is_async": false,
      "line": 302
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "StockAssetAdapter",
      "method": "get_market_hours_filter",
      "is_async": false,
      "line": 337
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "StockAssetAdapter",
      "method": "get_sector_correlation",
      "is_async": false,
      "line": 386
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "CommodityAssetAdapter",
      "method": "calculate_volatility",
      "is_async": false,
      "line": 480
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "CommodityAssetAdapter",
      "method": "get_price_levels",
      "is_async": false,
      "line": 556
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "CommodityAssetAdapter",
      "method": "get_typical_spreads",
      "is_async": false,
      "line": 615
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "CommodityAssetAdapter",
      "method": "get_market_hours_filter",
      "is_async": false,
      "line": 644
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "IndexAssetAdapter",
      "method": "calculate_volatility",
      "is_async": false,
      "line": 732
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "IndexAssetAdapter",
      "method": "get_price_levels",
      "is_async": false,
      "line": 749
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "IndexAssetAdapter",
      "method": "get_typical_spreads",
      "is_async": false,
      "line": 803
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "IndexAssetAdapter",
      "method": "get_market_hours_filter",
      "is_async": false,
      "line": 831
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_adapters.py",
      "class": "IndexAssetAdapter",
      "method": "get_vix_relationship",
      "is_async": false,
      "line": 885
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_registry.py",
      "class": "AssetRegistry",
      "method": "load_config",
      "is_async": false,
      "line": 101
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_registry.py",
      "class": "AssetRegistry",
      "method": "get_asset",
      "is_async": false,
      "line": 129
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_registry.py",
      "class": "AssetRegistry",
      "method": "get_correlation",
      "is_async": false,
      "line": 154
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_registry.py",
      "class": "AssetRegistry",
      "method": "get_correlated_assets",
      "is_async": false,
      "line": 162
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_registry.py",
      "class": "AssetRegistry",
      "method": "create_asset_group",
      "is_async": false,
      "line": 185
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_registry.py",
      "class": "AssetRegistry",
      "method": "get_asset_group",
      "is_async": false,
      "line": 195
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_registry.py",
      "class": "AssetRegistry",
      "method": "get_pip_value",
      "is_async": false,
      "line": 202
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_registry.py",
      "class": "AssetRegistry",
      "method": "get_trading_parameters",
      "is_async": false,
      "line": 209
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_strategy_framework.py",
      "class": "BaseAssetStrategy",
      "method": "get_strategy_parameters",
      "is_async": false,
      "line": 89
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_strategy_framework.py",
      "class": "BaseAssetStrategy",
      "method": "get_position_sizing",
      "is_async": false,
      "line": 117
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_strategy_framework.py",
      "class": "BaseAssetStrategy",
      "method": "validate_asset",
      "is_async": false,
      "line": 131
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_strategy_framework.py",
      "class": "BaseAssetStrategy",
      "method": "get_required_components",
      "is_async": false,
      "line": 147
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_strategy_framework.py",
      "class": "AssetStrategyFactory",
      "method": "get_strategy",
      "is_async": false,
      "line": 180
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\asset_strategy_framework.py",
      "class": "AssetStrategyFactory",
      "method": "get_strategy_for_asset",
      "is_async": false,
      "line": 206
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\correlation_tracking_service.py",
      "class": "CorrelationTrackingService",
      "method": "calculate_correlations",
      "is_async": true,
      "line": 40
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\correlation_tracking_service.py",
      "class": "CorrelationTrackingService",
      "method": "update_asset_correlations",
      "is_async": true,
      "line": 82
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\correlation_tracking_service.py",
      "class": "CorrelationTrackingService",
      "method": "get_correlation_matrix",
      "is_async": true,
      "line": 132
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\correlation_tracking_service.py",
      "class": "CorrelationTrackingService",
      "method": "get_correlation_stability",
      "is_async": false,
      "line": 185
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\correlation_tracking_service.py",
      "class": "CorrelationTrackingService",
      "method": "get_highest_correlations",
      "is_async": true,
      "line": 197
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\correlation_tracking_service.py",
      "class": "CorrelationTrackingService",
      "method": "get_cross_asset_correlations",
      "is_async": true,
      "line": 225
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\correlation_tracking_service.py",
      "class": "CorrelationTrackingService",
      "method": "get_correlation_changes",
      "is_async": true,
      "line": 275
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\correlation_tracking_service.py",
      "class": "CorrelationTrackingService",
      "method": "get_correlation_visualization_data",
      "is_async": false,
      "line": 351
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\crypto_strategies.py",
      "class": "CryptoMomentumStrategy",
      "method": "get_strategy_parameters",
      "is_async": false,
      "line": 122
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\crypto_strategies.py",
      "class": "CryptoMomentumStrategy",
      "method": "get_position_sizing",
      "is_async": false,
      "line": 226
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\crypto_strategies.py",
      "class": "CryptoMomentumStrategy",
      "method": "get_required_components",
      "is_async": false,
      "line": 252
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\crypto_strategies.py",
      "class": "CryptoMeanReversionStrategy",
      "method": "get_strategy_parameters",
      "is_async": false,
      "line": 543
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\crypto_strategies.py",
      "class": "CryptoMeanReversionStrategy",
      "method": "get_position_sizing",
      "is_async": false,
      "line": 601
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\crypto_strategies.py",
      "class": "CryptoMeanReversionStrategy",
      "method": "get_required_components",
      "is_async": false,
      "line": 614
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\crypto_strategies.py",
      "class": "CryptoVolatilityStrategy",
      "method": "get_strategy_parameters",
      "is_async": false,
      "line": 793
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\crypto_strategies.py",
      "class": "CryptoVolatilityStrategy",
      "method": "get_position_sizing",
      "is_async": false,
      "line": 853
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\crypto_strategies.py",
      "class": "CryptoVolatilityStrategy",
      "method": "get_required_components",
      "is_async": false,
      "line": 867
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\currency_strength_analyzer.py",
      "class": "CurrencyStrengthAnalyzer",
      "method": "calculate_currency_strength",
      "is_async": false,
      "line": 64
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\currency_strength_analyzer.py",
      "class": "CurrencyStrengthAnalyzer",
      "method": "get_currency_strength_history",
      "is_async": false,
      "line": 331
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\currency_strength_analyzer.py",
      "class": "CurrencyStrengthAnalyzer",
      "method": "get_strongest_currencies",
      "is_async": false,
      "line": 357
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\currency_strength_analyzer.py",
      "class": "CurrencyStrengthAnalyzer",
      "method": "get_weakest_currencies",
      "is_async": false,
      "line": 385
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\currency_strength_analyzer.py",
      "class": "CurrencyStrengthAnalyzer",
      "method": "analyze_currency_baskets",
      "is_async": false,
      "line": 627
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\forex_strategies.py",
      "class": "ForexTrendStrategy",
      "method": "get_strategy_parameters",
      "is_async": false,
      "line": 186
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\forex_strategies.py",
      "class": "ForexTrendStrategy",
      "method": "get_position_sizing",
      "is_async": false,
      "line": 251
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\forex_strategies.py",
      "class": "ForexTrendStrategy",
      "method": "get_required_components",
      "is_async": false,
      "line": 273
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\forex_strategies.py",
      "class": "ForexRangeStrategy",
      "method": "get_strategy_parameters",
      "is_async": false,
      "line": 511
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\forex_strategies.py",
      "class": "ForexRangeStrategy",
      "method": "get_position_sizing",
      "is_async": false,
      "line": 521
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\forex_strategies.py",
      "class": "ForexBreakoutStrategy",
      "method": "get_strategy_parameters",
      "is_async": false,
      "line": 627
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\forex_strategies.py",
      "class": "ForexBreakoutStrategy",
      "method": "get_position_sizing",
      "is_async": false,
      "line": 637
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\indicator_adapter.py",
      "class": "IndicatorAdapter",
      "method": "get_indicator",
      "is_async": false,
      "line": 39
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\optimized_confluence_detector.py",
      "class": "OptimizedConfluenceDetector",
      "method": "analyze_divergence_optimized",
      "is_async": false,
      "line": 430
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\multi_asset\\related_pairs_confluence_detector.py",
      "class": "RelatedPairsConfluenceAnalyzer",
      "method": "analyze_divergence",
      "is_async": false,
      "line": 618
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\repositories\\feedback_repository.py",
      "class": "FeedbackRepository",
      "method": "get_prioritized_feedback_since",
      "is_async": false,
      "line": 71
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\repositories\\feedback_repository.py",
      "class": "FeedbackRepository",
      "method": "update_feedback_status",
      "is_async": false,
      "line": 109
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\repositories\\feedback_repository.py",
      "class": "FeedbackRepository",
      "method": "create_feedback_batch",
      "is_async": false,
      "line": 142
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\repositories\\feedback_repository.py",
      "class": "FeedbackRepository",
      "method": "get_feedback_batch",
      "is_async": false,
      "line": 180
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\repositories\\price_repository.py",
      "class": "PriceRepository",
      "method": "get_prices",
      "is_async": false,
      "line": 24
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\repositories\\price_repository.py",
      "class": "PriceRepository",
      "method": "get_latest_price",
      "is_async": false,
      "line": 44
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\repositories\\price_repository.py",
      "class": "PriceRepository",
      "method": "get_price_statistics",
      "is_async": false,
      "line": 56
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\repositories\\tool_effectiveness_repository.py",
      "class": "ToolEffectivenessRepository",
      "method": "get_predictions",
      "is_async": true,
      "line": 128
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\repositories\\tool_effectiveness_repository.py",
      "class": "ToolEffectivenessRepository",
      "method": "get_effective_tools",
      "is_async": true,
      "line": 302
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\resilience\\database.py",
      "class": "ResilientDatabaseManager",
      "method": "get_db_session",
      "is_async": false,
      "line": 73
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\resilience\\redis_client.py",
      "class": "ResilientRedisClient",
      "method": "get_redis_client",
      "is_async": false,
      "line": 67
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\scheduling\\effectiveness_scheduler.py",
      "class": "ToolEffectivenessScheduler",
      "method": "calculate_hourly_metrics",
      "is_async": true,
      "line": 134
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\scheduling\\effectiveness_scheduler.py",
      "class": "ToolEffectivenessScheduler",
      "method": "calculate_daily_metrics",
      "is_async": true,
      "line": 151
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\scheduling\\effectiveness_scheduler.py",
      "class": "ToolEffectivenessScheduler",
      "method": "calculate_weekly_metrics",
      "is_async": true,
      "line": 168
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\scheduling\\effectiveness_scheduler.py",
      "class": "ToolEffectivenessScheduler",
      "method": "calculate_monthly_metrics",
      "is_async": true,
      "line": 186
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\adaptive_integration.py",
      "class": "AdaptiveLayerIntegrationService",
      "method": "update_strategy_parameters",
      "is_async": false,
      "line": 51
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\adaptive_integration.py",
      "class": "AdaptiveStrategyOptimizer",
      "method": "analyze_strategy_effectiveness_trend",
      "is_async": false,
      "line": 225
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\adaptive_signal_quality.py",
      "class": "AdaptiveSignalQualityIntegration",
      "method": "get_cached_quality",
      "is_async": false,
      "line": 108
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\analysis_service.py",
      "class": "AnalysisService",
      "method": "get_analyzer",
      "is_async": true,
      "line": 182
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\analysis_service.py",
      "class": "AnalysisService",
      "method": "get_analyzer_details",
      "is_async": true,
      "line": 693
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\analysis_service.py",
      "class": "AnalysisService",
      "method": "get_analyzer_performance",
      "is_async": true,
      "line": 731
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\analysis_service.py",
      "class": "AnalysisService",
      "method": "get_analyzer_effectiveness",
      "is_async": true,
      "line": 748
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\dashboard_data_provider.py",
      "class": "DashboardDataProvider",
      "method": "get_summary_data",
      "is_async": false,
      "line": 37
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\dashboard_data_provider.py",
      "class": "DashboardDataProvider",
      "method": "get_tool_comparison_data",
      "is_async": false,
      "line": 67
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\dashboard_data_provider.py",
      "class": "DashboardDataProvider",
      "method": "get_regime_effectiveness_data",
      "is_async": false,
      "line": 127
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\enhanced_tool_effectiveness.py",
      "class": "EnhancedToolEffectivenessTracker",
      "method": "calculate_metrics",
      "is_async": false,
      "line": 82
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\enhanced_tool_effectiveness.py",
      "class": "EnhancedToolEffectivenessTracker",
      "method": "analyze_tool_by_market_regime",
      "is_async": false,
      "line": 145
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\enhanced_tool_effectiveness.py",
      "class": "EnhancedToolEffectivenessTracker",
      "method": "get_effectiveness_trend",
      "is_async": false,
      "line": 209
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\market_regime_analysis.py",
      "class": "MarketRegimeAnalysisService",
      "method": "get_regime_performance_matrix",
      "is_async": false,
      "line": 36
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\market_regime_analysis.py",
      "class": "MarketRegimeAnalysisService",
      "method": "analyze_effectiveness_trends",
      "is_async": false,
      "line": 550
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\market_regime_analysis.py",
      "class": "MarketRegimeAnalysisService",
      "method": "get_underperforming_tools",
      "is_async": false,
      "line": 659
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\market_regime_detector.py",
      "class": "MarketRegimeAnalyzer",
      "method": "get_transition_history",
      "is_async": false,
      "line": 347
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\market_regime_detector.py",
      "class": "MarketRegimeAnalyzer",
      "method": "get_transition_frequency",
      "is_async": false,
      "line": 360
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\market_regime_detector.py",
      "class": "MarketRegimeService",
      "method": "get_regime_history",
      "is_async": false,
      "line": 436
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\market_regime_detector.py",
      "class": "MarketRegimeService",
      "method": "get_dominant_regime",
      "is_async": false,
      "line": 453
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\market_regime_detector.py",
      "class": "MarketRegimeService",
      "method": "get_regime_transitions",
      "is_async": false,
      "line": 485
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\market_regime_detector.py",
      "class": "MarketRegimeService",
      "method": "get_transition_statistics",
      "is_async": false,
      "line": 500
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\model_retraining_service.py",
      "class": "ModelRetrainingService",
      "method": "check_and_trigger_retraining",
      "is_async": false,
      "line": 52
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\model_retraining_service.py",
      "class": "MockFeedbackRepository",
      "method": "get_prioritized_feedback_since",
      "is_async": false,
      "line": 317
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\model_retraining_service.py",
      "class": "MockFeedbackRepository",
      "method": "update_feedback_status",
      "is_async": false,
      "line": 330
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\model_retraining_service.py",
      "class": "MockFeedbackRepositoryLow",
      "method": "get_prioritized_feedback_since",
      "is_async": false,
      "line": 342
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\model_retraining_service.py",
      "class": "MockFeedbackRepositoryLow",
      "method": "update_feedback_status",
      "is_async": false,
      "line": 354
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\model_trainer.py",
      "class": "AnalysisEngineModelTrainer",
      "method": "get_retraining_history",
      "is_async": false,
      "line": 161
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\multi_asset_service.py",
      "class": "MultiAssetService",
      "method": "get_adapter",
      "is_async": false,
      "line": 53
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\multi_asset_service.py",
      "class": "MultiAssetService",
      "method": "calculate_volatility",
      "is_async": false,
      "line": 62
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\multi_asset_service.py",
      "class": "MultiAssetService",
      "method": "get_price_levels",
      "is_async": false,
      "line": 67
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\multi_asset_service.py",
      "class": "MultiAssetService",
      "method": "get_correlated_symbols",
      "is_async": false,
      "line": 72
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\multi_asset_service.py",
      "class": "MultiAssetService",
      "method": "get_asset_info",
      "is_async": false,
      "line": 77
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\multi_asset_service.py",
      "class": "MultiAssetService",
      "method": "get_asset_group",
      "is_async": false,
      "line": 100
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\multi_asset_service.py",
      "class": "MultiAssetService",
      "method": "get_analysis_parameters",
      "is_async": false,
      "line": 105
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\regime_transition_predictor.py",
      "class": "RegimeTransitionPredictor",
      "method": "update_transition_probabilities",
      "is_async": false,
      "line": 371
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\regime_transition_predictor.py",
      "class": "RegimeTransitionPredictor",
      "method": "get_transition_history",
      "is_async": false,
      "line": 399
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\regime_transition_predictor.py",
      "class": "RegimeTransitionPredictor",
      "method": "get_transition_matrix",
      "is_async": false,
      "line": 420
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\regime_transition_predictor.py",
      "class": "RegimeTransitionPredictor",
      "method": "get_most_likely_transitions",
      "is_async": false,
      "line": 429
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\regime_transition_predictor.py",
      "class": "RegimeTransitionPredictor",
      "method": "update_correlated_markets",
      "is_async": true,
      "line": 511
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\timeframe_optimization_service.py",
      "class": "TimeframeOptimizationService",
      "method": "get_timeframe_weights",
      "is_async": false,
      "line": 292
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\timeframe_optimization_service.py",
      "class": "TimeframeOptimizationService",
      "method": "get_performance_stats",
      "is_async": false,
      "line": 307
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\timeframe_optimization_service.py",
      "class": "TimeframeOptimizationService",
      "method": "get_recommended_timeframes",
      "is_async": false,
      "line": 328
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\time_series_index_manager.py",
      "class": "TimeSeriesIndexManager",
      "method": "get_optimal_time_range_strategy",
      "is_async": false,
      "line": 111
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\time_series_index_manager.py",
      "class": "TimeSeriesIndexManager",
      "method": "get_statistics",
      "is_async": false,
      "line": 158
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\tool_effectiveness.py",
      "class": "ToolEffectivenessTracker",
      "method": "get_tool_effectiveness",
      "is_async": false,
      "line": 125
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\tool_effectiveness.py",
      "class": "ToolEffectivenessTracker",
      "method": "get_best_tools",
      "is_async": false,
      "line": 172
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\tool_effectiveness.py",
      "class": "ToolEffectivenessTracker",
      "method": "get_tool_history",
      "is_async": false,
      "line": 204
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\tool_effectiveness.py",
      "class": "ToolEffectivenessTracker",
      "method": "get_performance_summary",
      "is_async": false,
      "line": 230
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\services\\tool_effectiveness_service.py",
      "class": "ToolEffectivenessService",
      "method": "get_tool_performance_summary",
      "is_async": false,
      "line": 47
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\signal_flow\\analysis_signal_manager.py",
      "class": "AnalysisSignalManager",
      "method": "create_signal_from_analysis",
      "is_async": true,
      "line": 34
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\rl_effectiveness_framework.py",
      "class": "RLEffectivenessFramework",
      "method": "analyze_model_decay",
      "is_async": false,
      "line": 449
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\rl_effectiveness_framework.py",
      "class": "MarketRegimeEffectivenessAnalyzer",
      "method": "analyze_regimes",
      "is_async": false,
      "line": 534
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\rl_effectiveness_framework.py",
      "class": "ActionQualityAnalyzer",
      "method": "analyze_actions",
      "is_async": false,
      "line": 621
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\rl_effectiveness_framework.py",
      "class": "EffectivenessDecayAnalyzer",
      "method": "analyze_decay",
      "is_async": false,
      "line": 769
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\enhanced_effectiveness_framework.py",
      "class": "EnhancedEffectivenessAnalyzer",
      "method": "calculate_regime_specific_performance",
      "is_async": false,
      "line": 50
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\enhanced_effectiveness_framework.py",
      "class": "EnhancedEffectivenessAnalyzer",
      "method": "analyze_cross_timeframe_consistency",
      "is_async": false,
      "line": 104
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\enhanced_rl_effectiveness_framework.py",
      "class": "TradeRecord",
      "method": "calculate_metrics",
      "is_async": false,
      "line": 72
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\enhanced_rl_effectiveness_framework.py",
      "class": "RLEffectivenessAPI",
      "method": "get_evaluation_results",
      "is_async": false,
      "line": 835
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\enhanced_rl_effectiveness_framework.py",
      "class": "RLEffectivenessAPI",
      "method": "get_comparison_results",
      "is_async": false,
      "line": 847
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\enhanced_rl_effectiveness_framework.py",
      "class": "RLEffectivenessAPI",
      "method": "get_all_evaluations",
      "is_async": false,
      "line": 859
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\enhanced_rl_effectiveness_framework.py",
      "class": "RLEffectivenessAPI",
      "method": "get_all_comparisons",
      "is_async": false,
      "line": 868
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\enhanced_rl_effectiveness_framework.py",
      "class": "RLEffectivenessAPI",
      "method": "get_effectiveness_summary",
      "is_async": false,
      "line": 877
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\rl_effectiveness_framework.py",
      "class": "RLModelEffectivenessAnalyzer",
      "method": "calculate_regime_specific_metrics",
      "is_async": false,
      "line": 93
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\rl_effectiveness_framework.py",
      "class": "RLModelEffectivenessAnalyzer",
      "method": "calculate_comparative_effectiveness",
      "is_async": false,
      "line": 138
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\rl_effectiveness_framework.py",
      "class": "RLModelEffectivenessAnalyzer",
      "method": "analyze_action_quality",
      "is_async": false,
      "line": 214
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\rl_effectiveness_framework.py",
      "class": "RLModelEffectivenessAnalyzer",
      "method": "update_historical_data",
      "is_async": false,
      "line": 352
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\rl_effectiveness_framework.py",
      "class": "RLToolEffectivenessIntegration",
      "method": "calculate_effectiveness",
      "is_async": false,
      "line": 543
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\tools\\effectiveness\\rl_effectiveness_framework.py",
      "class": "ReinforcementLearningAnalyticsService",
      "method": "calculate_decision_attribution",
      "is_async": false,
      "line": 688
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\adaptive_cache_manager.py",
      "class": "AdaptiveCacheManager",
      "method": "get_stats",
      "is_async": false,
      "line": 198
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\cache_manager.py",
      "class": "CacheManager",
      "method": "get_or_set",
      "is_async": false,
      "line": 59
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\config_loader.py",
      "class": "ConfigLoader",
      "method": "get_config_paths",
      "is_async": false,
      "line": 53
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\config_loader.py",
      "class": "ConfigLoader",
      "method": "load_config",
      "is_async": false,
      "line": 92
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\config_loader.py",
      "class": "ConfigLoader",
      "method": "get_default_config",
      "is_async": false,
      "line": 203
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\distributed_computing.py",
      "class": "DistributedWorker",
      "method": "get_task",
      "is_async": false,
      "line": 230
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\distributed_computing.py",
      "class": "DistributedWorker",
      "method": "get_stats",
      "is_async": false,
      "line": 242
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\distributed_computing.py",
      "class": "DistributedTaskManager",
      "method": "get_task_result",
      "is_async": true,
      "line": 354
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\distributed_computing.py",
      "class": "DistributedTaskManager",
      "method": "get_task",
      "is_async": false,
      "line": 385
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\distributed_computing.py",
      "class": "DistributedTaskManager",
      "method": "get_stats",
      "is_async": false,
      "line": 397
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\distributed_tracing.py",
      "class": "DistributedTracer",
      "method": "get_current_trace_id",
      "is_async": false,
      "line": 202
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\gpu_accelerator.py",
      "class": "GPUAccelerator",
      "method": "calculate_technical_indicators",
      "is_async": false,
      "line": 137
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\incremental_updater.py",
      "class": "IncrementalUpdater",
      "method": "get_result",
      "is_async": false,
      "line": 114
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\incremental_updater.py",
      "class": "DataFrameUpdater",
      "method": "get_result",
      "is_async": false,
      "line": 260
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\memory_optimized_dataframe.py",
      "class": "MemoryOptimizedDataFrame",
      "method": "get_view",
      "is_async": false,
      "line": 97
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\optimized_parallel_processor.py",
      "class": "OptimizedParallelProcessor",
      "method": "get_stats",
      "is_async": false,
      "line": 153
    },
    {
      "file": "analysis-engine-service\\analysis_engine\\utils\\predictive_cache_manager.py",
      "class": "PredictiveCacheManager",
      "method": "get_stats",
      "is_async": false,
      "line": 142
    },
    {
      "file": "analysis-engine-service\\scripts\\benchmark_confluence_divergence.py",
      "class": "RelatedPairsConfluenceAnalyzer",
      "method": "analyze_divergence",
      "is_async": false,
      "line": 74
    },
    {
      "file": "analysis-engine-service\\scripts\\benchmark_confluence_divergence.py",
      "class": "OptimizedConfluenceDetector",
      "method": "analyze_divergence_optimized",
      "is_async": false,
      "line": 129
    },
    {
      "file": "analysis-engine-service\\scripts\\benchmark_confluence_divergence.py",
      "class": "MockCorrelationService",
      "method": "get_all_correlations",
      "is_async": true,
      "line": 146
    },
    {
      "file": "analysis-engine-service\\scripts\\benchmark_confluence_divergence.py",
      "class": "MockCurrencyStrengthAnalyzer",
      "method": "calculate_currency_strength",
      "is_async": false,
      "line": 174
    },
    {
      "file": "analysis-engine-service\\scripts\\profile_related_pairs_confluence.py",
      "class": "MockCorrelationService",
      "method": "get_all_correlations",
      "is_async": true,
      "line": 47
    },
    {
      "file": "analysis-engine-service\\scripts\\profile_related_pairs_confluence.py",
      "class": "MockCurrencyStrengthAnalyzer",
      "method": "calculate_currency_strength",
      "is_async": false,
      "line": 75
    },
    {
      "file": "analysis-engine-service\\scripts\\real_market_data_test.py",
      "class": "DataProvider",
      "method": "get_price_data",
      "is_async": true,
      "line": 51
    },
    {
      "file": "analysis-engine-service\\scripts\\real_market_data_test.py",
      "class": "AlphaVantageProvider",
      "method": "get_price_data",
      "is_async": true,
      "line": 84
    },
    {
      "file": "analysis-engine-service\\scripts\\real_market_data_test.py",
      "class": "SyntheticDataProvider",
      "method": "get_price_data",
      "is_async": true,
      "line": 157
    },
    {
      "file": "analysis-engine-service\\scripts\\real_market_data_test.py",
      "class": "MultiSourceDataProvider",
      "method": "get_price_data",
      "is_async": true,
      "line": 223
    },
    {
      "file": "analysis-engine-service\\scripts\\real_market_data_test.py",
      "class": "MockCorrelationService",
      "method": "get_all_correlations",
      "is_async": true,
      "line": 471
    },
    {
      "file": "analysis-engine-service\\scripts\\real_world_performance_test.py",
      "class": "MockCorrelationService",
      "method": "get_all_correlations",
      "is_async": true,
      "line": 70
    },
    {
      "file": "analysis-engine-service\\scripts\\test_optimized_confluence.py",
      "class": "MockCorrelationService",
      "method": "get_all_correlations",
      "is_async": true,
      "line": 39
    },
    {
      "file": "analysis-engine-service\\scripts\\test_optimized_confluence.py",
      "class": "MockCurrencyStrengthAnalyzer",
      "method": "calculate_currency_strength",
      "is_async": false,
      "line": 67
    },
    {
      "file": "analysis-engine-service\\tests\\simple_test.py",
      "class": "AdaptiveCacheManager",
      "method": "get_stats",
      "is_async": false,
      "line": 42
    },
    {
      "file": "analysis-engine-service\\tests\\simple_test.py",
      "class": "MemoryOptimizedDataFrame",
      "method": "get_view",
      "is_async": false,
      "line": 61
    },
    {
      "file": "analysis-engine-service\\tests\\integration\\test_optimized_components_integration.py",
      "class": "AdaptiveCacheManager",
      "method": "get_stats",
      "is_async": false,
      "line": 54
    },
    {
      "file": "analysis-engine-service\\tests\\integration\\test_optimized_components_integration.py",
      "class": "OptimizedParallelProcessor",
      "method": "get_stats",
      "is_async": false,
      "line": 77
    },
    {
      "file": "analysis-engine-service\\tests\\integration\\test_optimized_components_integration.py",
      "class": "MemoryOptimizedDataFrame",
      "method": "get_view",
      "is_async": false,
      "line": 93
    },
    {
      "file": "analysis-engine-service\\tests\\integration\\test_optimized_components_integration.py",
      "class": "DistributedTracer",
      "method": "get_current_trace_id",
      "is_async": false,
      "line": 172
    },
    {
      "file": "analysis-engine-service\\tests\\integration\\test_optimized_components_integration.py",
      "class": "GPUAccelerator",
      "method": "calculate_technical_indicators",
      "is_async": false,
      "line": 188
    },
    {
      "file": "analysis-engine-service\\tests\\integration\\test_optimized_components_integration.py",
      "class": "PredictiveCacheManager",
      "method": "get_stats",
      "is_async": false,
      "line": 213
    },
    {
      "file": "analysis-engine-service\\tests\\integration\\test_optimized_components_integration.py",
      "class": "CurrencyStrengthAnalyzer",
      "method": "calculate_currency_strength",
      "is_async": false,
      "line": 229
    },
    {
      "file": "analysis-engine-service\\tests\\integration\\test_optimized_components_integration.py",
      "class": "OptimizedConfluenceDetector",
      "method": "analyze_divergence_optimized",
      "is_async": false,
      "line": 261
    },
    {
      "file": "analysis-engine-service\\tests\\integration\\test_optimized_components_integration.py",
      "class": "MockCorrelationService",
      "method": "get_all_correlations",
      "is_async": true,
      "line": 270
    },
    {
      "file": "analysis-engine-service\\tests\\performance\\test_performance_regression.py",
      "class": "MockCorrelationService",
      "method": "get_all_correlations",
      "is_async": true,
      "line": 228
    },
    {
      "file": "analysis-engine-service\\tests\\scheduling\\test_async_mock.py",
      "class": "MockContainer",
      "method": "get_service",
      "is_async": false,
      "line": 101
    },
    {
      "file": "analysis-engine-service\\tests\\utils\\test_client.py",
      "class": "TestClient",
      "method": "analyze_divergence",
      "is_async": true,
      "line": 197
    },
    {
      "file": "analysis-engine-service\\tests\\utils\\test_client.py",
      "class": "TestClient",
      "method": "analyze_divergence_ml",
      "is_async": true,
      "line": 225
    },
    {
      "file": "analysis-engine-service\\tests\\utils\\test_client.py",
      "class": "TestClient",
      "method": "get_currency_strength",
      "is_async": true,
      "line": 309
    },
    {
      "file": "analysis-engine-service\\tests\\utils\\test_client.py",
      "class": "TestClient",
      "method": "get_related_pairs",
      "is_async": true,
      "line": 334
    },
    {
      "file": "analysis-engine-service\\tests\\utils\\test_client.py",
      "class": "TestClient",
      "method": "get_system_status",
      "is_async": true,
      "line": 361
    },
    {
      "file": "analysis-engine-service\\tests\\utils\\test_client.py",
      "class": "TestClient",
      "method": "get_model_info",
      "is_async": true,
      "line": 396
    },
    {
      "file": "analysis-engine-service\\tests\\validation\\test_detection_quality.py",
      "class": "RelatedPairsConfluenceAnalyzer",
      "method": "analyze_divergence",
      "is_async": false,
      "line": 53
    },
    {
      "file": "analysis-engine-service\\tests\\validation\\test_detection_quality.py",
      "class": "OptimizedConfluenceDetector",
      "method": "analyze_divergence_optimized",
      "is_async": false,
      "line": 106
    },
    {
      "file": "analysis-engine-service\\tests\\validation\\test_detection_quality.py",
      "class": "MockCorrelationService",
      "method": "get_all_correlations",
      "is_async": true,
      "line": 118
    },
    {
      "file": "analysis-engine-service\\tests\\validation\\test_detection_quality.py",
      "class": "MockCurrencyStrengthAnalyzer",
      "method": "calculate_currency_strength",
      "is_async": false,
      "line": 146
    }
  ],
  "data-pipeline-service": [
    {
      "file": "data-pipeline-service\\run_direct_test.py",
      "class": "TimeseriesAggregatorTest",
      "method": "create_test_data",
      "is_async": false,
      "line": 29
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\database.py",
      "class": "Database",
      "method": "get_session",
      "is_async": true,
      "line": 95
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\database.py",
      "class": "Database",
      "method": "fetch_all",
      "is_async": true,
      "line": 150
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\database.py",
      "class": "Database",
      "method": "fetch_one",
      "is_async": true,
      "line": 183
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\database.py",
      "class": "Database",
      "method": "fetch_value",
      "is_async": true,
      "line": 218
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\database_standardized.py",
      "class": "Database",
      "method": "get_session",
      "is_async": true,
      "line": 95
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\database_standardized.py",
      "class": "Database",
      "method": "fetch_all",
      "is_async": true,
      "line": 150
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\database_standardized.py",
      "class": "Database",
      "method": "fetch_one",
      "is_async": true,
      "line": 183
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\database_standardized.py",
      "class": "Database",
      "method": "fetch_value",
      "is_async": true,
      "line": 218
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_client",
      "is_async": false,
      "line": 128
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_market_data_client",
      "is_async": false,
      "line": 167
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_feature_store_client",
      "is_async": false,
      "line": 177
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_analysis_engine_client",
      "is_async": false,
      "line": 187
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_trading_client",
      "is_async": false,
      "line": 197
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\service_clients_standardized.py",
      "class": "ServiceClients",
      "method": "get_client",
      "is_async": false,
      "line": 128
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\service_clients_standardized.py",
      "class": "ServiceClients",
      "method": "get_market_data_client",
      "is_async": false,
      "line": 167
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\service_clients_standardized.py",
      "class": "ServiceClients",
      "method": "get_feature_store_client",
      "is_async": false,
      "line": 177
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\service_clients_standardized.py",
      "class": "ServiceClients",
      "method": "get_analysis_engine_client",
      "is_async": false,
      "line": 187
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\service_clients_standardized.py",
      "class": "ServiceClients",
      "method": "get_trading_client",
      "is_async": false,
      "line": 197
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_market_data_provider",
      "is_async": false,
      "line": 47
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_market_data_cache",
      "is_async": false,
      "line": 58
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_analysis_provider",
      "is_async": false,
      "line": 69
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_indicator_provider",
      "is_async": false,
      "line": 80
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_pattern_recognizer",
      "is_async": false,
      "line": 92
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_adapter",
      "is_async": false,
      "line": 104
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "analyze_market",
      "is_async": true,
      "line": 54
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_analysis_types",
      "is_async": true,
      "line": 91
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "calculate_indicator",
      "is_async": true,
      "line": 146
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_indicator_info",
      "is_async": true,
      "line": 182
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_pattern_types",
      "is_async": true,
      "line": 253
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\market_data_adapter.py",
      "class": "MarketDataProviderAdapter",
      "method": "get_historical_data",
      "is_async": true,
      "line": 53
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\market_data_adapter.py",
      "class": "MarketDataProviderAdapter",
      "method": "get_latest_price",
      "is_async": true,
      "line": 108
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\market_data_adapter.py",
      "class": "MarketDataProviderAdapter",
      "method": "get_symbols",
      "is_async": true,
      "line": 144
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\market_data_adapter.py",
      "class": "MarketDataCacheAdapter",
      "method": "get_cached_data",
      "is_async": true,
      "line": 185
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_asset_info",
      "is_async": false,
      "line": 73
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_asset_group",
      "is_async": false,
      "line": 96
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_trading_parameters",
      "is_async": false,
      "line": 107
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "calculate_volatility",
      "is_async": false,
      "line": 147
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_price_levels",
      "is_async": false,
      "line": 172
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_analysis_parameters",
      "is_async": false,
      "line": 197
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\multi_asset_adapter.py",
      "class": "AssetRegistryAdapter",
      "method": "get_asset",
      "is_async": false,
      "line": 273
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\multi_asset_adapter.py",
      "class": "AssetRegistryAdapter",
      "method": "get_correlation",
      "is_async": false,
      "line": 306
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\multi_asset_adapter.py",
      "class": "AssetRegistryAdapter",
      "method": "get_correlated_assets",
      "is_async": false,
      "line": 318
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\multi_asset_adapter.py",
      "class": "AssetRegistryAdapter",
      "method": "get_asset_group",
      "is_async": false,
      "line": 345
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\multi_asset_adapter.py",
      "class": "AssetRegistryAdapter",
      "method": "get_pip_value",
      "is_async": false,
      "line": 359
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\adapters\\multi_asset_adapter.py",
      "class": "AssetRegistryAdapter",
      "method": "get_trading_parameters",
      "is_async": false,
      "line": 373
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\caching\\query_cache.py",
      "class": "QueryCache",
      "method": "get_query_result",
      "is_async": false,
      "line": 70
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\cleaning\\advanced_cleaning_engine.py",
      "class": "CleanedDataResult",
      "method": "get_summary",
      "is_async": false,
      "line": 90
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\cleaning\\advanced_cleaning_engine.py",
      "class": "CleanedDataResult",
      "method": "get_diff_stats",
      "is_async": false,
      "line": 100
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\cleaning\\cleaning_engine.py",
      "class": "DataCleaningEngine",
      "method": "get_imputation_strategy",
      "is_async": false,
      "line": 342
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\cleaning\\cleaning_engine.py",
      "class": "DataCleaningEngine",
      "method": "get_outlier_strategy",
      "is_async": false,
      "line": 364
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\optimization\\connection_pool.py",
      "class": "OptimizedConnectionPool",
      "method": "get_sa_session",
      "is_async": true,
      "line": 132
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\optimization\\connection_pool.py",
      "class": "OptimizedConnectionPool",
      "method": "get_asyncpg_connection",
      "is_async": true,
      "line": 156
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\optimization\\index_manager.py",
      "class": "IndexManager",
      "method": "analyze_table",
      "is_async": true,
      "line": 166
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\batch_feature_processor.py",
      "class": "BatchFeatureProcessor",
      "method": "calculate_features",
      "is_async": true,
      "line": 105
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\batch_feature_processor.py",
      "class": "BatchFeatureProcessor",
      "method": "calculate_features_for_instruments",
      "is_async": true,
      "line": 160
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\batch_feature_processor.py",
      "class": "BatchFeatureProcessor",
      "method": "calculate_features_for_timeframes",
      "is_async": true,
      "line": 219
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\error_handling.py",
      "class": "ErrorAggregator",
      "method": "get_errors_by_category",
      "is_async": false,
      "line": 192
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\error_handling.py",
      "class": "ErrorAggregator",
      "method": "get_errors_by_severity",
      "is_async": false,
      "line": 205
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\error_handling.py",
      "class": "ErrorAggregator",
      "method": "get_most_severe_error",
      "is_async": false,
      "line": 218
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\error_handling.py",
      "class": "ErrorAggregator",
      "method": "get_error_summary",
      "is_async": false,
      "line": 238
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\multi_instrument_processor.py",
      "class": "MultiInstrumentProcessor",
      "method": "process_instruments",
      "is_async": true,
      "line": 59
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\multi_instrument_processor.py",
      "class": "MultiInstrumentProcessor",
      "method": "process_instrument_data",
      "is_async": true,
      "line": 178
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\multi_timeframe_processor.py",
      "class": "MultiTimeframeProcessor",
      "method": "process_timeframes",
      "is_async": true,
      "line": 159
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\multi_timeframe_processor.py",
      "class": "MultiTimeframeProcessor",
      "method": "process_instrument_timeframes",
      "is_async": true,
      "line": 403
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\multi_timeframe_processor.py",
      "class": "MultiTimeframeProcessor",
      "method": "process_multi_instrument_timeframes",
      "is_async": true,
      "line": 457
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\parallel_processing_framework.py",
      "class": "ResourceManager",
      "method": "get_available_workers",
      "is_async": false,
      "line": 109
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\parallel\\parallel_processing_framework.py",
      "class": "ParallelExecutor",
      "method": "execute_tasks",
      "is_async": true,
      "line": 201
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\quality\\market_data_quality_framework.py",
      "class": "MarketDataQualityFramework",
      "method": "validate_ohlcv_data",
      "is_async": false,
      "line": 233
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\quality\\market_data_quality_framework.py",
      "class": "MarketDataQualityFramework",
      "method": "validate_tick_data",
      "is_async": false,
      "line": 301
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\quality\\market_data_quality_framework.py",
      "class": "MarketDataQualityFramework",
      "method": "validate_alternative_data",
      "is_async": false,
      "line": 349
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\quality\\market_data_quality_framework.py",
      "class": "MarketDataQualityFramework",
      "method": "check_sla_breaches",
      "is_async": false,
      "line": 429
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\quality\\market_data_quality_framework.py",
      "class": "MarketDataQualityFramework",
      "method": "get_data_quality_metrics",
      "is_async": false,
      "line": 470
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\quality\\market_data_quality_framework.py",
      "class": "MarketDataQualityFramework",
      "method": "get_data_quality_sla",
      "is_async": false,
      "line": 505
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\quality\\market_data_quality_framework.py",
      "class": "MarketDataQualityFramework",
      "method": "get_data_quality_metrics",
      "is_async": false,
      "line": 566
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\quality\\market_data_quality_framework.py",
      "class": "MarketDataQualityFramework",
      "method": "get_data_quality_sla",
      "is_async": false,
      "line": 611
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\reconciliation\\market_data_reconciliation.py",
      "class": "OHLCVReconciliation",
      "method": "fetch_data",
      "is_async": true,
      "line": 87
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\reconciliation\\market_data_reconciliation.py",
      "class": "TickDataReconciliation",
      "method": "fetch_data",
      "is_async": true,
      "line": 173
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\repositories\\ohlcv_repository.py",
      "class": "OHLCVRepository",
      "method": "fetch_historical_ohlcv",
      "is_async": true,
      "line": 39
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\repositories\\ohlcv_repository.py",
      "class": "OHLCVRepository",
      "method": "fetch_bulk_ohlcv",
      "is_async": true,
      "line": 177
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\repositories\\tick_data_repository.py",
      "class": "TickDataRepository",
      "method": "get_tick_data",
      "is_async": true,
      "line": 38
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\repositories\\tick_repository.py",
      "class": "TickRepository",
      "method": "fetch_tick_data",
      "is_async": true,
      "line": 39
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\repositories\\tick_repository.py",
      "class": "TickRepository",
      "method": "fetch_bulk_tick_data",
      "is_async": true,
      "line": 124
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\repositories\\tick_repository.py",
      "class": "TickRepository",
      "method": "get_latest_tick",
      "is_async": true,
      "line": 176
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\services\\ohlcv_service.py",
      "class": "OHLCVCache",
      "method": "get_cached_data",
      "is_async": true,
      "line": 30
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\services\\ohlcv_service.py",
      "class": "OHLCVService",
      "method": "get_historical_ohlcv",
      "is_async": true,
      "line": 106
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\services\\ohlcv_service.py",
      "class": "OHLCVService",
      "method": "get_multi_instrument_ohlcv",
      "is_async": true,
      "line": 156
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\services\\reconciliation_service.py",
      "class": "ReconciliationService",
      "method": "get_reconciliation_status",
      "is_async": true,
      "line": 193
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\services\\tick_data_service.py",
      "class": "TickDataService",
      "method": "get_tick_data",
      "is_async": true,
      "line": 37
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\services\\tick_data_service.py",
      "class": "TickDataService",
      "method": "validate_tick_data",
      "is_async": false,
      "line": 89
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\base_adapter.py",
      "class": "DataSourceAdapter",
      "method": "get_instruments",
      "is_async": true,
      "line": 45
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\base_adapter.py",
      "class": "DataSourceAdapter",
      "method": "get_account_info",
      "is_async": true,
      "line": 55
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\base_adapter.py",
      "class": "OHLCVDataSourceAdapter",
      "method": "get_ohlcv_data",
      "is_async": true,
      "line": 71
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\base_adapter.py",
      "class": "TickDataSourceAdapter",
      "method": "get_tick_data",
      "is_async": true,
      "line": 101
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\data_fetcher_manager.py",
      "class": "DataFetcherManager",
      "method": "get_adapter",
      "is_async": false,
      "line": 76
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\data_fetcher_manager.py",
      "class": "DataFetcherManager",
      "method": "get_default_ohlcv_adapter",
      "is_async": false,
      "line": 88
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\data_fetcher_manager.py",
      "class": "DataFetcherManager",
      "method": "get_default_tick_adapter",
      "is_async": false,
      "line": 102
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\data_fetcher_manager.py",
      "class": "DataFetcherManager",
      "method": "get_ohlcv_data",
      "is_async": true,
      "line": 149
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\data_fetcher_manager.py",
      "class": "DataFetcherManager",
      "method": "get_tick_data",
      "is_async": true,
      "line": 195
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\data_fetcher_manager.py",
      "class": "DataFetcherManager",
      "method": "get_available_instruments",
      "is_async": true,
      "line": 241
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\data_fetcher_manager.py",
      "class": "DataFetcherManager",
      "method": "fetch_historical_ohlcv",
      "is_async": true,
      "line": 339
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\data_fetcher_manager.py",
      "class": "DataFetcherManager",
      "method": "fetch_tick_data",
      "is_async": true,
      "line": 419
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\dukascopy_adapter.py",
      "class": "DukascopyAdapter",
      "method": "get_instruments",
      "is_async": true,
      "line": 98
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\dukascopy_adapter.py",
      "class": "DukascopyAdapter",
      "method": "get_account_info",
      "is_async": true,
      "line": 114
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\dukascopy_adapter.py",
      "class": "DukascopyAdapter",
      "method": "get_tick_data",
      "is_async": true,
      "line": 220
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\dukascopy_adapter.py",
      "class": "DukascopyAdapter",
      "method": "get_tick_data_objects",
      "is_async": true,
      "line": 323
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\source_adapters\\dukascopy_adapter.py",
      "class": "DukascopyAdapter",
      "method": "get_historical_data",
      "is_async": true,
      "line": 470
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\transformers\\base_transformer.py",
      "class": "BaseMarketDataTransformer",
      "method": "validate_data",
      "is_async": false,
      "line": 56
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\transformers\\base_transformer.py",
      "class": "BaseMarketDataTransformer",
      "method": "get_required_columns",
      "is_async": false,
      "line": 82
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\transformers\\operations\\feature_generation.py",
      "class": "FeatureGenerator",
      "method": "get_required_columns",
      "is_async": false,
      "line": 83
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\transformers\\operations\\normalization.py",
      "class": "DataNormalizer",
      "method": "get_required_columns",
      "is_async": false,
      "line": 76
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\transformers\\operations\\statistical_transforms.py",
      "class": "StatisticalTransformer",
      "method": "get_required_columns",
      "is_async": false,
      "line": 83
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\validation\\advanced_validation_engine.py",
      "class": "DataValidationEngine",
      "method": "validate_data",
      "is_async": false,
      "line": 463
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\validation\\multi_asset_validator.py",
      "class": "MultiAssetValidator",
      "method": "validate_symbol",
      "is_async": false,
      "line": 33
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\validation\\multi_asset_validator.py",
      "class": "MultiAssetValidator",
      "method": "validate_position_data",
      "is_async": false,
      "line": 55
    },
    {
      "file": "data-pipeline-service\\data_pipeline_service\\validation\\multi_asset_validator.py",
      "class": "MultiAssetValidator",
      "method": "validate_market_data",
      "is_async": false,
      "line": 101
    },
    {
      "file": "data-pipeline-service\\tests\\mocks\\mock_monitoring.py",
      "class": "AlertManager",
      "method": "send_alert",
      "is_async": false,
      "line": 44
    },
    {
      "file": "data-pipeline-service\\tests\\mocks\\common_lib\\monitoring\\__init__.py",
      "class": "AlertManager",
      "method": "send_alert",
      "is_async": false,
      "line": 44
    }
  ],
  "feature-store-service": [
    {
      "file": "feature-store-service\\feature_store_service\\dependency_tracking.py",
      "class": "DependencyTracker",
      "method": "get_prerequisites",
      "is_async": false,
      "line": 52
    },
    {
      "file": "feature-store-service\\feature_store_service\\dependency_tracking.py",
      "class": "DependencyTracker",
      "method": "get_dependents",
      "is_async": false,
      "line": 64
    },
    {
      "file": "feature-store-service\\feature_store_service\\dependency_tracking.py",
      "class": "DependencyTracker",
      "method": "get_calculation_order",
      "is_async": false,
      "line": 104
    },
    {
      "file": "feature-store-service\\feature_store_service\\dependency_tracking.py",
      "class": "DependencyTracker",
      "method": "get_last_updated",
      "is_async": false,
      "line": 122
    },
    {
      "file": "feature-store-service\\feature_store_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_client",
      "is_async": false,
      "line": 34
    },
    {
      "file": "feature-store-service\\feature_store_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_market_data_client",
      "is_async": false,
      "line": 86
    },
    {
      "file": "feature-store-service\\feature_store_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_data_pipeline_client",
      "is_async": false,
      "line": 95
    },
    {
      "file": "feature-store-service\\feature_store_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_analysis_engine_client",
      "is_async": false,
      "line": 104
    },
    {
      "file": "feature-store-service\\feature_store_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_trading_client",
      "is_async": false,
      "line": 113
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_feature_provider",
      "is_async": false,
      "line": 106
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_feature_store",
      "is_async": false,
      "line": 117
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_feature_generator",
      "is_async": false,
      "line": 128
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_analysis_provider",
      "is_async": false,
      "line": 139
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_indicator_provider",
      "is_async": false,
      "line": 153
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_pattern_recognizer",
      "is_async": false,
      "line": 167
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_adapter",
      "is_async": false,
      "line": 181
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\advanced_indicator_adapter.py",
      "class": "AdvancedIndicatorAdapter",
      "method": "get_column_names",
      "is_async": false,
      "line": 120
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\advanced_indicator_adapter.py",
      "class": "FibonacciAnalyzerAdapter",
      "method": "calculate_retracements",
      "is_async": false,
      "line": 163
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\advanced_indicator_adapter.py",
      "class": "FibonacciAnalyzerAdapter",
      "method": "calculate_extensions",
      "is_async": false,
      "line": 196
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\advanced_indicator_adapter.py",
      "class": "FibonacciAnalyzerAdapter",
      "method": "calculate_arcs",
      "is_async": false,
      "line": 232
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\advanced_indicator_adapter.py",
      "class": "FibonacciAnalyzerAdapter",
      "method": "calculate_fans",
      "is_async": false,
      "line": 264
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\advanced_indicator_adapter.py",
      "class": "FibonacciAnalyzerAdapter",
      "method": "calculate_time_zones",
      "is_async": false,
      "line": 296
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "analyze_market",
      "is_async": true,
      "line": 54
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_analysis_types",
      "is_async": true,
      "line": 91
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "calculate_indicator",
      "is_async": true,
      "line": 146
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_indicator_info",
      "is_async": true,
      "line": 182
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_pattern_types",
      "is_async": true,
      "line": 253
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\ml_integration_adapter.py",
      "class": "MLFeatureConsumerAdapter",
      "method": "get_required_features",
      "is_async": false,
      "line": 48
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\ml_integration_adapter.py",
      "class": "MLFeatureConsumerAdapter",
      "method": "get_feature_importance_feedback",
      "is_async": false,
      "line": 120
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\service_adapters.py",
      "class": "FeatureProviderAdapter",
      "method": "get_feature",
      "is_async": true,
      "line": 46
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\service_adapters.py",
      "class": "FeatureProviderAdapter",
      "method": "get_features",
      "is_async": true,
      "line": 71
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\service_adapters.py",
      "class": "FeatureProviderAdapter",
      "method": "get_available_features",
      "is_async": true,
      "line": 97
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\service_adapters.py",
      "class": "FeatureProviderAdapter",
      "method": "get_feature_metadata",
      "is_async": true,
      "line": 113
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\service_adapters.py",
      "class": "FeatureStoreAdapter",
      "method": "delete_feature",
      "is_async": true,
      "line": 179
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\service_adapters.py",
      "class": "FeatureStoreAdapter",
      "method": "update_feature_metadata",
      "is_async": true,
      "line": 201
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\service_adapters.py",
      "class": "FeatureGeneratorAdapter",
      "method": "get_available_generators",
      "is_async": true,
      "line": 271
    },
    {
      "file": "feature-store-service\\feature_store_service\\adapters\\service_adapters.py",
      "class": "FeatureGeneratorAdapter",
      "method": "get_generator_parameters",
      "is_async": true,
      "line": 288
    },
    {
      "file": "feature-store-service\\feature_store_service\\caching\\base_cache.py",
      "class": "BaseCache",
      "method": "get_stats",
      "is_async": false,
      "line": 69
    },
    {
      "file": "feature-store-service\\feature_store_service\\caching\\cache_metrics.py",
      "class": "CacheMetrics",
      "method": "get_metrics_dict",
      "is_async": false,
      "line": 116
    },
    {
      "file": "feature-store-service\\feature_store_service\\caching\\disk_cache.py",
      "class": "DiskCache",
      "method": "get_stats",
      "is_async": false,
      "line": 299
    },
    {
      "file": "feature-store-service\\feature_store_service\\caching\\enhanced_cache_aware_indicator_service.py",
      "class": "EnhancedCacheAwareIndicatorService",
      "method": "calculate_indicator",
      "is_async": true,
      "line": 66
    },
    {
      "file": "feature-store-service\\feature_store_service\\caching\\enhanced_cache_aware_indicator_service.py",
      "class": "EnhancedCacheAwareIndicatorService",
      "method": "calculate_batch",
      "is_async": true,
      "line": 117
    },
    {
      "file": "feature-store-service\\feature_store_service\\caching\\enhanced_cache_aware_indicator_service.py",
      "class": "EnhancedCacheAwareIndicatorService",
      "method": "get_cache_stats",
      "is_async": true,
      "line": 147
    },
    {
      "file": "feature-store-service\\feature_store_service\\caching\\enhanced_cache_manager.py",
      "class": "EnhancedCacheManager",
      "method": "get_intermediate_result",
      "is_async": true,
      "line": 156
    },
    {
      "file": "feature-store-service\\feature_store_service\\caching\\enhanced_cache_manager.py",
      "class": "EnhancedCacheManager",
      "method": "get_stats",
      "is_async": true,
      "line": 230
    },
    {
      "file": "feature-store-service\\feature_store_service\\caching\\enhanced_cache_manager.py",
      "class": "EnhancedCacheManager",
      "method": "update_price_data",
      "is_async": false,
      "line": 307
    },
    {
      "file": "feature-store-service\\feature_store_service\\caching\\indicator_cache.py",
      "class": "IndicatorCache",
      "method": "get_indicator",
      "is_async": false,
      "line": 66
    },
    {
      "file": "feature-store-service\\feature_store_service\\caching\\memory_cache.py",
      "class": "LRUCache",
      "method": "get_stats",
      "is_async": false,
      "line": 172
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "PerformanceMonitor",
      "method": "get_all_metrics",
      "is_async": false,
      "line": 70
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "PerformanceMonitor",
      "method": "get_function_metrics",
      "is_async": false,
      "line": 74
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "PerformanceMonitor",
      "method": "get_slowest_functions",
      "is_async": false,
      "line": 79
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "IncrementalIndicator",
      "method": "get_value",
      "is_async": false,
      "line": 199
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "IncrementalIndicator",
      "method": "get_values",
      "is_async": false,
      "line": 205
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "IncrementalMACDGenerator",
      "method": "get_values",
      "is_async": false,
      "line": 438
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "ParallelIndicatorCalculator",
      "method": "calculate_indicators",
      "is_async": false,
      "line": 580
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "IndicatorManager",
      "method": "create_indicator",
      "is_async": false,
      "line": 627
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "IndicatorManager",
      "method": "calculate_all",
      "is_async": false,
      "line": 660
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "IndicatorManager",
      "method": "update_all",
      "is_async": false,
      "line": 697
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "IndicatorManager",
      "method": "get_indicator",
      "is_async": false,
      "line": 720
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "IndicatorManager",
      "method": "load_all_states",
      "is_async": false,
      "line": 766
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental_calculator.py",
      "class": "IndicatorManager",
      "method": "get_performance_metrics",
      "is_async": false,
      "line": 819
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\parallel_indicator_processor.py",
      "class": "ParallelIndicatorProcessor",
      "method": "process_dataframe",
      "is_async": false,
      "line": 100
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\parallel_indicator_processor.py",
      "class": "ParallelIndicatorProcessor",
      "method": "process_batch",
      "is_async": false,
      "line": 428
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\parallel_indicator_processor.py",
      "class": "ParallelIndicatorProcessor",
      "method": "get_dependent_indicators",
      "is_async": false,
      "line": 587
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\parallel_indicator_processor.py",
      "class": "ParallelIndicatorProcessor",
      "method": "get_prerequisites",
      "is_async": false,
      "line": 599
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental\\base_incremental.py",
      "class": "IncrementalIndicator",
      "method": "get_output_columns",
      "is_async": false,
      "line": 76
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental\\base_incremental.py",
      "class": "IncrementalIndicator",
      "method": "get_state",
      "is_async": false,
      "line": 85
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental\\indicator_service.py",
      "class": "IncrementalIndicatorService",
      "method": "get_or_initialize_indicator",
      "is_async": true,
      "line": 53
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental\\indicator_service.py",
      "class": "IncrementalIndicatorService",
      "method": "update_indicator",
      "is_async": true,
      "line": 104
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental\\indicator_service.py",
      "class": "IncrementalIndicatorService",
      "method": "update_all_indicators_for_symbol",
      "is_async": true,
      "line": 141
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental\\indicator_service.py",
      "class": "IncrementalIndicatorService",
      "method": "load_all_saved_states",
      "is_async": true,
      "line": 252
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental\\indicator_service.py",
      "class": "IncrementalIndicatorService",
      "method": "get_all_active_indicators",
      "is_async": false,
      "line": 300
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental\\moving_averages.py",
      "class": "IncrementalSMA",
      "method": "get_output_columns",
      "is_async": false,
      "line": 114
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental\\moving_averages.py",
      "class": "IncrementalEMA",
      "method": "get_output_columns",
      "is_async": false,
      "line": 205
    },
    {
      "file": "feature-store-service\\feature_store_service\\computation\\incremental\\moving_averages.py",
      "class": "IncrementalMACD",
      "method": "get_output_columns",
      "is_async": false,
      "line": 332
    },
    {
      "file": "feature-store-service\\feature_store_service\\core\\feature_store.py",
      "class": "FeatureStore",
      "method": "calculate_features",
      "is_async": true,
      "line": 60
    },
    {
      "file": "feature-store-service\\feature_store_service\\error\\error_manager.py",
      "class": "IndicatorErrorManager",
      "method": "get_error_summary",
      "is_async": false,
      "line": 219
    },
    {
      "file": "feature-store-service\\feature_store_service\\error\\monitoring_service.py",
      "class": "ErrorMonitoringService",
      "method": "get_error_patterns",
      "is_async": false,
      "line": 153
    },
    {
      "file": "feature-store-service\\feature_store_service\\error\\monitoring_service.py",
      "class": "ErrorMonitoringService",
      "method": "get_diagnostic_metrics",
      "is_async": false,
      "line": 175
    },
    {
      "file": "feature-store-service\\feature_store_service\\error\\monitoring_service.py",
      "class": "ErrorMonitoringService",
      "method": "analyze_trends",
      "is_async": false,
      "line": 196
    },
    {
      "file": "feature-store-service\\feature_store_service\\error\\recovery_service.py",
      "class": "RecoveryStrategy",
      "method": "update_stats",
      "is_async": false,
      "line": 43
    },
    {
      "file": "feature-store-service\\feature_store_service\\error\\recovery_service.py",
      "class": "ErrorRecoveryService",
      "method": "get_statistics",
      "is_async": false,
      "line": 329
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental_indicators.py",
      "class": "IncrementalIndicatorManager",
      "method": "update_all",
      "is_async": false,
      "line": 385
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental_indicators.py",
      "class": "IncrementalIndicatorManager",
      "method": "get_latest_values",
      "is_async": false,
      "line": 411
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\indicator_registry.py",
      "class": "IndicatorRegistry",
      "method": "get_indicator",
      "is_async": false,
      "line": 60
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\indicator_registry.py",
      "class": "IndicatorRegistry",
      "method": "get_all_indicators",
      "is_async": false,
      "line": 72
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\indicator_registry.py",
      "class": "IndicatorRegistry",
      "method": "get_indicators_by_category",
      "is_async": false,
      "line": 81
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\indicator_registry.py",
      "class": "IndicatorRegistry",
      "method": "get_categories",
      "is_async": false,
      "line": 96
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\indicator_registry.py",
      "class": "IndicatorRegistry",
      "method": "create_indicator",
      "is_async": false,
      "line": 109
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\indicator_registry.py",
      "class": "IndicatorRegistry",
      "method": "validate_parameters",
      "is_async": false,
      "line": 131
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\indicator_selection.py",
      "class": "IndicatorPerformanceMetrics",
      "method": "calculate_metrics",
      "is_async": false,
      "line": 70
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\indicator_selection.py",
      "class": "IndicatorSelectionEngine",
      "method": "update_performance",
      "is_async": false,
      "line": 382
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\ml_integration.py",
      "class": "FeatureExtractor",
      "method": "load_normalization_params",
      "is_async": false,
      "line": 210
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\ml_integration.py",
      "class": "FeatureSelector",
      "method": "get_feature_importances",
      "is_async": false,
      "line": 355
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\ml_integration.py",
      "class": "IndicatorMLFeedback",
      "method": "update_model_performance",
      "is_async": false,
      "line": 495
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\ml_integration.py",
      "class": "IndicatorMLFeedback",
      "method": "get_indicator_importance_trend",
      "is_async": false,
      "line": 513
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\ml_integration.py",
      "class": "IndicatorMLFeedback",
      "method": "load_history",
      "is_async": false,
      "line": 547
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\ml_integration.py",
      "class": "ModelInputPreparation",
      "method": "load_preparation_config",
      "is_async": false,
      "line": 746
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\performance_enhanced_indicator.py",
      "class": "PerformanceEnhancedIndicator",
      "method": "get_performance_metrics",
      "is_async": false,
      "line": 195
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced\\enhanced_obv.py",
      "class": "EnhancedOBVIndicator",
      "method": "get_obv_analysis",
      "is_async": false,
      "line": 314
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced\\enhanced_sma.py",
      "class": "EnhancedSMA",
      "method": "get_params",
      "is_async": false,
      "line": 104
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced\\enhanced_volume_profile.py",
      "class": "EnhancedVolumeProfile",
      "method": "get_params",
      "is_async": false,
      "line": 199
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced\\fourier_analysis.py",
      "class": "FourierAnalysisIndicator",
      "method": "get_cycle_forecast",
      "is_async": false,
      "line": 358
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced\\fourier_analysis.py",
      "class": "FourierAnalysisIndicator",
      "method": "get_cycle_visualization_data",
      "is_async": false,
      "line": 461
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced\\seasonal_analysis.py",
      "class": "SeasonalAnalysisIndicator",
      "method": "get_seasonal_forecast",
      "is_async": false,
      "line": 263
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced\\seasonal_analysis.py",
      "class": "SeasonalAnalysisIndicator",
      "method": "get_seasonal_visualization_data",
      "is_async": false,
      "line": 338
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced\\timeframe_confluence.py",
      "class": "TimeframeConfluenceIndicator",
      "method": "get_visual_analysis_data",
      "is_async": false,
      "line": 375
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced\\volume_profile.py",
      "class": "VolumeProfileIndicator",
      "method": "get_profile_visualization_data",
      "is_async": false,
      "line": 336
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced\\volume_profile.py",
      "class": "VolumeProfileIndicator",
      "method": "get_volume_profile_analysis",
      "is_async": false,
      "line": 366
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced\\volume_zone_oscillator.py",
      "class": "AdvancedVZOIndicator",
      "method": "get_vzo_analysis",
      "is_async": false,
      "line": 322
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced\\volume_zone_oscillator.py",
      "class": "AdvancedVZOIndicator",
      "method": "get_vzo_visualization_data",
      "is_async": false,
      "line": 430
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\advanced_patterns\\facade.py",
      "class": "AdvancedPatternFacade",
      "method": "get_supported_patterns",
      "is_async": false,
      "line": 190
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\chart_patterns\\facade.py",
      "class": "HarmonicPatternFinder",
      "method": "get_supported_patterns",
      "is_async": false,
      "line": 579
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\chart_patterns\\facade.py",
      "class": "CandlestickPatterns",
      "method": "get_supported_patterns",
      "is_async": false,
      "line": 832
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\degraded\\base.py",
      "class": null,
      "method": "get_degraded_metadata",
      "is_async": false,
      "line": 139
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\degraded\\base.py",
      "class": "AdaptiveComplexityIndicator",
      "method": "calculate_degraded",
      "is_async": false,
      "line": 206
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\gann\\legacy_adapters.py",
      "class": "GannAngles",
      "method": "calculate_angles",
      "is_async": false,
      "line": 41
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\gann\\legacy_adapters.py",
      "class": "GannSquare9",
      "method": "calculate_levels",
      "is_async": false,
      "line": 105
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\gann\\legacy_adapters.py",
      "class": "GannSquare9",
      "method": "get_cardinal_levels",
      "is_async": false,
      "line": 157
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\gann\\legacy_adapters.py",
      "class": "GannSquare9",
      "method": "get_support_resistance_levels",
      "is_async": false,
      "line": 186
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\gann\\legacy_adapters.py",
      "class": "GannFan",
      "method": "calculate_fan",
      "is_async": false,
      "line": 239
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\base.py",
      "class": "IncrementalIndicator",
      "method": "get_state",
      "is_async": false,
      "line": 62
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\base.py",
      "class": "ValueWindowIndicator",
      "method": "get_state",
      "is_async": false,
      "line": 175
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\base.py",
      "class": "StatefulIndicator",
      "method": "get_state",
      "is_async": false,
      "line": 233
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\base.py",
      "class": "CompositeIndicator",
      "method": "get_state",
      "is_async": false,
      "line": 460
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\moving_averages.py",
      "class": "SMA",
      "method": "get_state",
      "is_async": false,
      "line": 89
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\moving_averages.py",
      "class": "MACD",
      "method": "get_state",
      "is_async": false,
      "line": 342
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\processor.py",
      "class": "IncrementalProcessor",
      "method": "update_many",
      "is_async": false,
      "line": 235
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\processor.py",
      "class": "IncrementalProcessor",
      "method": "get_indicator",
      "is_async": false,
      "line": 254
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\processor.py",
      "class": "IncrementalProcessor",
      "method": "get_state",
      "is_async": false,
      "line": 266
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\processor.py",
      "class": "IncrementalProcessor",
      "method": "calculate_all",
      "is_async": false,
      "line": 315
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\processor.py",
      "class": "StreamingIndicatorProcessor",
      "method": "process_tick",
      "is_async": false,
      "line": 427
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\processor.py",
      "class": "StreamingIndicatorProcessor",
      "method": "load_state",
      "is_async": false,
      "line": 487
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\incremental\\processor.py",
      "class": "StreamingIndicatorProcessor",
      "method": "get_status",
      "is_async": false,
      "line": 523
    },
    {
      "file": "feature-store-service\\feature_store_service\\indicators\\testing\\performance_testing.py",
      "class": "IndicatorPerformanceBenchmark",
      "method": "load_results",
      "is_async": false,
      "line": 225
    },
    {
      "file": "feature-store-service\\feature_store_service\\monitoring\\indicator_monitoring.py",
      "class": "IndicatorMonitoring",
      "method": "get_monitoring_report",
      "is_async": false,
      "line": 101
    },
    {
      "file": "feature-store-service\\feature_store_service\\monitoring\\performance_monitoring.py",
      "class": "FeatureStoreMonitoring",
      "method": "get_metrics",
      "is_async": false,
      "line": 38
    },
    {
      "file": "feature-store-service\\feature_store_service\\monitoring\\performance_monitoring.py",
      "class": "FeatureStoreMonitoring",
      "method": "get_health_status",
      "is_async": false,
      "line": 42
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\advanced_calculation.py",
      "class": "IncrementalCalculator",
      "method": "create_calculation",
      "is_async": false,
      "line": 57
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\advanced_calculation.py",
      "class": "IncrementalCalculator",
      "method": "update_calculation",
      "is_async": false,
      "line": 76
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\advanced_calculation.py",
      "class": "SmartCache",
      "method": "get_stats",
      "is_async": false,
      "line": 275
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\advanced_calculation.py",
      "class": "PreAggregator",
      "method": "get_aggregated_data",
      "is_async": false,
      "line": 358
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\advanced_calculation.py",
      "class": "PreAggregator",
      "method": "update_aggregated_data",
      "is_async": false,
      "line": 373
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\effectiveness_optimizer.py",
      "class": "EffectivenessBasedOptimizer",
      "method": "get_optimization_stats",
      "is_async": false,
      "line": 305
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\effectiveness_optimizer.py",
      "class": "AdaptiveIndicatorWrapper",
      "method": "get_value",
      "is_async": false,
      "line": 407
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\effectiveness_optimizer.py",
      "class": "AdaptiveIndicatorWrapper",
      "method": "get_current_params",
      "is_async": false,
      "line": 415
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\load_balancing.py",
      "class": "ResourceMonitor",
      "method": "get_optimal_executor_count",
      "is_async": false,
      "line": 199
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\load_balancing.py",
      "class": "LoadBalancer",
      "method": "get_task_result",
      "is_async": false,
      "line": 381
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\memory_optimization.py",
      "class": "HistoricalDataManager",
      "method": "get_metadata",
      "is_async": false,
      "line": 233
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\memory_optimization.py",
      "class": "HistoricalDataManager",
      "method": "get_storage_stats",
      "is_async": false,
      "line": 445
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\performance_optimizer.py",
      "class": "PerformanceOptimizer",
      "method": "analyze_performance",
      "is_async": false,
      "line": 103
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\resource_manager.py",
      "class": "ResourceMetrics",
      "method": "get_summary",
      "is_async": false,
      "line": 52
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\resource_manager.py",
      "class": "LoadBalancer",
      "method": "get_executor",
      "is_async": false,
      "line": 94
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\resource_manager.py",
      "class": "LoadBalancer",
      "method": "get_active_tasks",
      "is_async": false,
      "line": 142
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\resource_manager.py",
      "class": "CacheManager",
      "method": "get_stats",
      "is_async": false,
      "line": 252
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\resource_manager.py",
      "class": "AdaptiveResourceManager",
      "method": "get_system_status",
      "is_async": false,
      "line": 324
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\time_series_optimizer.py",
      "class": "TimeSeriesQueryOptimizer",
      "method": "validate_table_name",
      "is_async": false,
      "line": 408
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\time_series_optimizer.py",
      "class": "TimeSeriesQueryOptimizer",
      "method": "validate_column_name",
      "is_async": false,
      "line": 423
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\time_series_optimizer.py",
      "class": "TimeSeriesQueryOptimizer",
      "method": "validate_columns",
      "is_async": false,
      "line": 438
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\time_series_optimizer.py",
      "class": "TimeSeriesQueryOptimizer",
      "method": "validate_time_bucket",
      "is_async": false,
      "line": 454
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\time_series_optimizer.py",
      "class": "TimeSeriesQueryOptimizer",
      "method": "get_timescale_continuous_aggregates",
      "is_async": false,
      "line": 482
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\time_series_optimizer.py",
      "class": "TimeSeriesQueryOptimizer",
      "method": "query_continuous_aggregate",
      "is_async": false,
      "line": 513
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\time_series_query_optimizer.py",
      "class": "TimeSeriesQueryOptimizer",
      "method": "query_time_series",
      "is_async": false,
      "line": 62
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\time_series_query_optimizer.py",
      "class": "TimeSeriesQueryOptimizer",
      "method": "get_optimized_time_ranges",
      "is_async": false,
      "line": 163
    },
    {
      "file": "feature-store-service\\feature_store_service\\optimization\\time_series_query_optimizer.py",
      "class": "TimeSeriesQueryOptimizer",
      "method": "get_performance_stats",
      "is_async": false,
      "line": 222
    },
    {
      "file": "feature-store-service\\feature_store_service\\reconciliation\\feature_reconciliation.py",
      "class": "FeatureVersionReconciliation",
      "method": "fetch_data",
      "is_async": true,
      "line": 74
    },
    {
      "file": "feature-store-service\\feature_store_service\\reconciliation\\feature_reconciliation.py",
      "class": "FeatureDataReconciliation",
      "method": "fetch_data",
      "is_async": true,
      "line": 140
    },
    {
      "file": "feature-store-service\\feature_store_service\\recovery\\integrated_recovery.py",
      "class": "IntegratedRecoverySystem",
      "method": "get_recovery_summary",
      "is_async": false,
      "line": 295
    },
    {
      "file": "feature-store-service\\feature_store_service\\reliability\\reliability_manager.py",
      "class": "ReliabilityManager",
      "method": "get_system_health",
      "is_async": false,
      "line": 144
    },
    {
      "file": "feature-store-service\\feature_store_service\\repositories\\feature_repository.py",
      "class": "FeatureRepository",
      "method": "get_feature_values",
      "is_async": true,
      "line": 124
    },
    {
      "file": "feature-store-service\\feature_store_service\\repositories\\feature_repository.py",
      "class": "FeatureRepository",
      "method": "get_feature_metadata",
      "is_async": true,
      "line": 215
    },
    {
      "file": "feature-store-service\\feature_store_service\\repositories\\feature_repository.py",
      "class": "FeatureRepository",
      "method": "delete_feature_values",
      "is_async": true,
      "line": 253
    },
    {
      "file": "feature-store-service\\feature_store_service\\scheduling\\feature_scheduler.py",
      "class": "FeatureComputationScheduler",
      "method": "create_schedule",
      "is_async": true,
      "line": 104
    },
    {
      "file": "feature-store-service\\feature_store_service\\scheduling\\feature_scheduler.py",
      "class": "FeatureComputationScheduler",
      "method": "update_schedule",
      "is_async": true,
      "line": 142
    },
    {
      "file": "feature-store-service\\feature_store_service\\scheduling\\feature_scheduler.py",
      "class": "FeatureComputationScheduler",
      "method": "delete_schedule",
      "is_async": true,
      "line": 165
    },
    {
      "file": "feature-store-service\\feature_store_service\\scheduling\\feature_scheduler.py",
      "class": "FeatureComputationScheduler",
      "method": "get_schedule",
      "is_async": true,
      "line": 184
    },
    {
      "file": "feature-store-service\\feature_store_service\\scheduling\\scheduler.py",
      "class": "ComputationScheduler",
      "method": "update_job",
      "is_async": true,
      "line": 441
    },
    {
      "file": "feature-store-service\\feature_store_service\\scheduling\\scheduler.py",
      "class": "ComputationScheduler",
      "method": "delete_job",
      "is_async": true,
      "line": 503
    },
    {
      "file": "feature-store-service\\feature_store_service\\scheduling\\scheduler.py",
      "class": "ComputationScheduler",
      "method": "get_job",
      "is_async": true,
      "line": 573
    },
    {
      "file": "feature-store-service\\feature_store_service\\scheduling\\scheduler.py",
      "class": "ComputationScheduler",
      "method": "get_all_jobs",
      "is_async": true,
      "line": 613
    },
    {
      "file": "feature-store-service\\feature_store_service\\scheduling\\scheduler.py",
      "class": "ComputationScheduler",
      "method": "get_job_history",
      "is_async": true,
      "line": 651
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\enhanced_indicator_service.py",
      "class": "EnhancedIndicatorService",
      "method": "calculate_indicator_async",
      "is_async": true,
      "line": 66
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\enhanced_indicator_service.py",
      "class": "EnhancedIndicatorService",
      "method": "calculate_indicator",
      "is_async": false,
      "line": 120
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\enhanced_indicator_service.py",
      "class": "EnhancedIndicatorService",
      "method": "calculate_multiple_indicators_async",
      "is_async": true,
      "line": 150
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\enhanced_indicator_service.py",
      "class": "EnhancedIndicatorService",
      "method": "calculate_multiple_indicators",
      "is_async": false,
      "line": 222
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\enhanced_indicator_service.py",
      "class": "EnhancedIndicatorService",
      "method": "get_available_indicators",
      "is_async": false,
      "line": 250
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\enhanced_indicator_service.py",
      "class": "EnhancedIndicatorService",
      "method": "get_indicator_metadata",
      "is_async": false,
      "line": 259
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\enhanced_indicator_service.py",
      "class": "EnhancedIndicatorService",
      "method": "get_cache_stats_async",
      "is_async": true,
      "line": 271
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\enhanced_indicator_service.py",
      "class": "EnhancedIndicatorService",
      "method": "get_cache_stats",
      "is_async": false,
      "line": 276
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\enhanced_indicator_service.py",
      "class": "EnhancedIndicatorService",
      "method": "create_common_indicator_set",
      "is_async": false,
      "line": 361
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\enhanced_indicator_service.py",
      "class": "EnhancedIndicatorService",
      "method": "get_feature_vectors",
      "is_async": false,
      "line": 437
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\enhanced_indicator_service.py",
      "class": "EnhancedIndicatorService",
      "method": "get_feature_metadata",
      "is_async": false,
      "line": 484
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\incremental_processor.py",
      "class": "RealTimeFeatureProcessor",
      "method": "process_tick",
      "is_async": false,
      "line": 163
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\incremental_processor.py",
      "class": "RealTimeFeatureProcessor",
      "method": "get_latest_indicators",
      "is_async": false,
      "line": 224
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\incremental_processor.py",
      "class": "LatencyMonitor",
      "method": "get_latency_report",
      "is_async": false,
      "line": 439
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\indicator_service.py",
      "class": "IndicatorService",
      "method": "calculate_indicator",
      "is_async": false,
      "line": 43
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\indicator_service.py",
      "class": "IndicatorService",
      "method": "calculate_multiple_indicators",
      "is_async": false,
      "line": 81
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\indicator_service.py",
      "class": "IndicatorService",
      "method": "get_available_indicators",
      "is_async": false,
      "line": 111
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\indicator_service.py",
      "class": "IndicatorService",
      "method": "get_indicator_metadata",
      "is_async": false,
      "line": 120
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\indicator_service.py",
      "class": "IndicatorService",
      "method": "get_feature_vectors",
      "is_async": false,
      "line": 187
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\indicator_service.py",
      "class": "IndicatorService",
      "method": "get_feature_metadata",
      "is_async": false,
      "line": 220
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\indicator_service.py",
      "class": "IndicatorService",
      "method": "create_common_indicator_set",
      "is_async": false,
      "line": 270
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\indicator_service.py",
      "class": "IndicatorService",
      "method": "calculate_time_series_transform",
      "is_async": false,
      "line": 319
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\indicator_service.py",
      "class": "IndicatorService",
      "method": "get_feature_vectors",
      "is_async": false,
      "line": 362
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\indicator_service.py",
      "class": "IndicatorService",
      "method": "get_feature_metadata",
      "is_async": false,
      "line": 420
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\reconciliation_service.py",
      "class": "ReconciliationService",
      "method": "get_reconciliation_status",
      "is_async": true,
      "line": 192
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\time_series_data_service.py",
      "class": "TimeSeriesDataService",
      "method": "get_price_data",
      "is_async": true,
      "line": 44
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\time_series_data_service.py",
      "class": "TimeSeriesDataService",
      "method": "get_indicator_data",
      "is_async": true,
      "line": 78
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\time_series_data_service.py",
      "class": "TimeSeriesDataService",
      "method": "get_multi_symbol_data",
      "is_async": true,
      "line": 125
    },
    {
      "file": "feature-store-service\\feature_store_service\\services\\time_series_data_service.py",
      "class": "TimeSeriesDataService",
      "method": "get_optimizer_statistics",
      "is_async": false,
      "line": 222
    },
    {
      "file": "feature-store-service\\feature_store_service\\storage\\feature_storage.py",
      "class": "FeatureStorage",
      "method": "check_connection",
      "is_async": false,
      "line": 127
    },
    {
      "file": "feature-store-service\\feature_store_service\\storage\\feature_storage.py",
      "class": "FeatureStorage",
      "method": "get_indicator_data",
      "is_async": true,
      "line": 294
    },
    {
      "file": "feature-store-service\\feature_store_service\\storage\\feature_storage.py",
      "class": "FeatureStorage",
      "method": "get_latest_indicator_values",
      "is_async": true,
      "line": 402
    },
    {
      "file": "feature-store-service\\feature_store_service\\storage\\feature_storage.py",
      "class": "FeatureStorage",
      "method": "fetch_historical_data",
      "is_async": true,
      "line": 517
    },
    {
      "file": "feature-store-service\\feature_store_service\\storage\\timeseries_optimized_queries.py",
      "class": "TimeSeriesQueryOptimizer",
      "method": "execute_optimized_query",
      "is_async": true,
      "line": 136
    },
    {
      "file": "feature-store-service\\feature_store_service\\storage\\time_series_index_optimizer.py",
      "class": "TimeSeriesIndexManager",
      "method": "create_time_index",
      "is_async": true,
      "line": 139
    },
    {
      "file": "feature-store-service\\feature_store_service\\storage\\time_series_index_optimizer.py",
      "class": "TimeSeriesIndexManager",
      "method": "get_optimal_query_plan",
      "is_async": false,
      "line": 313
    },
    {
      "file": "feature-store-service\\feature_store_service\\storage\\time_series_index_optimizer.py",
      "class": "TimeSeriesIndexManager",
      "method": "get_query_statistics",
      "is_async": true,
      "line": 492
    },
    {
      "file": "feature-store-service\\feature_store_service\\storage\\time_series_index_optimizer.py",
      "class": "TimeSeriesIndexManager",
      "method": "analyze_time_patterns",
      "is_async": true,
      "line": 545
    },
    {
      "file": "feature-store-service\\feature_store_service\\storage\\time_series_query_optimizer.py",
      "class": "TimeSeriesQueryOptimizer",
      "method": "get_cached_result",
      "is_async": false,
      "line": 72
    },
    {
      "file": "feature-store-service\\feature_store_service\\storage\\time_series_query_optimizer.py",
      "class": "TimeSeriesQueryOptimizer",
      "method": "get_query_statistics",
      "is_async": false,
      "line": 131
    },
    {
      "file": "feature-store-service\\feature_store_service\\verification\\multi_level_verifier.py",
      "class": "MultiLevelVerifier",
      "method": "get_verification_summary",
      "is_async": false,
      "line": 199
    },
    {
      "file": "feature-store-service\\feature_store_service\\verification\\signal_filter.py",
      "class": "SignalFilter",
      "method": "get_filter_summary",
      "is_async": false,
      "line": 305
    },
    {
      "file": "feature-store-service\\tests\\performance\\test_indicator_performance.py",
      "class": "IncrementalTEMA",
      "method": "calculate_incremental",
      "is_async": false,
      "line": 273
    }
  ],
  "ml-integration-service": [
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "BaseRepository",
      "method": "get_by_id",
      "is_async": false,
      "line": 127
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "BaseRepository",
      "method": "get_by_id_async",
      "is_async": true,
      "line": 140
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "BaseRepository",
      "method": "get_all",
      "is_async": false,
      "line": 156
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "BaseRepository",
      "method": "get_all_async",
      "is_async": true,
      "line": 168
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "BaseRepository",
      "method": "create_async",
      "is_async": true,
      "line": 197
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "BaseRepository",
      "method": "update_async",
      "is_async": true,
      "line": 232
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "BaseRepository",
      "method": "delete_async",
      "is_async": true,
      "line": 270
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "MLModelRepository",
      "method": "get_by_name_and_version",
      "is_async": false,
      "line": 374
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "MLModelRepository",
      "method": "get_by_name_and_version_async",
      "is_async": true,
      "line": 390
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "MLModelVersionRepository",
      "method": "get_by_model_id_and_version",
      "is_async": false,
      "line": 415
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "MLModelVersionRepository",
      "method": "get_by_model_id_and_version_async",
      "is_async": true,
      "line": 431
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "MLModelDeploymentRepository",
      "method": "get_by_model_version_id_and_environment",
      "is_async": false,
      "line": 456
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\database.py",
      "class": "MLModelDeploymentRepository",
      "method": "get_by_model_version_id_and_environment_async",
      "is_async": true,
      "line": 472
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\feature_importance.py",
      "class": "FeatureImportanceAnalyzer",
      "method": "get_combined_importance",
      "is_async": false,
      "line": 338
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\feature_importance.py",
      "class": "FeatureImportanceAnalyzer",
      "method": "load_results",
      "is_async": false,
      "line": 488
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\model_connector.py",
      "class": "ModelRegistry",
      "method": "get_model",
      "is_async": false,
      "line": 186
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\model_connector.py",
      "class": "FeedbackCollector",
      "method": "get_indicator_performance",
      "is_async": false,
      "line": 351
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\model_connector.py",
      "class": "ModelConnector",
      "method": "update_feature_data",
      "is_async": false,
      "line": 485
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_client",
      "is_async": false,
      "line": 108
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_ml_workbench_client",
      "is_async": false,
      "line": 147
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_analysis_engine_client",
      "is_async": false,
      "line": 157
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_strategy_execution_client",
      "is_async": false,
      "line": 167
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\service_clients_standardized.py",
      "class": "ServiceClients",
      "method": "get_client",
      "is_async": false,
      "line": 108
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\service_clients_standardized.py",
      "class": "ServiceClients",
      "method": "get_ml_workbench_client",
      "is_async": false,
      "line": 147
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\service_clients_standardized.py",
      "class": "ServiceClients",
      "method": "get_analysis_engine_client",
      "is_async": false,
      "line": 157
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\service_clients_standardized.py",
      "class": "ServiceClients",
      "method": "get_strategy_execution_client",
      "is_async": false,
      "line": 167
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineClientAdapter",
      "method": "get_market_data",
      "is_async": true,
      "line": 53
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineClientAdapter",
      "method": "get_technical_indicators",
      "is_async": true,
      "line": 80
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineClientAdapter",
      "method": "get_market_regime",
      "is_async": true,
      "line": 97
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineClientAdapter",
      "method": "get_support_resistance_levels",
      "is_async": true,
      "line": 113
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\feature_store_adapter.py",
      "class": "FeatureProviderAdapter",
      "method": "get_available_features",
      "is_async": false,
      "line": 54
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\feature_store_adapter.py",
      "class": "FeatureProviderAdapter",
      "method": "get_feature_data",
      "is_async": false,
      "line": 72
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\feature_store_adapter.py",
      "class": "FeatureProviderAdapter",
      "method": "get_feature_metadata",
      "is_async": false,
      "line": 297
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\feature_store_adapter.py",
      "class": "FeatureTransformerAdapter",
      "method": "load_state",
      "is_async": false,
      "line": 485
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\feature_store_adapter.py",
      "class": "FeatureSelectorAdapter",
      "method": "get_feature_importances",
      "is_async": false,
      "line": 582
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\feature_store_adapter.py",
      "class": "FeatureSelectorAdapter",
      "method": "load_state",
      "is_async": false,
      "line": 620
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\prediction_service_adapter.py",
      "class": "PredictionServiceAdapter",
      "method": "get_prediction",
      "is_async": true,
      "line": 49
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\prediction_service_adapter.py",
      "class": "PredictionServiceAdapter",
      "method": "get_batch_predictions",
      "is_async": true,
      "line": 77
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\prediction_service_adapter.py",
      "class": "PredictionServiceAdapter",
      "method": "get_model_metadata",
      "is_async": true,
      "line": 108
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\adapters\\prediction_service_adapter.py",
      "class": "SignalGeneratorAdapter",
      "method": "get_model_performance",
      "is_async": true,
      "line": 212
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\caching\\feature_vector_cache.py",
      "class": "FeatureVectorCache",
      "method": "get_feature_vector",
      "is_async": false,
      "line": 67
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\chat\\ml_model_connector.py",
      "class": "MLModelConnector",
      "method": "get_market_analysis",
      "is_async": true,
      "line": 53
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\chat\\ml_model_connector.py",
      "class": "MLModelConnector",
      "method": "get_price_forecast",
      "is_async": true,
      "line": 107
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\chat\\ml_model_connector.py",
      "class": "MLModelConnector",
      "method": "get_trading_recommendation",
      "is_async": true,
      "line": 149
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\chat\\user_preference_manager.py",
      "class": "UserPreferenceManager",
      "method": "get_user_preferences",
      "is_async": true,
      "line": 59
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\chat\\user_preference_manager.py",
      "class": "UserPreferenceManager",
      "method": "update_user_preferences",
      "is_async": true,
      "line": 87
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\chat\\user_preference_manager.py",
      "class": "UserPreferenceManager",
      "method": "update_preference",
      "is_async": true,
      "line": 119
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\chat\\user_preference_manager.py",
      "class": "UserPreferenceManager",
      "method": "get_preference",
      "is_async": true,
      "line": 249
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\chat\\user_preference_manager.py",
      "class": "UserPreferenceManager",
      "method": "get_all_users",
      "is_async": true,
      "line": 298
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\clients\\analysis_engine_client.py",
      "class": "AnalysisEngineClient",
      "method": "get_technical_indicators",
      "is_async": true,
      "line": 49
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\clients\\analysis_engine_client.py",
      "class": "AnalysisEngineClient",
      "method": "analyze_market_conditions",
      "is_async": true,
      "line": 119
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\clients\\analysis_engine_client.py",
      "class": "AnalysisEngineClient",
      "method": "get_multi_timeframe_analysis",
      "is_async": true,
      "line": 149
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\clients\\ml_workbench_client.py",
      "class": "MLWorkbenchClient",
      "method": "get_models",
      "is_async": true,
      "line": 47
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\clients\\ml_workbench_client.py",
      "class": "MLWorkbenchClient",
      "method": "get_model",
      "is_async": true,
      "line": 79
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\clients\\ml_workbench_client.py",
      "class": "MLWorkbenchClient",
      "method": "create_model",
      "is_async": true,
      "line": 100
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\clients\\ml_workbench_client.py",
      "class": "MLWorkbenchClient",
      "method": "get_training_status",
      "is_async": true,
      "line": 159
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\clients\\ml_workbench_client.py",
      "class": "MLWorkbenchClient",
      "method": "get_model_metrics",
      "is_async": true,
      "line": 212
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\feedback\\adapter.py",
      "class": "ModelAdapter",
      "method": "get_adaptation_history",
      "is_async": false,
      "line": 98
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\feedback\\analyzer.py",
      "class": "FeedbackAnalyzer",
      "method": "analyze_adaptation_needs",
      "is_async": false,
      "line": 72
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\feedback\\analyzer.py",
      "class": "FeedbackAnalyzer",
      "method": "get_performance_trend",
      "is_async": false,
      "line": 102
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\monitoring\\adaptation_metrics.py",
      "class": "AdaptationMetricsCollector",
      "method": "update_performance_metrics",
      "is_async": false,
      "line": 105
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\reconciliation\\model_data_reconciliation.py",
      "class": "TrainingDataReconciliation",
      "method": "fetch_data",
      "is_async": true,
      "line": 74
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\reconciliation\\model_data_reconciliation.py",
      "class": "InferenceDataReconciliation",
      "method": "fetch_data",
      "is_async": true,
      "line": 153
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\repositories\\model_repository.py",
      "class": "ModelRepository",
      "method": "get_model_training_data",
      "is_async": true,
      "line": 29
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\repositories\\model_repository.py",
      "class": "ModelRepository",
      "method": "get_training_dataset",
      "is_async": true,
      "line": 56
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\repositories\\model_repository.py",
      "class": "ModelRepository",
      "method": "get_model_inference_data",
      "is_async": true,
      "line": 75
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\repositories\\model_repository.py",
      "class": "ModelRepository",
      "method": "update_model_training_data",
      "is_async": true,
      "line": 110
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\repositories\\model_repository.py",
      "class": "ModelRepository",
      "method": "update_model_inference_data",
      "is_async": true,
      "line": 146
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\repositories\\reconciliation_repository.py",
      "class": "ReconciliationRepository",
      "method": "create_reconciliation_process",
      "is_async": true,
      "line": 42
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\repositories\\reconciliation_repository.py",
      "class": "ReconciliationRepository",
      "method": "update_reconciliation_process",
      "is_async": true,
      "line": 85
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\repositories\\reconciliation_repository.py",
      "class": "ReconciliationRepository",
      "method": "get_reconciliation_process",
      "is_async": true,
      "line": 136
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\services\\data_service.py",
      "class": "DataService",
      "method": "get_model_performance_data",
      "is_async": true,
      "line": 28
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\services\\data_service.py",
      "class": "DataService",
      "method": "get_feature_importance",
      "is_async": true,
      "line": 48
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\services\\data_service.py",
      "class": "DataService",
      "method": "get_regime_performance",
      "is_async": true,
      "line": 59
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\services\\data_service.py",
      "class": "DataService",
      "method": "get_historical_parameters",
      "is_async": true,
      "line": 74
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\services\\data_service.py",
      "class": "DataService",
      "method": "get_test_market_data",
      "is_async": true,
      "line": 90
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\services\\data_service.py",
      "class": "DataService",
      "method": "get_model_predictions",
      "is_async": true,
      "line": 104
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\services\\feature_service.py",
      "class": "FeatureService",
      "method": "get_cached_training_data",
      "is_async": true,
      "line": 45
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\services\\feature_service.py",
      "class": "FeatureService",
      "method": "get_cached_inference_data",
      "is_async": true,
      "line": 90
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\services\\feature_service.py",
      "class": "FeatureService",
      "method": "update_cached_training_data",
      "is_async": true,
      "line": 142
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\services\\feature_service.py",
      "class": "FeatureService",
      "method": "update_cached_inference_data",
      "is_async": true,
      "line": 191
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\services\\reconciliation_service.py",
      "class": "ReconciliationService",
      "method": "get_reconciliation_status",
      "is_async": true,
      "line": 317
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\strategy_filters\\ml_confirmation_filter.py",
      "class": "MLConfirmationFilter",
      "method": "update_performance",
      "is_async": false,
      "line": 292
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\strategy_filters\\ml_confirmation_filter.py",
      "class": "MLConfirmationFilter",
      "method": "get_performance_metrics",
      "is_async": false,
      "line": 392
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\strategy_optimizers\\ml_confirmation_filter.py",
      "class": "MLConfirmationFilter",
      "method": "update_performance",
      "is_async": false,
      "line": 292
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\strategy_optimizers\\ml_confirmation_filter.py",
      "class": "MLConfirmationFilter",
      "method": "get_performance_metrics",
      "is_async": false,
      "line": 392
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\stress_testing\\model_stress_tester.py",
      "class": "SensitivityAnalyzer",
      "method": "analyze_parameter_sensitivity",
      "is_async": false,
      "line": 144
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\stress_testing\\model_stress_tester.py",
      "class": "SensitivityAnalyzer",
      "method": "analyze_input_sensitivity",
      "is_async": false,
      "line": 172
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\validation\\data_validator.py",
      "class": "DataValidator",
      "method": "validate_training_data",
      "is_async": false,
      "line": 22
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\validation\\data_validator.py",
      "class": "DataValidator",
      "method": "validate_inference_data",
      "is_async": false,
      "line": 61
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\validation\\data_validator.py",
      "class": "DataValidator",
      "method": "validate_feature_data",
      "is_async": false,
      "line": 100
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\visualization\\model_performance_viz.py",
      "class": "ModelPerformanceVisualizer",
      "method": "create_performance_dashboard",
      "is_async": false,
      "line": 20
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\visualization\\model_performance_viz.py",
      "class": "ModelPerformanceVisualizer",
      "method": "create_feature_importance_view",
      "is_async": false,
      "line": 51
    },
    {
      "file": "ml-integration-service\\ml_integration_service\\visualization\\model_performance_viz.py",
      "class": "ModelPerformanceVisualizer",
      "method": "create_prediction_confidence_view",
      "is_async": false,
      "line": 106
    }
  ],
  "ml-workbench-service": [
    {
      "file": "ml-workbench-service\\ml_workbench_service\\database.py",
      "class": "BaseRepository",
      "method": "get_by_id",
      "is_async": true,
      "line": 151
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\database.py",
      "class": "BaseRepository",
      "method": "get_all",
      "is_async": true,
      "line": 165
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\database.py",
      "class": "BaseRepository",
      "method": "execute_query",
      "is_async": true,
      "line": 256
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\rl_model_factory.py",
      "class": "RLModelFactory",
      "method": "create_model",
      "is_async": false,
      "line": 59
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\rl_model_factory.py",
      "class": "RLModelFactory",
      "method": "load_model",
      "is_async": false,
      "line": 159
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\rl_model_factory.py",
      "class": "RLModelFactory",
      "method": "create_ensemble",
      "is_async": false,
      "line": 196
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\rl_model_factory.py",
      "class": "RLModelFactory",
      "method": "get_supported_algorithms",
      "is_async": false,
      "line": 227
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "FeatureStoreServiceClient",
      "method": "get_feature_set",
      "is_async": true,
      "line": 310
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "FeatureStoreServiceClient",
      "method": "create_feature_set",
      "is_async": true,
      "line": 340
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "FeatureStoreServiceClient",
      "method": "update_feature_set",
      "is_async": true,
      "line": 353
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "FeatureStoreServiceClient",
      "method": "delete_feature_set",
      "is_async": true,
      "line": 368
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "FeatureStoreServiceClient",
      "method": "get_feature_values",
      "is_async": true,
      "line": 380
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "AnalysisEngineServiceClient",
      "method": "get_analysis",
      "is_async": true,
      "line": 419
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "AnalysisEngineServiceClient",
      "method": "create_analysis",
      "is_async": true,
      "line": 449
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "AnalysisEngineServiceClient",
      "method": "update_analysis",
      "is_async": true,
      "line": 462
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "AnalysisEngineServiceClient",
      "method": "delete_analysis",
      "is_async": true,
      "line": 476
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "DataPipelineServiceClient",
      "method": "get_pipeline",
      "is_async": true,
      "line": 522
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "DataPipelineServiceClient",
      "method": "create_pipeline",
      "is_async": true,
      "line": 552
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "DataPipelineServiceClient",
      "method": "update_pipeline",
      "is_async": true,
      "line": 565
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "DataPipelineServiceClient",
      "method": "delete_pipeline",
      "is_async": true,
      "line": 579
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "DataPipelineServiceClient",
      "method": "get_pipeline_status",
      "is_async": true,
      "line": 606
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "TradingGatewayServiceClient",
      "method": "get_account",
      "is_async": true,
      "line": 641
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "TradingGatewayServiceClient",
      "method": "get_positions",
      "is_async": true,
      "line": 671
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\service_clients.py",
      "class": "TradingGatewayServiceClient",
      "method": "get_order",
      "is_async": true,
      "line": 695
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_adapters.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_technical_analysis",
      "is_async": true,
      "line": 45
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_adapters.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_confluence_analysis",
      "is_async": true,
      "line": 102
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_adapters.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_multi_timeframe_analysis",
      "is_async": true,
      "line": 133
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_adapters.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_integrated_analysis",
      "is_async": true,
      "line": 174
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_adapters.py",
      "class": "MarketRegimeAnalyzerAdapter",
      "method": "get_regime_probabilities",
      "is_async": true,
      "line": 283
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_adapters.py",
      "class": "MarketRegimeAnalyzerAdapter",
      "method": "get_regime_transition_probability",
      "is_async": true,
      "line": 317
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_adapters.py",
      "class": "MultiAssetAnalyzerAdapter",
      "method": "get_correlated_assets",
      "is_async": true,
      "line": 379
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_adapters.py",
      "class": "MultiAssetAnalyzerAdapter",
      "method": "get_currency_strength",
      "is_async": true,
      "line": 422
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_adapters.py",
      "class": "MultiAssetAnalyzerAdapter",
      "method": "get_cross_pair_opportunities",
      "is_async": true,
      "line": 451
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_engine_adapter.py",
      "class": "MarketRegimeAnalyzerAdapter",
      "method": "get_regime_history",
      "is_async": true,
      "line": 72
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_engine_adapter.py",
      "class": "MarketRegimeAnalyzerAdapter",
      "method": "get_regime_transition_probabilities",
      "is_async": true,
      "line": 92
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_engine_adapter.py",
      "class": "PatternRecognitionServiceAdapter",
      "method": "get_pattern_statistics",
      "is_async": true,
      "line": 149
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_engine_adapter.py",
      "class": "TechnicalAnalysisServiceAdapter",
      "method": "calculate_indicators",
      "is_async": true,
      "line": 191
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_engine_adapter.py",
      "class": "TechnicalAnalysisServiceAdapter",
      "method": "get_indicator_signals",
      "is_async": true,
      "line": 207
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\analysis_engine_adapter.py",
      "class": "TechnicalAnalysisServiceAdapter",
      "method": "get_indicator_performance",
      "is_async": true,
      "line": 223
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\risk_adapters.py",
      "class": "RiskManagerAdapter",
      "method": "check_order",
      "is_async": true,
      "line": 61
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\risk_adapters.py",
      "class": "RiskManagerAdapter",
      "method": "check_risk_limits",
      "is_async": true,
      "line": 155
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\risk_adapters.py",
      "class": "RiskManagerAdapter",
      "method": "get_portfolio_metrics",
      "is_async": true,
      "line": 192
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\risk_optimizer_adapter.py",
      "class": "RiskParameterOptimizerAdapter",
      "method": "update_rl_models",
      "is_async": true,
      "line": 175
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\risk_optimizer_adapter.py",
      "class": "RiskParameterOptimizerAdapter",
      "method": "get_adjustment_history",
      "is_async": false,
      "line": 190
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\simulation_adapters.py",
      "class": "MarketRegimeSimulatorAdapter",
      "method": "get_current_regime",
      "is_async": false,
      "line": 44
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\simulation_adapters.py",
      "class": "MarketRegimeSimulatorAdapter",
      "method": "get_all_regimes",
      "is_async": false,
      "line": 63
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\simulation_adapters.py",
      "class": "MarketRegimeSimulatorAdapter",
      "method": "get_regime_probabilities",
      "is_async": false,
      "line": 79
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\simulation_adapters.py",
      "class": "MarketRegimeSimulatorAdapter",
      "method": "get_regime_history",
      "is_async": false,
      "line": 103
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\simulation_adapters.py",
      "class": "BrokerSimulatorAdapter",
      "method": "get_current_price",
      "is_async": false,
      "line": 158
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\simulation_adapters.py",
      "class": "BrokerSimulatorAdapter",
      "method": "get_account_summary",
      "is_async": false,
      "line": 185
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\simulation_adapters.py",
      "class": "BrokerSimulatorAdapter",
      "method": "get_positions",
      "is_async": false,
      "line": 238
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\trading_feedback_adapter.py",
      "class": "TradingFeedbackCollectorAdapter",
      "method": "get_feedback_history",
      "is_async": true,
      "line": 89
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\trading_feedback_adapter.py",
      "class": "ModelTrainingFeedbackIntegratorAdapter",
      "method": "process_trading_feedback",
      "is_async": true,
      "line": 168
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\adapters\\trading_feedback_adapter.py",
      "class": "ModelTrainingFeedbackIntegratorAdapter",
      "method": "get_model_performance_metrics",
      "is_async": true,
      "line": 217
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\clients\\feature_store_client.py",
      "class": "FeatureStoreClient",
      "method": "get_ohlcv_data",
      "is_async": false,
      "line": 113
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\clients\\feature_store_client.py",
      "class": "FeatureStoreClient",
      "method": "get_indicators",
      "is_async": false,
      "line": 157
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\clients\\feature_store_client.py",
      "class": "FeatureStoreClient",
      "method": "get_available_indicators",
      "is_async": false,
      "line": 208
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\clients\\ml_prediction_client.py",
      "class": "MLPredictionClient",
      "method": "get_prediction",
      "is_async": false,
      "line": 52
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\clients\\ml_prediction_client.py",
      "class": "MLPredictionClient",
      "method": "get_available_models",
      "is_async": false,
      "line": 104
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\clients\\ml_prediction_client.py",
      "class": "MLPredictionClient",
      "method": "get_model_info",
      "is_async": false,
      "line": 123
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\clients\\transfer_learning_client.py",
      "class": "TransferLearningClient",
      "method": "create_transfer_model",
      "is_async": false,
      "line": 150
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\config\\mlflow_config.py",
      "class": "MLflowSettings",
      "method": "get_environment_config",
      "is_async": false,
      "line": 34
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\config\\mlflow_config.py",
      "class": "MLflowSettings",
      "method": "update_from_env",
      "is_async": false,
      "line": 70
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\config\\standardized_config.py",
      "class": "MLWorkbenchSettings",
      "method": "validate_db_settings",
      "is_async": false,
      "line": 170
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\effectiveness\\rl_tool_effectiveness.py",
      "class": "RLToolEffectiveness",
      "method": "update_effectiveness_metrics",
      "is_async": false,
      "line": 163
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\effectiveness\\rl_tool_effectiveness.py",
      "class": "RLToolEffectiveness",
      "method": "analyze_action_patterns",
      "is_async": false,
      "line": 219
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\effectiveness\\rl_tool_effectiveness.py",
      "class": "RLToolEffectiveness",
      "method": "analyze_regime_performance",
      "is_async": false,
      "line": 278
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\effectiveness\\rl_tool_effectiveness.py",
      "class": "RLToolEffectiveness",
      "method": "calculate_effectiveness_decay",
      "is_async": false,
      "line": 338
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\feedback\\model_training_feedback.py",
      "class": "ModelPerformanceTracker",
      "method": "update_metrics",
      "is_async": false,
      "line": 79
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\feedback\\model_training_feedback.py",
      "class": "ModelPerformanceTracker",
      "method": "calculate_performance_change",
      "is_async": false,
      "line": 194
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\feedback\\model_training_feedback.py",
      "class": "ModelPerformanceTracker",
      "method": "get_metrics",
      "is_async": false,
      "line": 228
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\feedback\\model_training_feedback.py",
      "class": "ModelTrainingFeedbackIntegrator",
      "method": "process_trading_feedback",
      "is_async": true,
      "line": 290
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\feedback\\model_training_feedback.py",
      "class": "ModelTrainingFeedbackIntegrator",
      "method": "get_model_performance_metrics",
      "is_async": true,
      "line": 419
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\feedback\\model_training_feedback.py",
      "class": "ModelTrainingFeedbackIntegrator",
      "method": "process_feedback",
      "is_async": true,
      "line": 444
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\feedback\\model_training_feedback.py",
      "class": "ModelTrainingFeedbackIntegrator",
      "method": "get_model_performance",
      "is_async": false,
      "line": 598
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\feedback\\model_training_feedback.py",
      "class": "ModelTrainingFeedbackIntegrator",
      "method": "get_all_model_statuses",
      "is_async": false,
      "line": 615
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\forex_lstm_model.py",
      "class": "ForexLSTMModel",
      "method": "create_sequences",
      "is_async": false,
      "line": 126
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\forex_lstm_model.py",
      "class": "ForexLSTMModel",
      "method": "get_metadata",
      "is_async": false,
      "line": 517
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\multitask\\multitask_model.py",
      "class": "MultitaskModel",
      "method": "calculate_feature_importance",
      "is_async": false,
      "line": 311
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\curriculum_learning.py",
      "class": "CurriculumLearningFramework",
      "method": "create_environment",
      "is_async": false,
      "line": 182
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\curriculum_learning.py",
      "class": "CurriculumLearningFramework",
      "method": "load_model",
      "is_async": false,
      "line": 470
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\curriculum_learning.py",
      "class": "DistributedCurriculumTrainer",
      "method": "create_parallel_scenarios",
      "is_async": false,
      "line": 809
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\enhanced_rl_env.py",
      "class": "EnhancedForexTradingEnv",
      "method": "get_episode_summary",
      "is_async": false,
      "line": 586
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\rl_agent.py",
      "class": "ForexTradingEnvironment",
      "method": "get_statistics",
      "is_async": false,
      "line": 302
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\rl_agent.py",
      "class": "RLAgent",
      "method": "update_target_model",
      "is_async": false,
      "line": 512
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\rl_risk_optimizer.py",
      "class": "RLRiskParameterOptimizer",
      "method": "get_adjustment_history",
      "is_async": false,
      "line": 292
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\rl_risk_optimizer.py",
      "class": "RLRiskParameterOptimizer",
      "method": "update_rl_models",
      "is_async": true,
      "line": 319
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\environment\\base_environment.py",
      "class": "BaseRLEnvironment",
      "method": "get_episode_summary",
      "is_async": false,
      "line": 174
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\environment\\forex_environment.py",
      "class": "ForexTradingEnvironment",
      "method": "get_episode_summary",
      "is_async": false,
      "line": 534
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\environment\\reward\\base_reward.py",
      "class": "CompositeReward",
      "method": "get_component_values",
      "is_async": false,
      "line": 99
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\environment\\reward\\base_reward.py",
      "class": "CompositeReward",
      "method": "get_component_history",
      "is_async": false,
      "line": 116
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\environment\\state\\state_representation.py",
      "class": "StateRepresentation",
      "method": "get_state",
      "is_async": false,
      "line": 47
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\models\\reinforcement\\environment\\state\\state_representation.py",
      "class": "StateRepresentation",
      "method": "get_feature_slice",
      "is_async": false,
      "line": 75
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\model_metadata.py",
      "class": "ModelMetadata",
      "method": "get_version",
      "is_async": false,
      "line": 49
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\model_metrics.py",
      "class": "ModelMetrics",
      "method": "get_metric",
      "is_async": false,
      "line": 45
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "get_model_metadata",
      "is_async": false,
      "line": 163
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "load_model",
      "is_async": false,
      "line": 241
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "load_artifact",
      "is_async": false,
      "line": 299
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "update_model_version_stage",
      "is_async": false,
      "line": 362
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "update_model_version_metrics",
      "is_async": false,
      "line": 401
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "delete_model_version",
      "is_async": false,
      "line": 434
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "delete_model",
      "is_async": false,
      "line": 482
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "get_ab_test",
      "is_async": false,
      "line": 766
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "update_ab_test",
      "is_async": false,
      "line": 821
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\registry.py",
      "class": "ModelMetrics",
      "method": "get_primary_metric",
      "is_async": false,
      "line": 78
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\registry.py",
      "class": "ModelRegistry",
      "method": "create_model_version",
      "is_async": false,
      "line": 317
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\registry.py",
      "class": "ModelRegistry",
      "method": "get_model_metadata",
      "is_async": false,
      "line": 414
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\registry.py",
      "class": "ModelRegistry",
      "method": "get_model_version",
      "is_async": false,
      "line": 437
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\registry.py",
      "class": "ModelRegistry",
      "method": "delete_model",
      "is_async": false,
      "line": 581
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\registry.py",
      "class": "ModelRegistry",
      "method": "delete_version",
      "is_async": false,
      "line": 612
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\registry.py",
      "class": "ModelRegistry",
      "method": "get_best_version",
      "is_async": false,
      "line": 729
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\registry.py",
      "class": "ModelRegistry",
      "method": "load_model_artifact",
      "is_async": false,
      "line": 761
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\model_registry\\registry.py",
      "class": "ModelRegistry",
      "method": "update_version_metrics",
      "is_async": false,
      "line": 779
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\optimization\\ml_pipeline_integrator.py",
      "class": "MLPipelineIntegrator",
      "method": "create_automated_optimization_pipeline",
      "is_async": false,
      "line": 684
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\reinforcement\\simulation_rl_adapter.py",
      "class": "SimulationRLAdapter",
      "method": "get_state",
      "is_async": false,
      "line": 121
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "create_dataset",
      "is_async": true,
      "line": 28
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "get_dataset",
      "is_async": true,
      "line": 44
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "create_experiment",
      "is_async": true,
      "line": 71
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "update_experiment",
      "is_async": true,
      "line": 90
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "get_experiment",
      "is_async": true,
      "line": 108
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "create_training_run",
      "is_async": true,
      "line": 176
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "update_training_run",
      "is_async": true,
      "line": 192
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "get_training_run",
      "is_async": true,
      "line": 208
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "create_model",
      "is_async": true,
      "line": 244
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "update_model",
      "is_async": true,
      "line": 263
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "get_model",
      "is_async": true,
      "line": 281
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "create_prediction",
      "is_async": true,
      "line": 329
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\repositories\\experiment_repository.py",
      "class": "ExperimentRepository",
      "method": "get_prediction",
      "is_async": true,
      "line": 345
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\auto_optimization_framework.py",
      "class": "OptimizationService",
      "method": "create_optimizer",
      "is_async": false,
      "line": 612
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\auto_optimization_framework.py",
      "class": "OptimizationService",
      "method": "create_hyperparameter_optimizer",
      "is_async": false,
      "line": 629
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\auto_optimization_framework.py",
      "class": "OptimizationService",
      "method": "get_optimization_result",
      "is_async": false,
      "line": 666
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\dataset_preparation.py",
      "class": "DatasetPreparation",
      "method": "load_ohlcv_data",
      "is_async": false,
      "line": 51
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\dataset_preparation.py",
      "class": "DatasetPreparation",
      "method": "create_features",
      "is_async": false,
      "line": 98
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\dataset_preparation.py",
      "class": "DatasetPreparation",
      "method": "create_train_test_split",
      "is_async": false,
      "line": 259
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\dataset_service.py",
      "class": "DatasetService",
      "method": "create_dataset",
      "is_async": true,
      "line": 50
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\dataset_service.py",
      "class": "DatasetService",
      "method": "get_dataset",
      "is_async": true,
      "line": 66
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\dataset_service.py",
      "class": "DatasetService",
      "method": "load_dataset",
      "is_async": true,
      "line": 135
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\dataset_service.py",
      "class": "DatasetService",
      "method": "get_feature_statistics",
      "is_async": true,
      "line": 189
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\dataset_service.py",
      "class": "DatasetService",
      "method": "get_available_features",
      "is_async": true,
      "line": 217
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\experiment_service.py",
      "class": "ExperimentService",
      "method": "create_dataset_from_feature_store",
      "is_async": true,
      "line": 60
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\experiment_service.py",
      "class": "ExperimentService",
      "method": "get_dataset",
      "is_async": true,
      "line": 156
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\experiment_service.py",
      "class": "ExperimentService",
      "method": "load_dataset_data",
      "is_async": true,
      "line": 194
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\experiment_service.py",
      "class": "ExperimentService",
      "method": "create_experiment",
      "is_async": true,
      "line": 223
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\experiment_service.py",
      "class": "ExperimentService",
      "method": "get_experiment",
      "is_async": true,
      "line": 275
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\experiment_service.py",
      "class": "ExperimentService",
      "method": "update_experiment",
      "is_async": true,
      "line": 310
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\experiment_service.py",
      "class": "ExperimentService",
      "method": "create_training_run",
      "is_async": true,
      "line": 333
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\experiment_service.py",
      "class": "ExperimentService",
      "method": "get_training_run",
      "is_async": true,
      "line": 373
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\experiment_service.py",
      "class": "ExperimentService",
      "method": "update_training_run",
      "is_async": true,
      "line": 407
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\experiment_service.py",
      "class": "ExperimentService",
      "method": "create_model",
      "is_async": true,
      "line": 458
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\experiment_service.py",
      "class": "ExperimentService",
      "method": "get_model",
      "is_async": true,
      "line": 512
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\experiment_service.py",
      "class": "ExperimentService",
      "method": "update_model",
      "is_async": true,
      "line": 550
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\feature_importance_analyzer.py",
      "class": "FeatureImportanceAnalyzer",
      "method": "analyze_feature_importance",
      "is_async": false,
      "line": 83
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\feature_importance_analyzer.py",
      "class": "FeatureInteractionAnalyzer",
      "method": "analyze_feature_interactions",
      "is_async": false,
      "line": 369
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\model_drift_detector.py",
      "class": "ModelDriftDetector",
      "method": "analyze_drift",
      "is_async": false,
      "line": 97
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\model_drift_detector.py",
      "class": "ModelDriftDetector",
      "method": "check_for_retraining_triggers",
      "is_async": false,
      "line": 362
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "create_model_version",
      "is_async": true,
      "line": 84
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "get_model_details",
      "is_async": true,
      "line": 151
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "get_version_details",
      "is_async": true,
      "line": 206
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "update_version_status",
      "is_async": true,
      "line": 343
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "get_best_version",
      "is_async": true,
      "line": 396
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "delete_model",
      "is_async": true,
      "line": 472
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\model_registry_service.py",
      "class": "ModelRegistryService",
      "method": "delete_version",
      "is_async": true,
      "line": 500
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\model_retraining_service.py",
      "class": "ModelRetrainingService",
      "method": "get_retraining_job",
      "is_async": true,
      "line": 269
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\model_serving_engine.py",
      "class": "ModelServingEngine",
      "method": "load_model",
      "is_async": false,
      "line": 69
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\model_serving_engine.py",
      "class": "ModelServingEngine",
      "method": "get_model_info",
      "is_async": false,
      "line": 217
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\training_pipeline_orchestrator.py",
      "class": "TrainingPipelineOrchestrator",
      "method": "get_best_model_run",
      "is_async": false,
      "line": 520
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\transfer_learning_service.py",
      "class": "TransferLearningService",
      "method": "get_available_models",
      "is_async": false,
      "line": 104
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\services\\transfer_learning_service.py",
      "class": "TransferLearningService",
      "method": "create_transfer_model",
      "is_async": false,
      "line": 166
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\transfer_learning\\model.py",
      "class": "ModelFeatureTransformer",
      "method": "get_transfer_similarity",
      "is_async": false,
      "line": 113
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\transfer_learning\\model.py",
      "class": "TransferLearningModel",
      "method": "load_source_model",
      "is_async": false,
      "line": 181
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\transfer_learning\\model.py",
      "class": "TransferLearningFactory",
      "method": "create_transfer_model",
      "is_async": false,
      "line": 320
    },
    {
      "file": "ml-workbench-service\\ml_workbench_service\\visualization\\advanced_learning_ui.py",
      "class": "TrainingProgressDashboard",
      "method": "update_plots",
      "is_async": false,
      "line": 492
    },
    {
      "file": "ml-workbench-service\\tests\\models\\reinforcement\\test_news_sentiment_integration.py",
      "class": "MockForexBrokerSimulator",
      "method": "get_historical_data",
      "is_async": false,
      "line": 46
    },
    {
      "file": "ml-workbench-service\\tests\\models\\reinforcement\\test_news_sentiment_integration.py",
      "class": "MockForexBrokerSimulator",
      "method": "get_current_price",
      "is_async": false,
      "line": 61
    },
    {
      "file": "ml-workbench-service\\tests\\models\\reinforcement\\test_news_sentiment_integration.py",
      "class": "MockForexBrokerSimulator",
      "method": "get_price_change",
      "is_async": false,
      "line": 65
    },
    {
      "file": "ml-workbench-service\\tests\\models\\reinforcement\\test_news_sentiment_integration.py",
      "class": "MockForexBrokerSimulator",
      "method": "get_available_times",
      "is_async": false,
      "line": 73
    },
    {
      "file": "ml-workbench-service\\tests\\models\\reinforcement\\test_news_sentiment_integration.py",
      "class": "MockForexBrokerSimulator",
      "method": "execute_order",
      "is_async": false,
      "line": 78
    },
    {
      "file": "ml-workbench-service\\tests\\models\\reinforcement\\test_news_sentiment_integration.py",
      "class": "MockForexBrokerSimulator",
      "method": "get_order_book",
      "is_async": false,
      "line": 94
    }
  ],
  "monitoring-alerting-service": [
    {
      "file": "monitoring-alerting-service\\alerts\\indicator_alerts.py",
      "class": "AlertManager",
      "method": "get_alert",
      "is_async": false,
      "line": 341
    },
    {
      "file": "monitoring-alerting-service\\alerts\\indicator_alerts.py",
      "class": "AlertManager",
      "method": "get_alerts",
      "is_async": false,
      "line": 363
    },
    {
      "file": "monitoring-alerting-service\\alerts\\indicator_alerts.py",
      "class": "AlertManager",
      "method": "delete_alert",
      "is_async": false,
      "line": 437
    },
    {
      "file": "monitoring-alerting-service\\alerts\\indicator_alerts.py",
      "class": "AlertGenerator",
      "method": "check_indicator_value",
      "is_async": false,
      "line": 914
    },
    {
      "file": "monitoring-alerting-service\\alerts\\indicator_alerts.py",
      "class": "AlertGenerator",
      "method": "check_indicator_cross",
      "is_async": false,
      "line": 982
    },
    {
      "file": "monitoring-alerting-service\\alerts\\indicator_alerts.py",
      "class": "AlertGenerator",
      "method": "check_indicators_cross",
      "is_async": false,
      "line": 1023
    },
    {
      "file": "monitoring-alerting-service\\alerts\\indicator_alerts.py",
      "class": "AlertGenerator",
      "method": "check_price_level",
      "is_async": false,
      "line": 1088
    },
    {
      "file": "monitoring-alerting-service\\alerts\\indicator_alerts.py",
      "class": "AlertGenerator",
      "method": "check_concordance",
      "is_async": false,
      "line": 1133
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\correlation_analysis_exporter.py",
      "class": "CorrelationMetricsExporter",
      "method": "fetch_correlation_metrics",
      "is_async": false,
      "line": 71
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\correlation_analysis_exporter.py",
      "class": "CorrelationMetricsExporter",
      "method": "fetch_lead_lag_metrics",
      "is_async": false,
      "line": 86
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\correlation_analysis_exporter.py",
      "class": "CorrelationMetricsExporter",
      "method": "fetch_breakdown_alerts",
      "is_async": false,
      "line": 101
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\correlation_analysis_exporter.py",
      "class": "CorrelationMetricsExporter",
      "method": "update_correlation_metrics",
      "is_async": false,
      "line": 115
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\enhanced_effectiveness_exporter.py",
      "class": "EnhancedEffectivenessMetricsExporter",
      "method": "update_tool_effectiveness",
      "is_async": false,
      "line": 100
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\enhanced_effectiveness_exporter.py",
      "class": "EnhancedEffectivenessMetricsExporter",
      "method": "update_performance_decay",
      "is_async": false,
      "line": 117
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\enhanced_effectiveness_exporter.py",
      "class": "EnhancedEffectivenessMetricsExporter",
      "method": "update_statistical_significance",
      "is_async": false,
      "line": 130
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\log_collector.py",
      "class": "StructuredLogCollector",
      "method": "process_log_entry",
      "is_async": false,
      "line": 39
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\manipulation_detection_exporter.py",
      "class": "MarketManipulationMetricsExporter",
      "method": "update_system_health",
      "is_async": false,
      "line": 316
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\market_regime_identifier.py",
      "class": "MarketRegimeIdentifier",
      "method": "fetch_effectiveness_data_from_api",
      "is_async": false,
      "line": 284
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\market_regime_identifier.py",
      "class": "MarketRegimeIdentifier",
      "method": "process_effectiveness_data",
      "is_async": false,
      "line": 314
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\nlp_analysis_exporter.py",
      "class": "NlpMetricsExporter",
      "method": "fetch_nlp_metrics",
      "is_async": false,
      "line": 167
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\nlp_analysis_exporter.py",
      "class": "NlpMetricsExporter",
      "method": "fetch_sentiment_analysis",
      "is_async": false,
      "line": 181
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\nlp_analysis_exporter.py",
      "class": "NlpMetricsExporter",
      "method": "fetch_economic_impact",
      "is_async": false,
      "line": 196
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\nlp_analysis_exporter.py",
      "class": "NlpMetricsExporter",
      "method": "update_nlp_metrics",
      "is_async": false,
      "line": 210
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\performance_tracker.py",
      "class": "PerformanceTracker",
      "method": "get_metric_window",
      "is_async": false,
      "line": 87
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\resource_cost_exporter.py",
      "class": "ResourceCostExporter",
      "method": "calculate_cost_efficiency",
      "is_async": false,
      "line": 104
    },
    {
      "file": "monitoring-alerting-service\\metrics_exporters\\trace_collector.py",
      "class": "TraceCollector",
      "method": "process_trace",
      "is_async": false,
      "line": 56
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "BaseRepository",
      "method": "get_by_id",
      "is_async": true,
      "line": 151
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "BaseRepository",
      "method": "get_all",
      "is_async": true,
      "line": 165
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "BaseRepository",
      "method": "execute_query",
      "is_async": true,
      "line": 256
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "AlertRepository",
      "method": "get_by_name",
      "is_async": true,
      "line": 365
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "AlertRepository",
      "method": "get_by_status",
      "is_async": true,
      "line": 380
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "AlertRepository",
      "method": "get_by_severity",
      "is_async": true,
      "line": 395
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "AlertRepository",
      "method": "get_silenced",
      "is_async": true,
      "line": 410
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "AlertHistoryRepository",
      "method": "get_by_alert_id",
      "is_async": true,
      "line": 430
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "AlertHistoryRepository",
      "method": "get_by_status",
      "is_async": true,
      "line": 445
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "AlertHistoryRepository",
      "method": "get_unresolved",
      "is_async": true,
      "line": 460
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "NotificationRepository",
      "method": "get_by_alert_history_id",
      "is_async": true,
      "line": 480
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "NotificationRepository",
      "method": "get_by_channel",
      "is_async": true,
      "line": 496
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "NotificationRepository",
      "method": "get_by_status",
      "is_async": true,
      "line": 511
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "NotificationRepository",
      "method": "get_by_recipient",
      "is_async": true,
      "line": 526
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "DashboardRepository",
      "method": "get_by_uid",
      "is_async": true,
      "line": 549
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "DashboardRepository",
      "method": "get_by_title",
      "is_async": true,
      "line": 564
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "DashboardRepository",
      "method": "get_by_tag",
      "is_async": true,
      "line": 579
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "MonitoringTargetRepository",
      "method": "get_by_name",
      "is_async": true,
      "line": 602
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "MonitoringTargetRepository",
      "method": "get_by_type",
      "is_async": true,
      "line": 617
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\database.py",
      "class": "MonitoringTargetRepository",
      "method": "get_by_status",
      "is_async": true,
      "line": 632
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "PrometheusClient",
      "method": "query_range",
      "is_async": true,
      "line": 328
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "PrometheusClient",
      "method": "get_series",
      "is_async": true,
      "line": 346
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "PrometheusClient",
      "method": "get_labels",
      "is_async": true,
      "line": 368
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "PrometheusClient",
      "method": "get_label_values",
      "is_async": true,
      "line": 392
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "PrometheusClient",
      "method": "get_targets",
      "is_async": true,
      "line": 418
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "PrometheusClient",
      "method": "get_rules",
      "is_async": true,
      "line": 431
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "PrometheusClient",
      "method": "get_alerts",
      "is_async": true,
      "line": 443
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "PrometheusClient",
      "method": "get_status",
      "is_async": true,
      "line": 455
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "AlertmanagerClient",
      "method": "get_alerts",
      "is_async": true,
      "line": 488
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "AlertmanagerClient",
      "method": "get_silences",
      "is_async": true,
      "line": 533
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "AlertmanagerClient",
      "method": "get_silence",
      "is_async": true,
      "line": 564
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "AlertmanagerClient",
      "method": "delete_silence",
      "is_async": true,
      "line": 578
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "AlertmanagerClient",
      "method": "get_status",
      "is_async": true,
      "line": 592
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "AlertmanagerClient",
      "method": "get_receivers",
      "is_async": true,
      "line": 604
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "get_dashboards",
      "is_async": true,
      "line": 656
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "get_dashboard",
      "is_async": true,
      "line": 670
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "create_dashboard",
      "is_async": true,
      "line": 684
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "delete_dashboard",
      "is_async": true,
      "line": 700
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "get_datasources",
      "is_async": true,
      "line": 714
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "get_datasource",
      "is_async": true,
      "line": 727
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "create_datasource",
      "is_async": true,
      "line": 744
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "update_datasource",
      "is_async": true,
      "line": 759
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "delete_datasource",
      "is_async": true,
      "line": 775
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "get_annotations",
      "is_async": true,
      "line": 793
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "create_annotation",
      "is_async": true,
      "line": 838
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "update_annotation",
      "is_async": true,
      "line": 853
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\service_clients.py",
      "class": "GrafanaClient",
      "method": "delete_annotation",
      "is_async": true,
      "line": 869
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\adapters\\ml_integration_adapter.py",
      "class": "MLIntegrationMonitoringAdapter",
      "method": "get_model_metrics",
      "is_async": true,
      "line": 61
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\adapters\\ml_integration_adapter.py",
      "class": "MLIntegrationMonitoringAdapter",
      "method": "get_job_status_metrics",
      "is_async": true,
      "line": 96
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\adapters\\ml_integration_adapter.py",
      "class": "MLIntegrationMonitoringAdapter",
      "method": "get_model_status_metrics",
      "is_async": true,
      "line": 159
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\config\\standardized_config.py",
      "class": "MonitoringAlertingSettings",
      "method": "validate_db_settings",
      "is_async": false,
      "line": 184
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\metrics\\error_metrics.py",
      "class": "ErrorMetricsExporter",
      "method": "update_circuit_breaker_state",
      "is_async": false,
      "line": 165
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\notifications\\notification_service.py",
      "class": "NotificationService",
      "method": "send_email_notification",
      "is_async": false,
      "line": 60
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\notifications\\notification_service.py",
      "class": "NotificationService",
      "method": "send_slack_notification",
      "is_async": false,
      "line": 130
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\notifications\\notification_service.py",
      "class": "NotificationService",
      "method": "send_teams_notification",
      "is_async": false,
      "line": 207
    },
    {
      "file": "monitoring-alerting-service\\monitoring_alerting_service\\notifications\\notification_service.py",
      "class": "NotificationService",
      "method": "send_notification",
      "is_async": false,
      "line": 286
    }
  ],
  "portfolio-management-service": [
    {
      "file": "portfolio-management-service\\portfolio_management_service\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_asset_info",
      "is_async": false,
      "line": 82
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_asset_group",
      "is_async": false,
      "line": 120
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_trading_parameters",
      "is_async": false,
      "line": 139
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "calculate_volatility",
      "is_async": false,
      "line": 186
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_price_levels",
      "is_async": false,
      "line": 211
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\adapters\\multi_asset_adapter.py",
      "class": "MultiAssetServiceAdapter",
      "method": "get_analysis_parameters",
      "is_async": false,
      "line": 236
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\clients\\risk_management_client.py",
      "class": "RiskManagementClient",
      "method": "check_position_risk",
      "is_async": true,
      "line": 99
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\clients\\risk_management_client.py",
      "class": "RiskManagementClient",
      "method": "check_portfolio_risk",
      "is_async": true,
      "line": 118
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\clients\\risk_management_client.py",
      "class": "RiskManagementClient",
      "method": "get_account_exposure",
      "is_async": true,
      "line": 131
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\clients\\risk_management_client.py",
      "class": "RiskManagementClient",
      "method": "get_symbol_exposure",
      "is_async": true,
      "line": 144
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\clients\\risk_management_client.py",
      "class": "RiskManagementClient",
      "method": "calculate_position_size",
      "is_async": true,
      "line": 159
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\clients\\risk_management_client.py",
      "class": "RiskManagementClient",
      "method": "calculate_value_at_risk",
      "is_async": true,
      "line": 181
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\clients\\risk_management_client.py",
      "class": "RiskManagementClient",
      "method": "calculate_drawdown_risk",
      "is_async": true,
      "line": 202
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\clients\\risk_management_client.py",
      "class": "RiskManagementClient",
      "method": "calculate_max_trades",
      "is_async": true,
      "line": 222
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\multi_asset\\multi_asset_portfolio_manager.py",
      "class": "MultiAssetPortfolioManager",
      "method": "create_position",
      "is_async": false,
      "line": 38
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\multi_asset\\multi_asset_portfolio_manager.py",
      "class": "MultiAssetPortfolioManager",
      "method": "get_portfolio_summary",
      "is_async": false,
      "line": 66
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\multi_asset\\multi_asset_portfolio_manager.py",
      "class": "MultiAssetPortfolioManager",
      "method": "calculate_unified_risk",
      "is_async": false,
      "line": 118
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\multi_asset\\multi_asset_portfolio_manager.py",
      "class": "MultiAssetPortfolioManager",
      "method": "get_asset_allocation_recommendations",
      "is_async": false,
      "line": 147
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\account_repository.py",
      "class": "AccountRepository",
      "method": "get_by_id",
      "is_async": true,
      "line": 29
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\account_repository.py",
      "class": "AccountRepository",
      "method": "get_by_user_id",
      "is_async": true,
      "line": 63
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\account_repository.py",
      "class": "AccountRepository",
      "method": "create_account",
      "is_async": true,
      "line": 95
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\account_repository.py",
      "class": "AccountRepository",
      "method": "update_balance",
      "is_async": true,
      "line": 127
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\account_repository.py",
      "class": "AccountRepository",
      "method": "update_margin",
      "is_async": true,
      "line": 190
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\account_repository.py",
      "class": "AccountRepository",
      "method": "get_balance_history",
      "is_async": true,
      "line": 232
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\account_repository.py",
      "class": "AccountRepository",
      "method": "get_account_details",
      "is_async": true,
      "line": 277
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\historical_repository.py",
      "class": "HistoricalRepository",
      "method": "create_snapshot",
      "is_async": true,
      "line": 29
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\historical_repository.py",
      "class": "HistoricalRepository",
      "method": "create_performance_record",
      "is_async": true,
      "line": 64
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\historical_repository.py",
      "class": "HistoricalRepository",
      "method": "get_snapshots",
      "is_async": true,
      "line": 99
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\historical_repository.py",
      "class": "HistoricalRepository",
      "method": "get_performance_records",
      "is_async": true,
      "line": 147
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\historical_repository.py",
      "class": "HistoricalRepository",
      "method": "get_latest_snapshot",
      "is_async": true,
      "line": 195
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\position_repository.py",
      "class": "PositionRepository",
      "method": "get_by_id",
      "is_async": true,
      "line": 80
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\position_repository.py",
      "class": "PositionRepository",
      "method": "get_open_positions",
      "is_async": true,
      "line": 226
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\position_repository.py",
      "class": "PositionRepository",
      "method": "get_closed_positions",
      "is_async": true,
      "line": 284
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\position_repository.py",
      "class": "PositionRepository",
      "method": "update_unrealized_pnl",
      "is_async": true,
      "line": 358
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\repositories\\position_repository.py",
      "class": "PositionRepository",
      "method": "get_positions_by_symbol",
      "is_async": true,
      "line": 402
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\account_snapshot_service.py",
      "class": "AccountSnapshotService",
      "method": "create_snapshot",
      "is_async": true,
      "line": 52
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\account_snapshot_service.py",
      "class": "AccountSnapshotService",
      "method": "get_snapshot",
      "is_async": true,
      "line": 92
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\account_snapshot_service.py",
      "class": "AccountSnapshotService",
      "method": "get_snapshots",
      "is_async": true,
      "line": 107
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\account_snapshot_service.py",
      "class": "AccountSnapshotService",
      "method": "get_nearest_snapshot",
      "is_async": true,
      "line": 132
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\account_snapshot_service.py",
      "class": "AccountSnapshotService",
      "method": "get_account_at_timestamp",
      "is_async": true,
      "line": 155
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\account_snapshot_service.py",
      "class": "AccountSnapshotService",
      "method": "create_scheduled_snapshots",
      "is_async": true,
      "line": 245
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\account_snapshot_service.py",
      "class": "AccountSnapshotService",
      "method": "get_metric_time_series",
      "is_async": true,
      "line": 274
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\account_snapshot_service.py",
      "class": "AccountSnapshotService",
      "method": "delete_snapshot",
      "is_async": true,
      "line": 301
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\historical_tracking.py",
      "class": "HistoricalTracking",
      "method": "create_daily_snapshot",
      "is_async": true,
      "line": 26
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\historical_tracking.py",
      "class": "HistoricalTracking",
      "method": "get_historical_equity",
      "is_async": true,
      "line": 100
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\historical_tracking.py",
      "class": "HistoricalTracking",
      "method": "get_performance_metrics_history",
      "is_async": true,
      "line": 137
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\historical_tracking.py",
      "class": "HistoricalTracking",
      "method": "analyze_drawdown_history",
      "is_async": true,
      "line": 178
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\portfolio_service.py",
      "class": "PortfolioService",
      "method": "create_position",
      "is_async": true,
      "line": 41
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\portfolio_service.py",
      "class": "PortfolioService",
      "method": "get_position",
      "is_async": true,
      "line": 100
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\portfolio_service.py",
      "class": "PortfolioService",
      "method": "update_position",
      "is_async": true,
      "line": 126
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\portfolio_service.py",
      "class": "PortfolioService",
      "method": "get_portfolio_summary",
      "is_async": true,
      "line": 221
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\portfolio_service.py",
      "class": "PortfolioService",
      "method": "get_historical_performance",
      "is_async": true,
      "line": 289
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\tax_reporting_service.py",
      "class": "TaxReportingService",
      "method": "calculate_holding_period_classifications",
      "is_async": true,
      "line": 336
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\tax_reporting_service.py",
      "class": "TaxReportingService",
      "method": "get_available_tax_jurisdictions",
      "is_async": true,
      "line": 451
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\tax_reporting_service.py",
      "class": "TaxReportingService",
      "method": "get_jurisdiction_rules",
      "is_async": true,
      "line": 460
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\account_reconciliation\\facade.py",
      "class": "AccountReconciliationService",
      "method": "get_reconciliation_status",
      "is_async": true,
      "line": 208
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\account_reconciliation\\facade.py",
      "class": "AccountReconciliationService",
      "method": "get_recent_reconciliations",
      "is_async": true,
      "line": 229
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\account_reconciliation\\facade.py",
      "class": "AccountReconciliationService",
      "method": "get_historical_reconciliation_report",
      "is_async": true,
      "line": 339
    },
    {
      "file": "portfolio-management-service\\portfolio_management_service\\services\\account_reconciliation\\historical_analysis.py",
      "class": "HistoricalAnalysis",
      "method": "analyze_historical_reconciliation",
      "is_async": true,
      "line": 47
    }
  ],
  "strategy-execution-engine": [
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\adaptive_strategy_adapter.py",
      "class": "AdaptiveStrategyServiceAdapter",
      "method": "get_adaptive_parameters",
      "is_async": true,
      "line": 50
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\adaptive_strategy_adapter.py",
      "class": "AdaptiveStrategyServiceAdapter",
      "method": "get_tool_signal_weights",
      "is_async": true,
      "line": 106
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\adaptive_strategy_adapter.py",
      "class": "AdaptiveStrategyServiceAdapter",
      "method": "get_adaptation_recommendations",
      "is_async": true,
      "line": 158
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\adaptive_strategy_adapter.py",
      "class": "AdaptiveStrategyServiceAdapter",
      "method": "get_adaptation_level",
      "is_async": false,
      "line": 196
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\analysis_adapter.py",
      "class": "AnalysisProviderAdapter",
      "method": "get_technical_analysis",
      "is_async": true,
      "line": 47
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\analysis_adapter.py",
      "class": "AnalysisProviderAdapter",
      "method": "get_pattern_recognition",
      "is_async": true,
      "line": 84
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\analysis_adapter.py",
      "class": "AnalysisProviderAdapter",
      "method": "get_market_regime",
      "is_async": true,
      "line": 127
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\analysis_adapter.py",
      "class": "AnalysisProviderAdapter",
      "method": "get_multi_timeframe_analysis",
      "is_async": true,
      "line": 162
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\analysis_adapter.py",
      "class": "AnalysisProviderAdapter",
      "method": "get_multi_asset_analysis",
      "is_async": true,
      "line": 216
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\analysis_adapter.py",
      "class": "AnalysisProviderAdapter",
      "method": "get_integrated_analysis",
      "is_async": true,
      "line": 267
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_market_analysis",
      "is_async": true,
      "line": 40
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_causal_analysis",
      "is_async": true,
      "line": 56
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_regime_analysis",
      "is_async": true,
      "line": 73
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\causal_strategy_enhancer_adapter.py",
      "class": "CausalStrategyEnhancerAdapter",
      "method": "get_enhancement_types",
      "is_async": true,
      "line": 67
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\causal_strategy_enhancer_adapter.py",
      "class": "CausalStrategyEnhancerAdapter",
      "method": "get_enhancement_history",
      "is_async": true,
      "line": 86
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_tool_effectiveness",
      "is_async": false,
      "line": 91
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_best_tools",
      "is_async": false,
      "line": 115
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_tool_performance_history",
      "is_async": false,
      "line": 129
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_regime_transition_performance",
      "is_async": false,
      "line": 144
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_tool_correlation_matrix",
      "is_async": false,
      "line": 162
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_tool_effectiveness_confidence",
      "is_async": false,
      "line": 180
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "EnhancedToolEffectivenessTrackerAdapter",
      "method": "get_optimal_tool_combination",
      "is_async": false,
      "line": 198
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "AdaptiveLayerServiceAdapter",
      "method": "get_adaptive_parameters",
      "is_async": true,
      "line": 505
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "AdaptiveLayerServiceAdapter",
      "method": "get_tool_signal_weights",
      "is_async": true,
      "line": 551
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "AdaptiveLayerServiceAdapter",
      "method": "get_adaptation_recommendations",
      "is_async": true,
      "line": 618
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\enhanced_tool_effectiveness_adapter.py",
      "class": "AdaptiveLayerServiceAdapter",
      "method": "get_adaptation_level",
      "is_async": false,
      "line": 675
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\ml_prediction_adapter.py",
      "class": "MLPredictionServiceAdapter",
      "method": "get_prediction",
      "is_async": true,
      "line": 53
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\ml_prediction_adapter.py",
      "class": "MLPredictionServiceAdapter",
      "method": "get_batch_predictions",
      "is_async": true,
      "line": 82
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\ml_prediction_adapter.py",
      "class": "MLPredictionServiceAdapter",
      "method": "get_model_metadata",
      "is_async": true,
      "line": 113
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\ml_prediction_adapter.py",
      "class": "MLSignalGeneratorAdapter",
      "method": "get_model_performance",
      "is_async": true,
      "line": 222
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\ml_workbench_adapter.py",
      "class": "ModelOptimizationServiceAdapter",
      "method": "get_optimization_status",
      "is_async": true,
      "line": 72
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\ml_workbench_adapter.py",
      "class": "ModelOptimizationServiceAdapter",
      "method": "get_optimization_result",
      "is_async": true,
      "line": 86
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\ml_workbench_adapter.py",
      "class": "ReinforcementLearningServiceAdapter",
      "method": "get_training_status",
      "is_async": true,
      "line": 163
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\ml_workbench_adapter.py",
      "class": "ReinforcementLearningServiceAdapter",
      "method": "get_rl_model_performance",
      "is_async": true,
      "line": 176
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\ml_workbench_adapter.py",
      "class": "ReinforcementLearningServiceAdapter",
      "method": "get_rl_model_action",
      "is_async": true,
      "line": 191
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\statistical_validator_adapter.py",
      "class": "StatisticalValidatorAdapter",
      "method": "validate_parameter_adjustment",
      "is_async": false,
      "line": 48
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\statistical_validator_adapter.py",
      "class": "StatisticalValidatorAdapter",
      "method": "validate_strategy_performance",
      "is_async": false,
      "line": 102
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\statistical_validator_adapter.py",
      "class": "StatisticalValidatorAdapter",
      "method": "validate_signal_quality",
      "is_async": false,
      "line": 172
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\tool_effectiveness_adapter.py",
      "class": "ToolEffectivenessTrackerAdapter",
      "method": "get_tool_effectiveness",
      "is_async": false,
      "line": 86
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\tool_effectiveness_adapter.py",
      "class": "ToolEffectivenessTrackerAdapter",
      "method": "get_best_tools",
      "is_async": false,
      "line": 120
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\tool_effectiveness_adapter.py",
      "class": "ToolEffectivenessTrackerAdapter",
      "method": "get_tool_history",
      "is_async": false,
      "line": 142
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adapters\\tool_effectiveness_adapter.py",
      "class": "ToolEffectivenessTrackerAdapter",
      "method": "get_performance_summary",
      "is_async": false,
      "line": 164
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adaptive_layer\\adaptive_service.py",
      "class": "AdaptiveLayerService",
      "method": "get_tool_signal_weights",
      "is_async": true,
      "line": 119
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adaptive_layer\\adaptive_service.py",
      "class": "AdaptiveLayerService",
      "method": "get_adaptive_parameters",
      "is_async": true,
      "line": 284
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adaptive_layer\\adaptive_service.py",
      "class": "AdaptiveLayerService",
      "method": "get_adaptation_recommendations",
      "is_async": true,
      "line": 363
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adaptive_layer\\adaptive_service.py",
      "class": "AdaptiveLayerService",
      "method": "get_adaptation_level",
      "is_async": false,
      "line": 432
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adaptive_layer\\adaptive_service.py",
      "class": "AdaptiveLayerService",
      "method": "update_weight_adjustment_factor",
      "is_async": true,
      "line": 443
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adaptive_layer\\adaptive_service.py",
      "class": "AdaptiveLayerService",
      "method": "get_aggregator_weights",
      "is_async": true,
      "line": 533
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adaptive_layer\\adaptive_service.py",
      "class": "AdaptiveLayerService",
      "method": "get_optimal_parameters",
      "is_async": true,
      "line": 907
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adaptive_layer\\strategy_mutator_factory.py",
      "class": "StrategyMutatorFactory",
      "method": "create_mutator",
      "is_async": false,
      "line": 44
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\adaptive_layer\\strategy_mutator_factory.py",
      "class": "StrategyMutatorFactory",
      "method": "get_mutator",
      "is_async": false,
      "line": 68
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\analysis\\performance_analyzer.py",
      "class": "PerformanceAnalyzer",
      "method": "get_backtest_results",
      "is_async": false,
      "line": 37
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\analysis\\performance_analyzer.py",
      "class": "PerformanceAnalyzer",
      "method": "get_all_backtest_results",
      "is_async": false,
      "line": 62
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\analysis\\performance_analyzer.py",
      "class": "PerformanceAnalyzer",
      "method": "analyze_backtest",
      "is_async": false,
      "line": 97
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\backtesting\\backtest_engine.py",
      "class": "BacktestEngine",
      "method": "get_tool_effectiveness_metrics",
      "is_async": false,
      "line": 637
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\backtesting\\backtest_engine.py",
      "class": "BacktestEngine",
      "method": "create_interactive_dashboard",
      "is_async": false,
      "line": 717
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\backtesting\\ml_integration.py",
      "class": "MLBacktesterIntegration",
      "method": "get_prediction",
      "is_async": true,
      "line": 89
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\backtesting\\ml_integration.py",
      "class": "MLBacktesterIntegration",
      "method": "get_forecast",
      "is_async": true,
      "line": 132
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\backtesting\\reporting.py",
      "class": "BacktestReport",
      "method": "create_interactive_dashboard",
      "is_async": false,
      "line": 96
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\backtesting\\tool_effectiveness_evaluator.py",
      "class": "BacktestToolEffectivenessEvaluator",
      "method": "calculate_tool_metrics",
      "is_async": false,
      "line": 270
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\backtesting\\tool_effectiveness_evaluator.py",
      "class": "BacktestToolEffectivenessEvaluator",
      "method": "get_summary_report",
      "is_async": false,
      "line": 305
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\backtesting\\tool_effectiveness_evaluator.py",
      "class": "BacktestToolEffectivenessEvaluator",
      "method": "load_results",
      "is_async": false,
      "line": 333
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\caching\\feature_cache.py",
      "class": "FeatureCache",
      "method": "get_stats",
      "is_async": false,
      "line": 221
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\analysis_engine_client.py",
      "class": "AnalysisEngineClient",
      "method": "get_technical_analysis",
      "is_async": true,
      "line": 72
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\analysis_engine_client.py",
      "class": "AnalysisEngineClient",
      "method": "get_market_regime",
      "is_async": true,
      "line": 124
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\analysis_engine_client.py",
      "class": "AnalysisEngineClient",
      "method": "get_pattern_recognition",
      "is_async": true,
      "line": 168
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\analysis_engine_client.py",
      "class": "AnalysisEngineClient",
      "method": "check_health",
      "is_async": true,
      "line": 220
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\feature_store_client.py",
      "class": "FeatureStoreClient",
      "method": "get_session",
      "is_async": true,
      "line": 110
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\feature_store_client.py",
      "class": "FeatureStoreClient",
      "method": "get_ohlcv_data",
      "is_async": true,
      "line": 127
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\feature_store_client.py",
      "class": "FeatureStoreClient",
      "method": "get_indicators",
      "is_async": true,
      "line": 203
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\feature_store_client.py",
      "class": "FeatureStoreClient",
      "method": "get_available_indicators",
      "is_async": true,
      "line": 409
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\feature_store_client.py",
      "class": "FeatureStoreClient",
      "method": "get_indicator_metadata",
      "is_async": true,
      "line": 446
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\standardized_trading_gateway_client.py",
      "class": "StandardizedTradingGatewayClient",
      "method": "execute_order",
      "is_async": true,
      "line": 54
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\standardized_trading_gateway_client.py",
      "class": "StandardizedTradingGatewayClient",
      "method": "get_order_status",
      "is_async": true,
      "line": 80
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\standardized_trading_gateway_client.py",
      "class": "StandardizedTradingGatewayClient",
      "method": "get_account_info",
      "is_async": true,
      "line": 108
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\standardized_trading_gateway_client.py",
      "class": "StandardizedTradingGatewayClient",
      "method": "get_positions",
      "is_async": true,
      "line": 129
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\standardized_trading_gateway_client.py",
      "class": "StandardizedTradingGatewayClient",
      "method": "get_market_data",
      "is_async": true,
      "line": 157
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\standardized_trading_gateway_client.py",
      "class": "StandardizedTradingGatewayClient",
      "method": "check_health",
      "is_async": true,
      "line": 243
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\trading_gateway_client.py",
      "class": "TradingGatewayClient",
      "method": "execute_order",
      "is_async": true,
      "line": 60
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\trading_gateway_client.py",
      "class": "TradingGatewayClient",
      "method": "get_order_status",
      "is_async": true,
      "line": 87
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\trading_gateway_client.py",
      "class": "TradingGatewayClient",
      "method": "get_account_info",
      "is_async": true,
      "line": 117
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\trading_gateway_client.py",
      "class": "TradingGatewayClient",
      "method": "get_positions",
      "is_async": true,
      "line": 140
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\trading_gateway_client.py",
      "class": "TradingGatewayClient",
      "method": "get_market_data",
      "is_async": true,
      "line": 171
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\trading_gateway_client.py",
      "class": "TradingGatewayClient",
      "method": "check_health",
      "is_async": true,
      "line": 213
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\clients\\trading_gateway_client.py",
      "class": "TradingGatewayClient",
      "method": "get_open_positions",
      "is_async": true,
      "line": 244
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\core\\container.py",
      "class": "ServiceContainer",
      "method": "get_typed",
      "is_async": false,
      "line": 102
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\execution\\trading_client.py",
      "class": "TradingGatewayClient",
      "method": "get_order_status",
      "is_async": false,
      "line": 113
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\execution\\trading_client.py",
      "class": "TradingGatewayClient",
      "method": "get_open_positions",
      "is_async": false,
      "line": 141
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\execution\\trading_client.py",
      "class": "TradingGatewayClient",
      "method": "get_account_info",
      "is_async": false,
      "line": 197
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\factory\\enhanced_strategy_factory.py",
      "class": "EnhancedStrategyFactory",
      "method": "create_strategy",
      "is_async": false,
      "line": 44
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\factory\\enhanced_strategy_factory.py",
      "class": "EnhancedStrategyFactory",
      "method": "load_timeframe_optimizer_state",
      "is_async": false,
      "line": 160
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\integration\\analysis_integration_service.py",
      "class": "AnalysisIntegrationService",
      "method": "get_integrated_signals",
      "is_async": true,
      "line": 113
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\monitoring\\feature_store_metrics.py",
      "class": "FeatureStoreMetrics",
      "method": "get_metrics",
      "is_async": false,
      "line": 209
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\multi_asset\\asset_strategy_factory.py",
      "class": "AssetStrategyFactory",
      "method": "get_strategy_for_asset",
      "is_async": false,
      "line": 104
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\multi_asset\\multi_asset_executor.py",
      "class": "MultiAssetStrategyExecutor",
      "method": "execute_strategy",
      "is_async": true,
      "line": 57
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\multi_asset\\multi_asset_executor.py",
      "class": "MultiAssetStrategyExecutor",
      "method": "execute_batch",
      "is_async": true,
      "line": 199
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\multi_asset\\multi_asset_executor.py",
      "class": "MultiAssetStrategyExecutor",
      "method": "get_strategy_performance",
      "is_async": true,
      "line": 224
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\performance\\execution_profiler.py",
      "class": "ExecutionProfiler",
      "method": "get_summary",
      "is_async": false,
      "line": 172
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\performance\\execution_profiler.py",
      "class": "BatchProcessingOptimizer",
      "method": "get_optimal_batch_size",
      "is_async": false,
      "line": 268
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\performance\\execution_profiler.py",
      "class": "BatchProcessingOptimizer",
      "method": "update_performance_data",
      "is_async": false,
      "line": 289
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\risk\\circuit_breaker.py",
      "class": "CircuitBreaker",
      "method": "get_status",
      "is_async": false,
      "line": 239
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\risk\\dynamic_position_sizing.py",
      "class": "DynamicPositionSizing",
      "method": "calculate_position_size",
      "is_async": true,
      "line": 49
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\risk\\dynamic_position_sizing.py",
      "class": "DynamicPositionSizing",
      "method": "update_parameters",
      "is_async": false,
      "line": 288
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\risk\\dynamic_position_sizing.py",
      "class": "MockRiskServiceClient",
      "method": "get_risk_profile",
      "is_async": true,
      "line": 317
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\risk\\dynamic_position_sizing.py",
      "class": "MockAdaptiveLayerClient",
      "method": "get_adaptive_parameters",
      "is_async": true,
      "line": 325
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\risk\\risk_check_orchestrator.py",
      "class": "RiskCheckOrchestrator",
      "method": "get_risk_limit_status",
      "is_async": false,
      "line": 429
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\risk\\risk_check_orchestrator.py",
      "class": "RiskCheckOrchestrator",
      "method": "update_risk_limits",
      "is_async": false,
      "line": 444
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\risk\\risk_check_orchestrator.py",
      "class": "MockRiskServiceClient",
      "method": "calculate_portfolio_var",
      "is_async": true,
      "line": 470
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\risk\\risk_client.py",
      "class": "RiskManagementClient",
      "method": "check_risk",
      "is_async": false,
      "line": 86
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\risk\\risk_client.py",
      "class": "RiskManagementClient",
      "method": "get_risk_limits",
      "is_async": false,
      "line": 122
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\risk\\risk_client.py",
      "class": "RiskManagementClient",
      "method": "get_portfolio_risk",
      "is_async": false,
      "line": 145
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\signal\\decision_engine.py",
      "class": "DecisionLogicEngine",
      "method": "update_circuit_breaker_status",
      "is_async": false,
      "line": 87
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\signal\\decision_engine.py",
      "class": "DecisionLogicEngine",
      "method": "process_signals",
      "is_async": false,
      "line": 100
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\signal_flow\\signal_validator.py",
      "class": "SignalValidator",
      "method": "validate_signal",
      "is_async": true,
      "line": 41
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\signal_flow\\strategy_signal_manager.py",
      "class": "StrategySignalManager",
      "method": "process_new_signal",
      "is_async": true,
      "line": 49
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\signal_flow\\strategy_signal_manager.py",
      "class": "StrategySignalManager",
      "method": "get_signal_status",
      "is_async": true,
      "line": 123
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\adaptive_ma_strategy.py",
      "class": "AdaptiveMAStrategy",
      "method": "analyze_performance",
      "is_async": false,
      "line": 284
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\advanced_ta_strategy.py",
      "class": "AdvancedTAStrategy",
      "method": "update_market_regime",
      "is_async": false,
      "line": 88
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\advanced_ta_strategy.py",
      "class": "AdvancedTAStrategy",
      "method": "analyze_market",
      "is_async": false,
      "line": 107
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\advanced_ta_strategy.py",
      "class": "AdvancedTAStrategy",
      "method": "update_performance_metrics",
      "is_async": false,
      "line": 311
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\base_strategy.py",
      "class": "BaseStrategy",
      "method": "get_metadata",
      "is_async": false,
      "line": 57
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\base_strategy.py",
      "class": "BaseStrategy",
      "method": "validate_parameters",
      "is_async": false,
      "line": 66
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\base_strategy.py",
      "class": "BaseStrategy",
      "method": "process_data",
      "is_async": false,
      "line": 92
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\base_strategy.py",
      "class": "BaseStrategy",
      "method": "update_performance_metrics",
      "is_async": false,
      "line": 118
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\base_strategy.py",
      "class": "BaseStrategy",
      "method": "get_performance_metrics",
      "is_async": false,
      "line": 127
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\causal_enhanced_strategy.py",
      "class": "CausalEnhancedStrategy",
      "method": "execute_trades",
      "is_async": true,
      "line": 673
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\strategy_loader.py",
      "class": "StrategyLoader",
      "method": "get_strategy_class",
      "is_async": false,
      "line": 115
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\strategy_loader.py",
      "class": "StrategyLoader",
      "method": "create_strategy_instance",
      "is_async": false,
      "line": 128
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\strategy_loader.py",
      "class": "StrategyLoader",
      "method": "load_strategy_from_config",
      "is_async": false,
      "line": 174
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\strategies\\strategy_loader.py",
      "class": "StrategyLoader",
      "method": "get_available_strategies",
      "is_async": false,
      "line": 217
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\trading\\feedback_collector.py",
      "class": "FeedbackCollector",
      "method": "get_execution_metrics",
      "is_async": true,
      "line": 116
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\trading\\feedback_collector.py",
      "class": "FeedbackCollector",
      "method": "get_raw_feedback",
      "is_async": true,
      "line": 133
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\trading\\feedback_loop_registry.py",
      "class": "FeedbackLoopRegistry",
      "method": "get_statistical_validator",
      "is_async": false,
      "line": 112
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\trading\\feedback_loop_registry.py",
      "class": "FeedbackLoopRegistry",
      "method": "get_strategy_mutator_factory",
      "is_async": false,
      "line": 116
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\trading\\feedback_loop_registry.py",
      "class": "FeedbackLoopRegistry",
      "method": "get_feedback_collector",
      "is_async": false,
      "line": 120
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\trading\\feedback_loop_registry.py",
      "class": "FeedbackLoopRegistry",
      "method": "get_timeframe_feedback_service",
      "is_async": false,
      "line": 124
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\trading\\feedback_loop_registry.py",
      "class": "FeedbackLoopRegistry",
      "method": "get_feedback_router",
      "is_async": false,
      "line": 128
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\trading\\feedback_loop_registry.py",
      "class": "FeedbackLoopRegistry",
      "method": "create_strategy_specific_router",
      "is_async": false,
      "line": 132
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\trading\\paper_trading_coordinator.py",
      "class": "PaperTradingCoordinator",
      "method": "get_active_positions",
      "is_async": true,
      "line": 150
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\trading\\paper_trading_coordinator.py",
      "class": "PaperTradingCoordinator",
      "method": "get_active_orders",
      "is_async": true,
      "line": 159
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\trading\\paper_trading_coordinator.py",
      "class": "PaperTradingCoordinator",
      "method": "get_performance_metrics",
      "is_async": true,
      "line": 168
    },
    {
      "file": "strategy-execution-engine\\strategy_execution_engine\\trading\\trading_session_manager.py",
      "class": "TradingSessionManager",
      "method": "get_current_session_info",
      "is_async": false,
      "line": 125
    }
  ],
  "trading-gateway-service": [
    {
      "file": "trading-gateway-service\\tests\\execution_algorithms\\test_execution_algorithms.py",
      "class": "MockBrokerAdapter",
      "method": "get_quote",
      "is_async": true,
      "line": 58
    },
    {
      "file": "trading-gateway-service\\tests\\execution_algorithms\\test_execution_algorithms_integration.py",
      "class": "MockBrokerAdapter",
      "method": "get_order_status",
      "is_async": true,
      "line": 126
    },
    {
      "file": "trading-gateway-service\\tests\\execution_algorithms\\test_execution_algorithms_integration.py",
      "class": "MockBrokerAdapter",
      "method": "get_positions",
      "is_async": true,
      "line": 159
    },
    {
      "file": "trading-gateway-service\\tests\\execution_algorithms\\test_execution_algorithms_integration.py",
      "class": "MockBrokerAdapter",
      "method": "get_account_info",
      "is_async": true,
      "line": 163
    },
    {
      "file": "trading-gateway-service\\tests\\execution_algorithms\\test_execution_algorithms_integration.py",
      "class": "MockBrokerAdapter",
      "method": "get_broker_info",
      "is_async": true,
      "line": 173
    },
    {
      "file": "trading-gateway-service\\tests\\services\\mock_broker_adapter_interface.py",
      "class": "MockBrokerAdapterInterface",
      "method": "get_broker_info",
      "is_async": false,
      "line": 53
    },
    {
      "file": "trading-gateway-service\\tests\\services\\mock_broker_adapter_interface.py",
      "class": "MockBrokerAdapterInterface",
      "method": "get_account_info",
      "is_async": false,
      "line": 63
    },
    {
      "file": "trading-gateway-service\\tests\\services\\mock_broker_adapter_interface.py",
      "class": "MockBrokerAdapterInterface",
      "method": "get_positions",
      "is_async": false,
      "line": 73
    },
    {
      "file": "trading-gateway-service\\tests\\services\\mock_broker_adapter_interface.py",
      "class": "MockBrokerAdapterInterface",
      "method": "get_orders",
      "is_async": false,
      "line": 83
    },
    {
      "file": "trading-gateway-service\\tests\\services\\mock_broker_adapter_interface.py",
      "class": "MockBrokerAdapterInterface",
      "method": "get_market_data",
      "is_async": false,
      "line": 133
    },
    {
      "file": "trading-gateway-service\\tests\\services\\test_refactored_execution_service.py",
      "class": "MockBrokerAdapter",
      "method": "get_orders",
      "is_async": false,
      "line": 105
    },
    {
      "file": "trading-gateway-service\\tests\\services\\test_refactored_execution_service.py",
      "class": "MockBrokerAdapter",
      "method": "get_positions",
      "is_async": false,
      "line": 109
    },
    {
      "file": "trading-gateway-service\\tests\\services\\test_refactored_execution_service.py",
      "class": "MockBrokerAdapter",
      "method": "get_account_info",
      "is_async": false,
      "line": 113
    },
    {
      "file": "trading-gateway-service\\tests\\services\\test_refactored_execution_service.py",
      "class": "MockBrokerAdapter",
      "method": "get_broker_info",
      "is_async": false,
      "line": 121
    },
    {
      "file": "trading-gateway-service\\tests\\services\\test_refactored_execution_service.py",
      "class": "MockBrokerAdapter",
      "method": "get_market_data",
      "is_async": false,
      "line": 129
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\main.py",
      "class": "MockOrderStore",
      "method": "get_orders",
      "is_async": true,
      "line": 97
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\main.py",
      "class": "MockOrderStore",
      "method": "get_positions",
      "is_async": true,
      "line": 100
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\main.py",
      "class": "MockOrderStore",
      "method": "get_account_info",
      "is_async": true,
      "line": 103
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\main.py",
      "class": "MockOrderStore",
      "method": "update_order_status",
      "is_async": true,
      "line": 109
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\main.py",
      "class": "MockOrderStore",
      "method": "update_order_fill",
      "is_async": true,
      "line": 112
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\main.py",
      "class": "MockOrderStore",
      "method": "update_position",
      "is_async": true,
      "line": 126
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\main.py",
      "class": "MockOrderStore",
      "method": "update_account_balance",
      "is_async": true,
      "line": 131
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_client",
      "is_async": false,
      "line": 34
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_market_data_client",
      "is_async": false,
      "line": 86
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_data_pipeline_client",
      "is_async": false,
      "line": 95
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_feature_store_client",
      "is_async": false,
      "line": 104
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\service_clients.py",
      "class": "ServiceClients",
      "method": "get_analysis_engine_client",
      "is_async": false,
      "line": 113
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_trading_provider",
      "is_async": false,
      "line": 95
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_order_book_provider",
      "is_async": false,
      "line": 106
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_risk_manager",
      "is_async": false,
      "line": 117
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_analysis_provider",
      "is_async": false,
      "line": 128
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\adapter_factory.py",
      "class": "AdapterFactory",
      "method": "get_adapter",
      "is_async": false,
      "line": 139
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "analyze_market",
      "is_async": true,
      "line": 54
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_analysis_types",
      "is_async": true,
      "line": 91
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "calculate_indicator",
      "is_async": true,
      "line": 146
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_indicator_info",
      "is_async": true,
      "line": 182
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_technical_indicators",
      "is_async": true,
      "line": 256
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\analysis_engine_adapter.py",
      "class": "AnalysisEngineAdapter",
      "method": "get_pattern_types",
      "is_async": true,
      "line": 324
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\order_book_adapter.py",
      "class": "OrderBookProviderAdapter",
      "method": "get_order_book",
      "is_async": true,
      "line": 44
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\risk_adapters.py",
      "class": "RiskManagerAdapter",
      "method": "check_order",
      "is_async": true,
      "line": 48
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\risk_adapters.py",
      "class": "RiskManagerAdapter",
      "method": "check_risk_limits",
      "is_async": false,
      "line": 113
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\risk_adapters.py",
      "class": "RiskManagerAdapter",
      "method": "get_portfolio_metrics",
      "is_async": false,
      "line": 142
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\risk_management_adapter.py",
      "class": "TradingRiskManagementAdapter",
      "method": "validate_order",
      "is_async": true,
      "line": 64
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\risk_management_adapter.py",
      "class": "TradingRiskManagementAdapter",
      "method": "get_position_risk",
      "is_async": true,
      "line": 95
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\risk_management_adapter.py",
      "class": "TradingRiskManagementAdapter",
      "method": "get_portfolio_risk",
      "is_async": true,
      "line": 108
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\risk_management_adapter.py",
      "class": "TradingRiskManagementAdapter",
      "method": "update_tracked_position",
      "is_async": true,
      "line": 152
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\risk_management_adapter.py",
      "class": "TradingRiskManagementAdapter",
      "method": "check_risk_limits",
      "is_async": true,
      "line": 198
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\risk_management_adapter.py",
      "class": "TradingRiskManagementAdapter",
      "method": "get_risk_metrics",
      "is_async": true,
      "line": 236
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\risk_manager_adapter.py",
      "class": "RiskManagerAdapter",
      "method": "validate_order",
      "is_async": true,
      "line": 49
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\risk_manager_adapter.py",
      "class": "RiskManagerAdapter",
      "method": "get_position_risk",
      "is_async": true,
      "line": 77
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\risk_manager_adapter.py",
      "class": "RiskManagerAdapter",
      "method": "get_portfolio_risk",
      "is_async": true,
      "line": 94
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\trading_provider_adapter.py",
      "class": "TradingProviderAdapter",
      "method": "get_order",
      "is_async": true,
      "line": 93
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\adapters\\trading_provider_adapter.py",
      "class": "TradingProviderAdapter",
      "method": "get_orders",
      "is_async": true,
      "line": 111
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\broker_adapters\\ctrader_adapter.py",
      "class": "CTraderAdapter",
      "method": "get_positions",
      "is_async": true,
      "line": 315
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\broker_adapters\\ctrader_adapter.py",
      "class": "CTraderAdapter",
      "method": "get_account_info",
      "is_async": true,
      "line": 336
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\broker_adapters\\interactive_brokers_adapter.py",
      "class": "IBWrapper",
      "method": "update_account_value",
      "is_async": false,
      "line": 64
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\broker_adapters\\interactive_brokers_adapter.py",
      "class": "IBWrapper",
      "method": "update_portfolio",
      "is_async": false,
      "line": 72
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\broker_adapters\\interactive_brokers_adapter.py",
      "class": "InteractiveBrokersAdapter",
      "method": "get_positions",
      "is_async": true,
      "line": 357
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\broker_adapters\\interactive_brokers_adapter.py",
      "class": "InteractiveBrokersAdapter",
      "method": "get_account_info",
      "is_async": true,
      "line": 380
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\broker_adapters\\metatrader_adapter.py",
      "class": "MetaTraderAdapter",
      "method": "get_positions",
      "is_async": true,
      "line": 272
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\broker_adapters\\metatrader_adapter.py",
      "class": "MetaTraderAdapter",
      "method": "get_account_info",
      "is_async": true,
      "line": 299
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\broker_adapters\\oanda_adapter.py",
      "class": "OandaAdapter",
      "method": "get_positions",
      "is_async": true,
      "line": 350
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\broker_adapters\\oanda_adapter.py",
      "class": "OandaAdapter",
      "method": "get_account_info",
      "is_async": true,
      "line": 373
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\execution_algorithms\\base_algorithm.py",
      "class": "BaseExecutionAlgorithm",
      "method": "get_status",
      "is_async": true,
      "line": 166
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\execution_algorithms\\implementation_shortfall.py",
      "class": "ImplementationShortfallAlgorithm",
      "method": "get_status",
      "is_async": true,
      "line": 254
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\execution_algorithms\\smart_order_routing.py",
      "class": "SmartOrderRoutingAlgorithm",
      "method": "get_status",
      "is_async": true,
      "line": 205
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\execution_algorithms\\twap.py",
      "class": "TWAPAlgorithm",
      "method": "get_status",
      "is_async": true,
      "line": 149
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\execution_algorithms\\vwap.py",
      "class": "VWAPAlgorithm",
      "method": "get_status",
      "is_async": true,
      "line": 161
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\incidents\\emergency_action_system.py",
      "class": "EmergencyActionSystem",
      "method": "execute_action",
      "is_async": true,
      "line": 92
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\incidents\\emergency_action_system.py",
      "class": "EmergencyActionSystem",
      "method": "get_available_actions",
      "is_async": true,
      "line": 159
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\incidents\\emergency_action_system.py",
      "class": "EmergencyActionSystem",
      "method": "get_execution_history",
      "is_async": true,
      "line": 173
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\incidents\\trading_incident_manager.py",
      "class": "TradingIncidentManager",
      "method": "update_incident",
      "is_async": true,
      "line": 119
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\incidents\\trading_incident_manager.py",
      "class": "TradingIncidentManager",
      "method": "get_incident",
      "is_async": true,
      "line": 215
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\incidents\\trading_incident_manager.py",
      "class": "TradingIncidentManager",
      "method": "get_incidents",
      "is_async": true,
      "line": 227
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\incidents\\trading_incident_manager.py",
      "class": "TradingIncidentManager",
      "method": "get_runbook",
      "is_async": true,
      "line": 260
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\interfaces\\broker_adapter.py",
      "class": "BrokerAdapter",
      "method": "get_order_status",
      "is_async": true,
      "line": 440
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\interfaces\\broker_adapter.py",
      "class": "BrokerAdapter",
      "method": "get_positions",
      "is_async": true,
      "line": 453
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\interfaces\\broker_adapter.py",
      "class": "BrokerAdapter",
      "method": "get_account_info",
      "is_async": true,
      "line": 479
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\interfaces\\broker_adapter_interface.py",
      "class": "BrokerAdapterInterface",
      "method": "get_broker_info",
      "is_async": false,
      "line": 146
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\interfaces\\broker_adapter_interface.py",
      "class": "BrokerAdapterInterface",
      "method": "get_account_info",
      "is_async": false,
      "line": 156
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\interfaces\\broker_adapter_interface.py",
      "class": "BrokerAdapterInterface",
      "method": "get_positions",
      "is_async": false,
      "line": 166
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\interfaces\\broker_adapter_interface.py",
      "class": "BrokerAdapterInterface",
      "method": "get_orders",
      "is_async": false,
      "line": 176
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\interfaces\\broker_adapter_interface.py",
      "class": "BrokerAdapterInterface",
      "method": "get_market_data",
      "is_async": false,
      "line": 226
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\monitoring\\performance_monitoring.py",
      "class": "TradingGatewayMonitoring",
      "method": "get_metrics",
      "is_async": false,
      "line": 35
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\monitoring\\performance_monitoring.py",
      "class": "TradingGatewayMonitoring",
      "method": "get_health_status",
      "is_async": false,
      "line": 39
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\resilience\\degraded_mode.py",
      "class": "TradingGatewayDegradedMode",
      "method": "get_current_state",
      "is_async": false,
      "line": 386
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\resilience\\degraded_mode_strategies.py",
      "class": "OrderQueueManager",
      "method": "get_status",
      "is_async": false,
      "line": 169
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\resilience\\degraded_mode_strategies.py",
      "class": "OrderQueueManager",
      "method": "get_queue_size",
      "is_async": false,
      "line": 319
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\resilience\\degraded_mode_strategies.py",
      "class": "OrderQueueManager",
      "method": "get_queue_summary",
      "is_async": false,
      "line": 324
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\resilience\\degraded_mode_strategies.py",
      "class": "RiskControlManager",
      "method": "update_position",
      "is_async": false,
      "line": 429
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\resilience\\degraded_mode_strategies.py",
      "class": "RiskControlManager",
      "method": "update_pnl",
      "is_async": false,
      "line": 444
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\resilience\\degraded_mode_strategies.py",
      "class": "RiskControlManager",
      "method": "check_order",
      "is_async": false,
      "line": 455
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\resilience\\degraded_mode_strategies.py",
      "class": "RiskControlManager",
      "method": "get_risk_status",
      "is_async": false,
      "line": 504
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution_analytics.py",
      "class": "ExecutionAnalytics",
      "method": "process_execution_report",
      "is_async": true,
      "line": 159
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution_analytics.py",
      "class": "ExecutionAnalytics",
      "method": "get_metrics",
      "is_async": false,
      "line": 800
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution_analytics.py",
      "class": "ExecutionAnalytics",
      "method": "get_execution_details",
      "is_async": true,
      "line": 837
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution_analytics.py",
      "class": "ExecutionAnalytics",
      "method": "get_executions_by_instrument",
      "is_async": true,
      "line": 852
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution_analytics.py",
      "class": "ExecutionAnalytics",
      "method": "get_execution_quality_by_condition",
      "is_async": true,
      "line": 873
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution_analytics.py",
      "class": "ExecutionAnalytics",
      "method": "get_feedback_for_ml_model",
      "is_async": true,
      "line": 908
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution_analytics_fixed.py",
      "class": "ExecutionAnalytics",
      "method": "get_average_slippage",
      "is_async": false,
      "line": 576
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution_analytics_fixed.py",
      "class": "ExecutionAnalytics",
      "method": "get_fill_rate",
      "is_async": false,
      "line": 608
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution_analytics_fixed.py",
      "class": "ExecutionAnalytics",
      "method": "get_average_latency",
      "is_async": false,
      "line": 632
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution_analytics_fixed.py",
      "class": "ExecutionAnalytics",
      "method": "get_execution_quality_stats",
      "is_async": false,
      "line": 647
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution_analytics_fixed.py",
      "class": "ExecutionAnalytics",
      "method": "get_vwap_deviation_stats",
      "is_async": false,
      "line": 670
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution_analytics_fixed.py",
      "class": "ExecutionAnalytics",
      "method": "get_implementation_shortfall_stats",
      "is_async": false,
      "line": 693
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\market_data_service.py",
      "class": "MarketDataService",
      "method": "get_price",
      "is_async": true,
      "line": 76
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\market_data_service.py",
      "class": "MarketDataService",
      "method": "get_spread",
      "is_async": true,
      "line": 117
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\market_data_service.py",
      "class": "MarketDataService",
      "method": "get_market_data",
      "is_async": true,
      "line": 158
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\market_data_service.py",
      "class": "MarketDataService",
      "method": "get_historical_data",
      "is_async": true,
      "line": 239
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\market_data_service.py",
      "class": "MarketDataService",
      "method": "get_volatility",
      "is_async": true,
      "line": 412
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\market_data_service.py",
      "class": "MarketDataService",
      "method": "get_avg_daily_volume",
      "is_async": true,
      "line": 476
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\market_data_service.py",
      "class": "MarketDataService",
      "method": "get_market_regime",
      "is_async": true,
      "line": 530
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\market_data_service.py",
      "class": "MarketDataService",
      "method": "get_market_conditions",
      "is_async": true,
      "line": 620
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\market_data_service.py",
      "class": "MarketDataService",
      "method": "get_historical_volume",
      "is_async": true,
      "line": 672
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\market_data_service.py",
      "class": "MarketDataService",
      "method": "get_predicted_volume",
      "is_async": true,
      "line": 759
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\market_data_service.py",
      "class": "MarketDataService",
      "method": "get_realtime_volume",
      "is_async": true,
      "line": 851
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_execution_service.py",
      "class": "OrderExecutionService",
      "method": "get_orders",
      "is_async": false,
      "line": 446
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_execution_service.py",
      "class": "OrderExecutionService",
      "method": "get_order",
      "is_async": false,
      "line": 477
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_execution_service.py",
      "class": "OrderExecutionService",
      "method": "update_execution_status",
      "is_async": false,
      "line": 502
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_execution_service.py",
      "class": "OrderExecutionService",
      "method": "get_algorithm_status",
      "is_async": false,
      "line": 536
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_execution_service.py",
      "class": "OrderExecutionService",
      "method": "get_active_algorithms",
      "is_async": false,
      "line": 554
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_reconciliation_service.py",
      "class": "OrderReconciliationService",
      "method": "get_reconciliation_status",
      "is_async": false,
      "line": 557
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_reconciliation_service.py",
      "class": "OrderReconciliationService",
      "method": "get_reconciliation_statistics",
      "is_async": false,
      "line": 579
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_reconciliation_service.py",
      "class": "MockOrderStore",
      "method": "get_orders",
      "is_async": true,
      "line": 601
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_reconciliation_service.py",
      "class": "MockOrderStore",
      "method": "get_positions",
      "is_async": true,
      "line": 604
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_reconciliation_service.py",
      "class": "MockOrderStore",
      "method": "get_account_info",
      "is_async": true,
      "line": 607
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_reconciliation_service.py",
      "class": "MockOrderStore",
      "method": "update_order_status",
      "is_async": true,
      "line": 613
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_reconciliation_service.py",
      "class": "MockOrderStore",
      "method": "update_order_fill",
      "is_async": true,
      "line": 616
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_reconciliation_service.py",
      "class": "MockOrderStore",
      "method": "update_position",
      "is_async": true,
      "line": 627
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\order_reconciliation_service.py",
      "class": "MockOrderStore",
      "method": "update_account_balance",
      "is_async": true,
      "line": 631
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution\\algorithm_execution_service.py",
      "class": "AlgorithmExecutionService",
      "method": "get_algorithm_status",
      "is_async": false,
      "line": 311
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution\\algorithm_execution_service.py",
      "class": "AlgorithmExecutionService",
      "method": "get_active_algorithms",
      "is_async": false,
      "line": 332
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution\\base_execution_service.py",
      "class": "BaseExecutionService",
      "method": "get_orders",
      "is_async": false,
      "line": 167
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution\\base_execution_service.py",
      "class": "BaseExecutionService",
      "method": "get_order",
      "is_async": false,
      "line": 189
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\services\\execution\\base_execution_service.py",
      "class": "BaseExecutionService",
      "method": "update_execution_status",
      "is_async": false,
      "line": 201
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_market_regime_simulator.py",
      "class": "AdvancedMarketRegimeSimulator",
      "method": "get_active_sessions",
      "is_async": false,
      "line": 175
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_market_regime_simulator.py",
      "class": "AdvancedMarketRegimeSimulator",
      "method": "get_liquidity_factor",
      "is_async": false,
      "line": 195
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_market_regime_simulator.py",
      "class": "AdvancedMarketRegimeSimulator",
      "method": "get_random_scenario",
      "is_async": false,
      "line": 596
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_market_regime_simulator.py",
      "class": "AdvancedMarketRegimeSimulator",
      "method": "create_curriculum",
      "is_async": false,
      "line": 617
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "NewsEvent",
      "method": "get_price_impact_factor",
      "is_async": false,
      "line": 129
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "NewsEvent",
      "method": "get_volatility_impact_factor",
      "is_async": false,
      "line": 133
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "NewsEvent",
      "method": "get_liquidity_impact_factor",
      "is_async": false,
      "line": 137
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "NewsEvent",
      "method": "calculate_remaining_impact",
      "is_async": false,
      "line": 141
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "NewsCalendar",
      "method": "get_event",
      "is_async": false,
      "line": 241
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "NewsCalendar",
      "method": "get_events_in_window",
      "is_async": false,
      "line": 245
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "NewsCalendar",
      "method": "get_active_events",
      "is_async": false,
      "line": 276
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "NewsCalendar",
      "method": "update_events",
      "is_async": false,
      "line": 299
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "MarketSentimentTracker",
      "method": "update_sentiment",
      "is_async": false,
      "line": 422
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "MarketSentimentTracker",
      "method": "get_current_sentiment",
      "is_async": false,
      "line": 450
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "MarketSentimentTracker",
      "method": "get_pair_sentiment",
      "is_async": false,
      "line": 484
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "MarketSentimentTracker",
      "method": "get_historical_sentiment",
      "is_async": false,
      "line": 507
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "NewsAndSentimentSimulator",
      "method": "get_sentiment_data",
      "is_async": false,
      "line": 1134
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\advanced_news_sentiment_simulator.py",
      "class": "NewsAndSentimentSimulator",
      "method": "get_upcoming_events",
      "is_async": false,
      "line": 1186
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\broker_simulator.py",
      "class": "SimulatedBroker",
      "method": "update_market_data",
      "is_async": false,
      "line": 209
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\broker_simulator.py",
      "class": "SimulatedBroker",
      "method": "get_account_summary",
      "is_async": false,
      "line": 234
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\dynamic_risk_manager.py",
      "class": "DynamicRiskManager",
      "method": "get_risk_parameter",
      "is_async": false,
      "line": 450
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\dynamic_risk_manager.py",
      "class": "DynamicRiskManager",
      "method": "get_current_risk_profile",
      "is_async": false,
      "line": 488
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\dynamic_risk_manager.py",
      "class": "DynamicRiskManager",
      "method": "load_configuration",
      "is_async": false,
      "line": 531
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\dynamic_risk_manager.py",
      "class": "DynamicRiskManager",
      "method": "get_risk_adjustment_history",
      "is_async": false,
      "line": 565
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\dynamic_risk_manager.py",
      "class": "RLRiskOptimizer",
      "method": "load_model",
      "is_async": false,
      "line": 702
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "OrderBook",
      "method": "update_mid_price",
      "is_async": false,
      "line": 309
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "OrderBook",
      "method": "update_spread",
      "is_async": false,
      "line": 319
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "OrderBook",
      "method": "get_best_bid",
      "is_async": false,
      "line": 329
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "OrderBook",
      "method": "get_best_ask",
      "is_async": false,
      "line": 333
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "OrderBook",
      "method": "get_current_spread",
      "is_async": false,
      "line": 337
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "MarketEvent",
      "method": "get_price_impact_factor",
      "is_async": false,
      "line": 366
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "MarketEvent",
      "method": "get_volatility_impact_factor",
      "is_async": false,
      "line": 383
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "MarketEvent",
      "method": "get_spread_impact_factor",
      "is_async": false,
      "line": 394
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "MarketEvent",
      "method": "get_liquidity_impact",
      "is_async": false,
      "line": 405
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "ForexBrokerSimulator",
      "method": "get_account_summary",
      "is_async": false,
      "line": 924
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "ForexBrokerSimulator",
      "method": "get_current_prices",
      "is_async": false,
      "line": 953
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "ForexBrokerSimulator",
      "method": "get_order_book_snapshot",
      "is_async": false,
      "line": 1096
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "ForexBrokerSimulator",
      "method": "get_trade_history",
      "is_async": false,
      "line": 1116
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "ForexBrokerSimulator",
      "method": "get_positions",
      "is_async": false,
      "line": 1120
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "ForexBrokerSimulator",
      "method": "get_pending_orders",
      "is_async": false,
      "line": 1124
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\forex_broker_simulator.py",
      "class": "ForexBrokerSimulator",
      "method": "get_active_events",
      "is_async": false,
      "line": 1129
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\historical_news_data_collector.py",
      "class": "NewsDataCollector",
      "method": "load_or_download_news_for_period",
      "is_async": false,
      "line": 137
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\market_simulator.py",
      "class": "MarketDataSimulator",
      "method": "get_current_market_state",
      "is_async": false,
      "line": 363
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_event_backtester.py",
      "class": "NewsEventBacktester",
      "method": "load_historical_news_events",
      "is_async": false,
      "line": 77
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_event_backtester.py",
      "class": "NewsEventBacktester",
      "method": "calculate_news_impacts",
      "is_async": false,
      "line": 131
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_event_backtester.py",
      "class": "NewsEventBacktester",
      "method": "get_active_news_events",
      "is_async": false,
      "line": 207
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_event_backtester.py",
      "class": "NewsEventBacktester",
      "method": "calculate_slippage",
      "is_async": false,
      "line": 228
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_event_backtester.py",
      "class": "NewsEventBacktester",
      "method": "calculate_spread",
      "is_async": false,
      "line": 246
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_event_backtester.py",
      "class": "NewsEventBacktester",
      "method": "analyze_performance_during_news",
      "is_async": false,
      "line": 472
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_sentiment_simulator.py",
      "class": "NewsEvent",
      "method": "get_impact_factor",
      "is_async": false,
      "line": 130
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_sentiment_simulator.py",
      "class": "NewsAndSentimentSimulator",
      "method": "get_active_events",
      "is_async": false,
      "line": 458
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_sentiment_simulator.py",
      "class": "NewsAndSentimentSimulator",
      "method": "calculate_price_impact",
      "is_async": false,
      "line": 473
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_sentiment_simulator.py",
      "class": "NewsAndSentimentSimulator",
      "method": "calculate_gap_probability",
      "is_async": false,
      "line": 531
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_sentiment_simulator.py",
      "class": "NewsAndSentimentSimulator",
      "method": "calculate_slippage_impact",
      "is_async": false,
      "line": 615
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_sentiment_simulator.py",
      "class": "NewsAndSentimentSimulator",
      "method": "get_sentiment",
      "is_async": false,
      "line": 669
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\news_sentiment_simulator.py",
      "class": "NewsAndSentimentSimulator",
      "method": "get_pair_sentiment_impact",
      "is_async": false,
      "line": 681
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\paper_trading_system.py",
      "class": "PaperTradingSystem",
      "method": "get_system_status",
      "is_async": false,
      "line": 212
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\reinforcement_learning\\agent_benchmarking.py",
      "class": "RLAgentBenchmark",
      "method": "create_custom_scenario",
      "is_async": false,
      "line": 262
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\reinforcement_learning\\agent_benchmarking.py",
      "class": "RLAgentBenchmark",
      "method": "get_scenarios_by_category",
      "is_async": false,
      "line": 306
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\reinforcement_learning\\agent_benchmarking.py",
      "class": "RLAgentBenchmark",
      "method": "create_environment_from_scenario",
      "is_async": false,
      "line": 320
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\reinforcement_learning\\agent_benchmarking.py",
      "class": "RLAgentBenchmark",
      "method": "get_benchmark_summary",
      "is_async": false,
      "line": 508
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\reinforcement_learning\\agent_benchmarking.py",
      "class": "RLAgentBenchmark",
      "method": "get_performance_report",
      "is_async": false,
      "line": 659
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\reinforcement_learning\\curriculum_learning_framework.py",
      "class": "CurriculumLearningFramework",
      "method": "get_current_level_scenarios",
      "is_async": false,
      "line": 319
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\reinforcement_learning\\curriculum_learning_framework.py",
      "class": "CurriculumLearningFramework",
      "method": "get_progress_summary",
      "is_async": false,
      "line": 405
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\reinforcement_learning\\environment_generator.py",
      "class": "ForexTradingEnvironment",
      "method": "get_performance_summary",
      "is_async": false,
      "line": 632
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\reinforcement_learning\\training_module.py",
      "class": "DQNAgent",
      "method": "update_epsilon",
      "is_async": false,
      "line": 210
    },
    {
      "file": "trading-gateway-service\\trading_gateway_service\\simulation\\reinforcement_learning\\training_module.py",
      "class": "CurriculumTrainer",
      "method": "create_new_agent",
      "is_async": false,
      "line": 433
    }
  ],
  "ui-service": [
    {
      "file": "ui-service\\components\\alerts_notification_system.py",
      "class": "AlertRule",
      "method": "check_condition",
      "is_async": false,
      "line": 63
    },
    {
      "file": "ui-service\\components\\alerts_notification_system.py",
      "class": "NotificationChannel",
      "method": "send_notification",
      "is_async": true,
      "line": 171
    },
    {
      "file": "ui-service\\components\\alerts_notification_system.py",
      "class": "EmailNotificationChannel",
      "method": "send_notification",
      "is_async": true,
      "line": 217
    },
    {
      "file": "ui-service\\components\\alerts_notification_system.py",
      "class": "InAppNotificationChannel",
      "method": "send_notification",
      "is_async": true,
      "line": 280
    },
    {
      "file": "ui-service\\components\\alerts_notification_system.py",
      "class": "InAppNotificationChannel",
      "method": "get_pending_notifications",
      "is_async": false,
      "line": 293
    },
    {
      "file": "ui-service\\components\\alerts_notification_system.py",
      "class": "PushNotificationChannel",
      "method": "send_notification",
      "is_async": true,
      "line": 315
    },
    {
      "file": "ui-service\\components\\alerts_notification_system.py",
      "class": "AlertSystem",
      "method": "process_indicator_update",
      "is_async": true,
      "line": 367
    },
    {
      "file": "ui-service\\components\\alerts_notification_system.py",
      "class": "AlertSystem",
      "method": "get_active_rules",
      "is_async": false,
      "line": 410
    },
    {
      "file": "ui-service\\components\\alerts_notification_system.py",
      "class": "AlertSystem",
      "method": "get_notification_history",
      "is_async": false,
      "line": 415
    },
    {
      "file": "ui-service\\components\\alerts_notification_system.py",
      "class": "AlertSystem",
      "method": "load_rules_from_file",
      "is_async": false,
      "line": 426
    },
    {
      "file": "ui-service\\components\\custom_dashboards.py",
      "class": "Dashboard",
      "method": "update_component",
      "is_async": false,
      "line": 260
    },
    {
      "file": "ui-service\\components\\custom_dashboards.py",
      "class": "DashboardManager",
      "method": "create_dashboard",
      "is_async": false,
      "line": 385
    },
    {
      "file": "ui-service\\components\\custom_dashboards.py",
      "class": "DashboardManager",
      "method": "get_dashboard",
      "is_async": false,
      "line": 402
    },
    {
      "file": "ui-service\\components\\custom_dashboards.py",
      "class": "DashboardManager",
      "method": "get_all_dashboards",
      "is_async": false,
      "line": 406
    },
    {
      "file": "ui-service\\components\\custom_dashboards.py",
      "class": "DashboardManager",
      "method": "get_active_dashboard",
      "is_async": false,
      "line": 434
    },
    {
      "file": "ui-service\\components\\custom_dashboards.py",
      "class": "DashboardManager",
      "method": "load_dashboards",
      "is_async": false,
      "line": 467
    },
    {
      "file": "ui-service\\components\\custom_dashboards.py",
      "class": "DashboardManager",
      "method": "delete_dashboard",
      "is_async": false,
      "line": 503
    },
    {
      "file": "ui-service\\components\\dashboard_components.py",
      "class": "Dashboard",
      "method": "update_widget",
      "is_async": false,
      "line": 104
    },
    {
      "file": "ui-service\\components\\dashboard_components.py",
      "class": "Dashboard",
      "method": "update_layout",
      "is_async": false,
      "line": 119
    },
    {
      "file": "ui-service\\components\\dashboard_components.py",
      "class": "DashboardManager",
      "method": "create_dashboard",
      "is_async": false,
      "line": 163
    },
    {
      "file": "ui-service\\components\\dashboard_components.py",
      "class": "DashboardManager",
      "method": "get_dashboard",
      "is_async": false,
      "line": 186
    },
    {
      "file": "ui-service\\components\\dashboard_components.py",
      "class": "DashboardManager",
      "method": "delete_dashboard",
      "is_async": false,
      "line": 241
    },
    {
      "file": "ui-service\\components\\dashboard_components.py",
      "class": "TemplateManager",
      "method": "get_template",
      "is_async": false,
      "line": 410
    },
    {
      "file": "ui-service\\components\\dashboard_components.py",
      "class": "TemplateManager",
      "method": "delete_template",
      "is_async": false,
      "line": 431
    },
    {
      "file": "ui-service\\components\\dashboard_components.py",
      "class": "StrategyComparisonTool",
      "method": "create_comparison_widget",
      "is_async": false,
      "line": 486
    },
    {
      "file": "ui-service\\components\\visualization_adapter.py",
      "class": "VisualizationAdapter",
      "method": "get_indicator_metadata",
      "is_async": false,
      "line": 62
    },
    {
      "file": "ui-service\\components\\visualization_adapter.py",
      "class": "VisualizationAdapter",
      "method": "calculate_indicator",
      "is_async": false,
      "line": 95
    },
    {
      "file": "ui-service\\components\\visualization_adapter.py",
      "class": "VisualizationAdapter",
      "method": "create_parameter_controller",
      "is_async": false,
      "line": 223
    },
    {
      "file": "ui-service\\components\\visualization_adapter.py",
      "class": "VisualizationAdapter",
      "method": "create_synchronized_display",
      "is_async": false,
      "line": 290
    },
    {
      "file": "ui-service\\components\\visualization_adapter.py",
      "class": "VisualizationAdapter",
      "method": "analyze_indicator_confluence",
      "is_async": true,
      "line": 304
    },
    {
      "file": "ui-service\\components\\visualization_library.py",
      "class": "IndicatorVisualizationLibrary",
      "method": "get_renderer",
      "is_async": false,
      "line": 78
    },
    {
      "file": "ui-service\\components\\visualization_library.py",
      "class": "InteractiveParameterController",
      "method": "create_slider",
      "is_async": false,
      "line": 223
    },
    {
      "file": "ui-service\\components\\visualization_library.py",
      "class": "InteractiveParameterController",
      "method": "create_toggle",
      "is_async": false,
      "line": 228
    },
    {
      "file": "ui-service\\components\\visualization_library.py",
      "class": "InteractiveParameterController",
      "method": "create_dropdown",
      "is_async": false,
      "line": 233
    },
    {
      "file": "ui-service\\components\\visualization_library.py",
      "class": "SynchronizedDisplayManager",
      "method": "create_sync_group",
      "is_async": false,
      "line": 259
    }
  ]
}