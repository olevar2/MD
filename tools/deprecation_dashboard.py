#!/usr/bin/env python
"""
Deprecation Dashboard Generator

This script generates a dashboard for monitoring usage of deprecated modules.
It reads the deprecation report generated by the deprecation monitor and
creates an HTML dashboard with usage statistics and migration progress.

Usage:
    python deprecation_dashboard.py [--report-path PATH] [--output-path PATH] [--email] [--slack]

Options:
    --report-path PATH    Path to the deprecation report JSON file
                          [default: ../logs/deprecation_report.json]
    --output-path PATH    Path to save the HTML dashboard
                          [default: ../logs/deprecation_dashboard.html]
    --email               Send the dashboard via email
    --slack               Post a summary to Slack
"""

import os
import sys
import json
import argparse
import datetime
from typing import Dict, List, Any, Optional
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import requests
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend
import numpy as np
from collections import defaultdict

# Add project root to path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Try to import the deprecation monitor
try:
    from analysis_engine.core.deprecation_monitor import get_usage_report
    CAN_GET_LIVE_REPORT = True
except ImportError:
    CAN_GET_LIVE_REPORT = False


def load_report(report_path: str) -> Dict[str, Any]:
    """
    Load the deprecation report from a file.
    
    Args:
        report_path: Path to the report JSON file
        
    Returns:
        Dict containing the report data
    """
    if not os.path.exists(report_path):
        if CAN_GET_LIVE_REPORT:
            print(f"Report file not found at {report_path}, generating live report")
            return get_usage_report()
        else:
            print(f"Report file not found at {report_path} and cannot generate live report")
            return {
                "generated_at": datetime.datetime.now().isoformat(),
                "total_usages": 0,
                "modules": {}
            }
    
    try:
        with open(report_path, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading report: {e}")
        return {
            "generated_at": datetime.datetime.now().isoformat(),
            "total_usages": 0,
            "modules": {}
        }


def generate_usage_chart(report: Dict[str, Any], output_dir: str) -> str:
    """
    Generate a chart showing usage of deprecated modules.
    
    Args:
        report: The deprecation report
        output_dir: Directory to save the chart
        
    Returns:
        Path to the generated chart
    """
    # Extract data
    modules = []
    usages = []
    locations = []
    
    for module, data in report.get("modules", {}).items():
        modules.append(module)
        usages.append(data.get("total_usages", 0))
        locations.append(data.get("unique_locations", 0))
    
    # Create chart
    fig, ax = plt.subplots(figsize=(10, 6))
    
    x = np.arange(len(modules))
    width = 0.35
    
    ax.bar(x - width/2, usages, width, label='Total Usages')
    ax.bar(x + width/2, locations, width, label='Unique Locations')
    
    ax.set_title('Deprecated Module Usage')
    ax.set_xlabel('Module')
    ax.set_ylabel('Count')
    ax.set_xticks(x)
    ax.set_xticklabels(modules, rotation=45, ha='right')
    ax.legend()
    
    plt.tight_layout()
    
    # Save chart
    os.makedirs(output_dir, exist_ok=True)
    chart_path = os.path.join(output_dir, 'usage_chart.png')
    plt.savefig(chart_path)
    plt.close()
    
    return chart_path


def generate_trend_chart(report: Dict[str, Any], output_dir: str) -> str:
    """
    Generate a chart showing usage trends over time.
    
    Args:
        report: The deprecation report
        output_dir: Directory to save the chart
        
    Returns:
        Path to the generated chart
    """
    # Extract data
    module_timestamps = defaultdict(list)
    
    for module, data in report.get("modules", {}).items():
        for usage in data.get("usages", []):
            timestamp = usage.get("timestamp", 0)
            module_timestamps[module].append(timestamp)
    
    # Create chart
    fig, ax = plt.subplots(figsize=(10, 6))
    
    for module, timestamps in module_timestamps.items():
        # Convert timestamps to dates
        dates = [datetime.datetime.fromtimestamp(ts) for ts in timestamps]
        # Count occurrences by date
        date_counts = defaultdict(int)
        for date in dates:
            date_key = date.strftime('%Y-%m-%d')
            date_counts[date_key] += 1
        
        # Sort by date
        sorted_dates = sorted(date_counts.keys())
        counts = [date_counts[date] for date in sorted_dates]
        
        # Plot
        ax.plot(sorted_dates, counts, marker='o', label=module)
    
    ax.set_title('Deprecated Module Usage Trend')
    ax.set_xlabel('Date')
    ax.set_ylabel('Usage Count')
    ax.tick_params(axis='x', rotation=45)
    ax.legend()
    
    plt.tight_layout()
    
    # Save chart
    os.makedirs(output_dir, exist_ok=True)
    chart_path = os.path.join(output_dir, 'trend_chart.png')
    plt.savefig(chart_path)
    plt.close()
    
    return chart_path


def generate_html_dashboard(report: Dict[str, Any], output_path: str) -> None:
    """
    Generate an HTML dashboard from the deprecation report.
    
    Args:
        report: The deprecation report
        output_path: Path to save the HTML dashboard
    """
    # Generate charts
    output_dir = os.path.dirname(output_path)
    usage_chart = generate_usage_chart(report, output_dir)
    trend_chart = generate_trend_chart(report, output_dir)
    
    # Calculate migration progress
    total_modules = len(report.get("modules", {}))
    total_locations = sum(data.get("unique_locations", 0) for data in report.get("modules", {}).values())
    total_usages = report.get("total_usages", 0)
    
    # Calculate days until removal
    removal_date = datetime.date(2023, 12, 31)
    days_until_removal = (removal_date - datetime.date.today()).days
    days_message = f"{days_until_removal} days" if days_until_removal > 0 else "PAST DUE"
    
    # Generate HTML
    html = []
    html.append("<!DOCTYPE html>")
    html.append("<html>")
    html.append("<head>")
    html.append("  <title>Deprecation Dashboard</title>")
    html.append("  <style>")
    html.append("    body { font-family: Arial, sans-serif; margin: 20px; }")
    html.append("    h1 { color: #333; }")
    html.append("    .summary { display: flex; justify-content: space-between; margin-bottom: 20px; }")
    html.append("    .summary-card { background-color: #f5f5f5; border-radius: 5px; padding: 15px; width: 30%; }")
    html.append("    .summary-card h2 { margin-top: 0; }")
    html.append("    .warning { color: #e74c3c; }")
    html.append("    .success { color: #2ecc71; }")
    html.append("    .module-section { margin-bottom: 30px; }")
    html.append("    table { width: 100%; border-collapse: collapse; }")
    html.append("    th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }")
    html.append("    th { background-color: #f2f2f2; }")
    html.append("    .high-usage { color: #e74c3c; font-weight: bold; }")
    html.append("    .medium-usage { color: #f39c12; }")
    html.append("    .low-usage { color: #3498db; }")
    html.append("    .chart-container { display: flex; justify-content: space-between; margin-bottom: 20px; }")
    html.append("    .chart { width: 48%; }")
    html.append("  </style>")
    html.append("</head>")
    html.append("<body>")
    
    # Header
    html.append(f"  <h1>Deprecation Dashboard</h1>")
    html.append(f"  <p>Generated at: {report.get('generated_at', datetime.datetime.now().isoformat())}</p>")
    
    # Summary
    html.append("  <div class='summary'>")
    html.append("    <div class='summary-card'>")
    html.append("      <h2>Migration Status</h2>")
    html.append(f"      <p><strong>Deprecated Modules:</strong> {total_modules}</p>")
    html.append(f"      <p><strong>Unique Usage Locations:</strong> {total_locations}</p>")
    html.append(f"      <p><strong>Total Usage Count:</strong> {total_usages}</p>")
    html.append("    </div>")
    
    html.append("    <div class='summary-card'>")
    html.append("      <h2>Timeline</h2>")
    html.append(f"      <p><strong>Removal Date:</strong> December 31, 2023</p>")
    if days_until_removal > 0:
        html.append(f"      <p><strong>Days Remaining:</strong> <span class='warning'>{days_until_removal}</span></p>")
    else:
        html.append(f"      <p><strong>Status:</strong> <span class='warning'>PAST DUE</span></p>")
    html.append("    </div>")
    
    html.append("    <div class='summary-card'>")
    html.append("      <h2>Migration Resources</h2>")
    html.append("      <p><a href='../docs/configuration_migration_guide.md'>Configuration Migration Guide</a></p>")
    html.append("      <p><a href='../docs/api_router_migration_guide.md'>API Router Migration Guide</a></p>")
    html.append("      <p><a href='../tools/migrate_config_imports.py'>Config Migration Tool</a></p>")
    html.append("      <p><a href='../tools/migrate_router_imports.py'>Router Migration Tool</a></p>")
    html.append("    </div>")
    html.append("  </div>")
    
    # Charts
    html.append("  <div class='chart-container'>")
    html.append("    <div class='chart'>")
    html.append("      <h2>Usage by Module</h2>")
    html.append(f"      <img src='{os.path.basename(usage_chart)}' alt='Usage Chart' width='100%'>")
    html.append("    </div>")
    html.append("    <div class='chart'>")
    html.append("      <h2>Usage Trend</h2>")
    html.append(f"      <img src='{os.path.basename(trend_chart)}' alt='Trend Chart' width='100%'>")
    html.append("    </div>")
    html.append("  </div>")
    
    # Module details
    for module, data in report.get("modules", {}).items():
        html.append(f"  <div class='module-section'>")
        html.append(f"    <h2>{module}</h2>")
        html.append(f"    <p><strong>Total Usages:</strong> {data.get('total_usages', 0)}</p>")
        html.append(f"    <p><strong>Unique Locations:</strong> {data.get('unique_locations', 0)}</p>")
        
        # Usage table
        html.append("    <h3>Usage Locations</h3>")
        html.append("    <table>")
        html.append("      <tr>")
        html.append("        <th>File</th>")
        html.append("        <th>Line</th>")
        html.append("        <th>Function</th>")
        html.append("        <th>Count</th>")
        html.append("        <th>Last Seen</th>")
        html.append("      </tr>")
        
        usages = data.get("usages", [])
        # Sort by count (descending)
        usages.sort(key=lambda x: x.get("count", 0), reverse=True)
        
        for usage in usages:
            # Determine usage level for styling
            usage_class = "low-usage"
            if usage.get("count", 0) > 100:
                usage_class = "high-usage"
            elif usage.get("count", 0) > 20:
                usage_class = "medium-usage"
                
            html.append(f"      <tr>")
            html.append(f"        <td>{usage.get('caller_file', '')}</td>")
            html.append(f"        <td>{usage.get('caller_line', '')}</td>")
            html.append(f"        <td>{usage.get('caller_function', '')}</td>")
            html.append(f"        <td class='{usage_class}'>{usage.get('count', 0)}</td>")
            html.append(f"        <td>{usage.get('last_seen', '')}</td>")
            html.append(f"      </tr>")
        
        html.append("    </table>")
        html.append("  </div>")
    
    html.append("</body>")
    html.append("</html>")
    
    # Write HTML to file
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, 'w') as f:
        f.write("\n".join(html))
    
    print(f"Dashboard generated at {output_path}")


def send_email_report(report: Dict[str, Any], dashboard_path: str) -> None:
    """
    Send the deprecation report via email.
    
    Args:
        report: The deprecation report
        dashboard_path: Path to the HTML dashboard
    """
    # Email configuration
    smtp_server = os.environ.get("SMTP_SERVER", "smtp.example.com")
    smtp_port = int(os.environ.get("SMTP_PORT", "587"))
    smtp_user = os.environ.get("SMTP_USER", "")
    smtp_password = os.environ.get("SMTP_PASSWORD", "")
    sender_email = os.environ.get("SENDER_EMAIL", "noreply@example.com")
    recipient_emails = os.environ.get("RECIPIENT_EMAILS", "").split(",")
    
    if not recipient_emails or recipient_emails[0] == "":
        print("No recipient emails configured, skipping email report")
        return
    
    # Calculate migration progress
    total_modules = len(report.get("modules", {}))
    total_locations = sum(data.get("unique_locations", 0) for data in report.get("modules", {}).values())
    total_usages = report.get("total_usages", 0)
    
    # Calculate days until removal
    removal_date = datetime.date(2023, 12, 31)
    days_until_removal = (removal_date - datetime.date.today()).days
    days_message = f"{days_until_removal} days" if days_until_removal > 0 else "PAST DUE"
    
    # Create message
    msg = MIMEMultipart()
    msg["Subject"] = f"Deprecation Report - {days_message} until removal"
    msg["From"] = sender_email
    msg["To"] = ", ".join(recipient_emails)
    
    # Email body
    body = f"""
    <html>
    <body>
        <h1>Deprecation Migration Status</h1>
        <p>This is an automated report on the status of deprecated module migration.</p>
        
        <h2>Summary</h2>
        <ul>
            <li><strong>Deprecated Modules:</strong> {total_modules}</li>
            <li><strong>Unique Usage Locations:</strong> {total_locations}</li>
            <li><strong>Total Usage Count:</strong> {total_usages}</li>
            <li><strong>Removal Date:</strong> December 31, 2023</li>
            <li><strong>Days Remaining:</strong> {days_message}</li>
        </ul>
        
        <h2>Module Usage</h2>
        <table border="1" cellpadding="5" cellspacing="0">
            <tr>
                <th>Module</th>
                <th>Unique Locations</th>
                <th>Total Usages</th>
            </tr>
    """
    
    for module, data in report.get("modules", {}).items():
        body += f"""
            <tr>
                <td>{module}</td>
                <td>{data.get('unique_locations', 0)}</td>
                <td>{data.get('total_usages', 0)}</td>
            </tr>
        """
    
    body += f"""
        </table>
        
        <p>For detailed information, please see the attached dashboard.</p>
        
        <h2>Migration Resources</h2>
        <ul>
            <li><a href="https://confluence.example.com/display/DEV/Configuration+Migration+Guide">Configuration Migration Guide</a></li>
            <li><a href="https://confluence.example.com/display/DEV/API+Router+Migration+Guide">API Router Migration Guide</a></li>
        </ul>
    </body>
    </html>
    """
    
    msg.attach(MIMEText(body, "html"))
    
    # Attach dashboard
    with open(dashboard_path, "r") as f:
        attachment = MIMEText(f.read(), "html")
        attachment.add_header("Content-Disposition", "attachment", filename="deprecation_dashboard.html")
        msg.attach(attachment)
    
    # Send email
    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        if smtp_user and smtp_password:
            server.login(smtp_user, smtp_password)
        server.sendmail(sender_email, recipient_emails, msg.as_string())
        server.quit()
        print(f"Email report sent to {', '.join(recipient_emails)}")
    except Exception as e:
        print(f"Error sending email: {e}")


def post_slack_summary(report: Dict[str, Any]) -> None:
    """
    Post a summary of the deprecation report to Slack.
    
    Args:
        report: The deprecation report
    """
    # Slack configuration
    webhook_url = os.environ.get("SLACK_WEBHOOK_URL", "")
    
    if not webhook_url:
        print("No Slack webhook URL configured, skipping Slack report")
        return
    
    # Calculate migration progress
    total_modules = len(report.get("modules", {}))
    total_locations = sum(data.get("unique_locations", 0) for data in report.get("modules", {}).values())
    total_usages = report.get("total_usages", 0)
    
    # Calculate days until removal
    removal_date = datetime.date(2023, 12, 31)
    days_until_removal = (removal_date - datetime.date.today()).days
    days_message = f"{days_until_removal} days" if days_until_removal > 0 else "PAST DUE"
    
    # Create message
    message = {
        "blocks": [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": f"Deprecation Migration Status - {days_message} until removal"
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": "This is an automated report on the status of deprecated module migration."
                }
            },
            {
                "type": "section",
                "fields": [
                    {
                        "type": "mrkdwn",
                        "text": f"*Deprecated Modules:*\n{total_modules}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*Unique Usage Locations:*\n{total_locations}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*Total Usage Count:*\n{total_usages}"
                    },
                    {
                        "type": "mrkdwn",
                        "text": f"*Removal Date:*\nDecember 31, 2023"
                    }
                ]
            },
            {
                "type": "divider"
            }
        ]
    }
    
    # Add module details
    for module, data in report.get("modules", {}).items():
        message["blocks"].append({
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": f"*{module}*\nLocations: {data.get('unique_locations', 0)} | Usages: {data.get('total_usages', 0)}"
            }
        })
    
    # Add migration resources
    message["blocks"].append({
        "type": "divider"
    })
    message["blocks"].append({
        "type": "section",
        "text": {
            "type": "mrkdwn",
            "text": "*Migration Resources*"
        }
    })
    message["blocks"].append({
        "type": "section",
        "text": {
            "type": "mrkdwn",
            "text": "• <https://confluence.example.com/display/DEV/Configuration+Migration+Guide|Configuration Migration Guide>\n• <https://confluence.example.com/display/DEV/API+Router+Migration+Guide|API Router Migration Guide>"
        }
    })
    
    # Send message
    try:
        response = requests.post(webhook_url, json=message)
        if response.status_code == 200:
            print("Slack summary posted successfully")
        else:
            print(f"Error posting to Slack: {response.status_code} {response.text}")
    except Exception as e:
        print(f"Error posting to Slack: {e}")


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Generate deprecation dashboard")
    parser.add_argument("--report-path", default="../logs/deprecation_report.json", help="Path to the deprecation report JSON file")
    parser.add_argument("--output-path", default="../logs/deprecation_dashboard.html", help="Path to save the HTML dashboard")
    parser.add_argument("--email", action="store_true", help="Send the dashboard via email")
    parser.add_argument("--slack", action="store_true", help="Post a summary to Slack")
    args = parser.parse_args()
    
    # Load report
    report = load_report(args.report_path)
    
    # Generate dashboard
    generate_html_dashboard(report, args.output_path)
    
    # Send email if requested
    if args.email:
        send_email_report(report, args.output_path)
    
    # Post to Slack if requested
    if args.slack:
        post_slack_summary(report)


if __name__ == "__main__":
    main()
