#!/usr/bin/env python3
"""
Visualize Forex Trading Platform Architecture

This script creates a visualization of the forex trading platform architecture
based on the dependency report generated by analyze_dependencies.py.

Usage:
    python visualize_architecture.py [--input-file INPUT_FILE] [--output-file OUTPUT_FILE]

Options:
    --input-file INPUT_FILE      Input dependency report file (default: dependency-report.json)
    --output-file OUTPUT_FILE    Output image file (default: architecture-diagram.png)
"""

import os
import sys
import json
import argparse
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.patches as mpatches

# Root directory of the forex trading platform
ROOT_DIR = "D:/MD/forex_trading_platform"

def load_dependency_report(file_path: str) -> dict:
    """Load dependency report from file."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading dependency report: {e}")
        return {}

def create_architecture_diagram(report: dict, output_file: str) -> None:
    """Create architecture diagram from dependency report."""
    # Create directed graph
    G = nx.DiGraph()
    
    # Add nodes (services)
    dependencies = report.get('dependencies', {})
    for service in dependencies:
        G.add_node(service)
    
    # Add edges (dependencies)
    for service, deps in dependencies.items():
        for dep in deps:
            G.add_edge(service, dep)
    
    # Set up the figure
    plt.figure(figsize=(16, 12))
    
    # Define node colors based on service type
    service_types = {
        'common-lib': 'core',
        'common-js-lib': 'core',
        'api-gateway': 'gateway',
        'ui-service': 'frontend',
        'data-management-service': 'data',
        'data-pipeline-service': 'data',
        'feature-store-service': 'data',
        'model-registry-service': 'data',
        'ml-integration-service': 'ml',
        'ml-workbench-service': 'ml',
        'analysis-engine-service': 'analysis',
        'strategy-execution-engine': 'execution',
        'trading-gateway-service': 'execution',
        'portfolio-management-service': 'management',
        'risk-management-service': 'management',
        'monitoring-alerting-service': 'monitoring'
    }
    
    # Define color map for service types
    color_map = {
        'core': '#FF5733',       # Red-Orange
        'gateway': '#33A8FF',    # Blue
        'frontend': '#33FF57',   # Green
        'data': '#A833FF',       # Purple
        'ml': '#FFD433',         # Yellow
        'analysis': '#FF33A8',   # Pink
        'execution': '#33FFA8',  # Teal
        'management': '#A8FF33', # Lime
        'monitoring': '#FF8333'  # Orange
    }
    
    # Create node color list
    node_colors = [color_map.get(service_types.get(node, 'other'), '#CCCCCC') for node in G.nodes()]
    
    # Calculate node sizes based on incoming connections (importance)
    incoming_connections = {node: 0 for node in G.nodes()}
    for u, v in G.edges():
        incoming_connections[v] += 1
    
    # Scale node sizes
    min_size = 1000
    max_size = 3000
    node_sizes = [min_size + (incoming_connections[node] * 200) for node in G.nodes()]
    
    # Create layout
    pos = nx.spring_layout(G, k=0.3, iterations=50, seed=42)
    
    # Draw nodes
    nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=node_colors, alpha=0.8, 
                          edgecolors='black', linewidths=1.5)
    
    # Draw edges with arrows
    nx.draw_networkx_edges(G, pos, width=1.5, alpha=0.7, edge_color='gray', 
                          arrowsize=20, connectionstyle='arc3,rad=0.1')
    
    # Draw labels
    nx.draw_networkx_labels(G, pos, font_size=10, font_family='sans-serif', font_weight='bold')
    
    # Create legend
    legend_patches = [mpatches.Patch(color=color, label=service_type.capitalize())
                     for service_type, color in color_map.items()]
    plt.legend(handles=legend_patches, loc='upper right', fontsize=10)
    
    # Add title
    plt.title('Forex Trading Platform Architecture', fontsize=16)
    
    # Remove axes
    plt.axis('off')
    
    # Save figure
    plt.tight_layout()
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"Architecture diagram saved to {output_file}")
    
    # Close figure
    plt.close()

def main():
    parser = argparse.ArgumentParser(description='Visualize forex trading platform architecture')
    parser.add_argument('--input-file', default='dependency-report.json', 
                        help='Input dependency report file')
    parser.add_argument('--output-file', default='architecture-diagram.png', 
                        help='Output image file')
    args = parser.parse_args()
    
    # Load dependency report
    input_path = os.path.join(ROOT_DIR, 'tools', 'output', args.input_file)
    report = load_dependency_report(input_path)
    
    if not report:
        print(f"Error: Could not load dependency report from {input_path}")
        return
    
    # Create output directory if it doesn't exist
    output_dir = os.path.join(ROOT_DIR, 'tools', 'output', 'architecture_diagrams')
    os.makedirs(output_dir, exist_ok=True)
    
    # Create architecture diagram
    output_path = os.path.join(output_dir, args.output_file)
    create_architecture_diagram(report, output_path)

if __name__ == "__main__":
    main()